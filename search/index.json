[{"content":"一整个月都是培训，好累啊，感觉工作的热情已经被浇灭了，学习也提不起动力，但是身边的人都好优秀，大学四年没有好好拓展自己真是失误，未来继续砥砺前行吧，把自己的事做好，幸福才是最人生的终极目标啊。 ","date":"2025-08-15T12:16:55+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241222/42401784_78798400.png","permalink":"https://note.zhongyangblog.eu.org/p/%E5%B7%A5%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%9C%88%E4%BA%86/","title":"工作一个月了"},{"content":" ​\t有点后悔对妈妈说出那种话了，可能是年龄和眼界的差别，明明是件小事，却被我当作嘲讽的武器，甚至将儿时的不满尽数宣泄…………现在真是后悔不已，总觉得戾气太重，无论如何，无论有什么分歧，这么多年被养育成人，她的所有出发点都是为我好的，不该那么说的，但是道歉又太矫情，还是读读书平息一下心中的暴脾气吧。\n​\t今晚的月光也很清冷\n","date":"2025-07-06T23:19:22+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/45104518_15083000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/2025.07.06%E6%97%A5%E8%AE%B0/","title":"2025.07.06日记"},{"content":" ​ 毕业已经快两个星期了，回想起在返乡途中给自己做的详细计划，密密麻麻的，如果真的能够完成该有多好，但是最近真的力不从心了，又想起高三那段日子，实际上真的没必要追求那么多。一生只够爱一个人，专注于一件有价值的事，比麻木地活在计划中更有幸福感。\n从前慢 木心\n记得早先少年时\n大家诚诚恳恳\n说一句 是一句\n清早上火车站\n长街黑暗无行人\n卖豆浆的小店冒着热气\n从前的日色变得慢\n车，马，邮件都慢\n一生只够爱一个人\n从前的锁也好看\n钥匙精美有样子\n你锁了 人家就懂了\n","date":"2025-07-01T22:44:58+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/16165139_41490400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%AE%9E%E9%99%85%E4%B8%8A%E6%B2%A1%E5%8A%9E%E6%B3%95%E8%BF%BD%E6%B1%82%E9%82%A3%E4%B9%88%E5%A4%9A/","title":"实际上没办法追求那么多"},{"content":" 在注册一些海内外服务时，往往不希望泄露自己的真实邮箱，所有便会希望使用临时邮箱或者域名邮箱，现在介绍三种域名邮箱方式 1、Cloudflare临时邮箱 使用项目：beilunyang/moemail: 一个基于 NextJS + Cloudflare 技术栈构建的可爱临时邮箱服务🎉\n或者：dreamhunter2333/cloudflare_temp_email: CloudFlare free temp domain email 免费收发 临时域名邮箱 支持附件 IMAP SMTP TelegramBot\n个人觉得第一种比较人性化。以上方式都只能收信\n2、微信企业邮箱 企业邮箱由于添加新用户需要移动端验证，只能使用无限邮箱别名来绕过这个限制，可以发信，收信\n3、阿里云域名邮箱 可以创建50个账户，不同账户可以绑定相同的手机号码，可以发信，收信\n参考教程：教大家免费拥有自定义域名邮箱，可任意收发邮件，注册各类AI账号 - 资源荟萃 - LINUX DO\n","date":"2025-06-28T21:40:24+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/86424599_77477900.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%97%A0%E9%99%90%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/","title":"无限域名邮箱"},{"content":"心血来潮，部署了一个flarum论坛，目前没有想好怎么使用，前期部署遇到一些问题，记录一下。网站如下：Aliya の 论坛 用户编辑：1panel数据库phpmyadmin找到flarum_users\n主题 使用的Arisem：（配置这个主题无法使用redis缓存）\nhttps://github.com/afrux/asirem 插件 如下图所示：\n站点信息 图标 网站LOGO 图片上传R2存储桶 先修改php上传限制： 在宿主机进入容器\ndocker exec -it flarum容器名称 sh 找到配置记录文件地址\nfind /etc -name \u0026#34;php.ini\u0026#34; 安装编辑器\napk add nano 编辑\nnano /etc/php8/php.ini Ctrl+F找到这两项进行修改（改成200M也行）\nupload_max_filesize = 20M post_max_size = 20M 保存退出，重启容器\ndocker restart 容器名称 插件设置（上面选aws s3和兼容）如下图所示： 相关教程 AWS S3 · FriendsOfFlarum/upload Wiki——S3插件\nFlarum论坛网站搭建教程 | 零基础搭建论坛社区网站 | Flarum主题和插件安装教程 - Zeruns\u0026rsquo;s Blog\nFlarum 中文社区\n【运维】flarum插件列表（1.8.5版本自用） | Yishu\u0026rsquo;s BLOG\n","date":"2025-06-22T12:02:19+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/37183430_17796900.jpg","permalink":"https://note.zhongyangblog.eu.org/p/flarum%E8%AE%BA%E5%9D%9B%E8%AE%BE%E7%BD%AE/","title":"Flarum论坛设置"},{"content":" 最近搭建了FileCodeBox文件快递柜，利用webdav传输较为缓慢，于是更换为S3存储，恰巧发现Claw应用部署的10G对象存储 创建公共读写的桶之后，找到access\n对应S3的关系如下：\n项目 正确示例 AccessKeyId Access Key SecretAccessKey Secret Key BucketName ❗必须真实存在的 bucket 名，看桶的名字 EndpointUrl https://分配的External Region Name auto（一般 S3 兼容的服务可以这么填） Signature Version S3v4 Hostname 分配的External ","date":"2025-06-16T22:13:59+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/58710356_18966300.jpg","permalink":"https://note.zhongyangblog.eu.org/p/claw%E5%AE%B9%E5%99%A8object_storage%E4%BD%9C%E4%B8%BAs3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/","title":"Claw容器Object_Storage作为S3对象存储"},{"content":" 最近打开电脑，风扇酷酷转，打开任务管理器一看，Antimalware Service Executable这东西又占CPU又占内存，虽然是防病毒的，但是你这一直扫描文件夹谁扛得住啊？ 目前找到两种办法\n第一种：禁止扫描所有硬盘目录 参考\n第二种：工具禁用防火墙（裸奔） 下载工具\n","date":"2025-06-10T08:49:34+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/60297536_67472100.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%85%B3%E9%97%ADwindows%E9%98%B2%E7%81%AB%E5%A2%99%E6%89%AB%E6%8F%8F/","title":"关闭windows防火墙扫描"},{"content":"《梅子闲谭》取自《菜根谭》和《小窗幽记》，漫漫人生，多少智慧如沙砾被弃之一地，终有一日回首相望，才发现人生其实灿若星河。 1、靡不有初，鲜克有终。\n​\t和“百里者半九十”一样，能坚持到最后的不一定是最开始最积极的，无论是跑还是走，只要一直前进，终将达到顶峰\n","date":"2025-06-06T18:52:05+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/32945030_91709500.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%A2%85%E5%AD%90%E9%97%B2%E8%B0%AD/","title":"梅子闲谭"},{"content":"自律一个月 2025-04-05 fighting 第一天 坚持 ","date":"2025-04-05T19:25:38+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/26500854_34989600.png","permalink":"https://note.zhongyangblog.eu.org/p/%E6%88%92%E6%B8%B8/","title":"戒游"},{"content":"记录一下GG卡的余额变动 使用的代金券，没有绑定银行卡（有些害怕）\n半年内必须要有余额变动\n无法发送短信给国内电信手机，发给GV，一次0.3￡，或者设置流量限制，参考 【giffgaff】极限保号方法，最低每次扣 0.01£ ！\n访问链接 My giffgaff | giffgaff\n2025-03-01 保号 19.37￡ 2025.03.01 2025-06-01 保号 19.07￡ 2025.06.01 ","date":"2025-03-01T11:57:07+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/22654222_83605900.jpg","permalink":"https://note.zhongyangblog.eu.org/p/gg%E5%8D%A1%E4%BF%9D%E5%8F%B7%E6%97%A5%E5%BF%97/","title":"GG卡保号日志"},{"content":"Docker安装，简单快捷\n官方项目地址\n官方安装教程\n拉取镜像 docker pull kanikig/deepl-bk 启动容器设置端口（1158） docker run -itd -p 1158:80 kanikig/deepl-bk 配置翻译插件 http://127.0.0.1:1158/translate 个人感受 延迟几乎感知不到，翻译水平中上\n","date":"2025-03-01T00:43:31+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/90093469_73943700.jpg","permalink":"https://note.zhongyangblog.eu.org/p/zotero%E8%AE%BE%E7%BD%AEdeeplx%E7%BF%BB%E8%AF%91/","title":"Zotero设置deeplx翻译"},{"content":"以后这样的风景就不多见了，才发现家里这么美 ","date":"2025-01-25T00:26:51+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/87100744_47665500.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E4%BB%A5%E5%BE%80%E4%B8%8D%E6%9B%BE%E6%B3%A8%E6%84%8F%E7%9A%84%E9%A3%8E%E6%99%AF/","title":"以往不曾注意的风景"},{"content":"​\t博客的数字小姨子认可度还是太低了，电信运营商总有一些奇奇怪怪的限制，因此打算注册一个崭新的域名，在大量筛选之后找到了较便宜的.ru域名（个人认为），PayPal付款，一年195卢布（折合人民币15元左右），而且续费同价，可惜的是续费只能等第二年（商家同时兜售VPS等服务，虽然已经有五六年了，但是域名稳不稳不是很确定，先来一年试试水）\n​\t现在注册的这个域名说实话，不是很满意，明年要是还是同价的话，可以换一个更好看的\n​\t留档记录一下：\n商家地址（俄罗斯）：www.smartape.ru 控制面板：SmartApe 等待接近三个小时才配置好名称服务器，托管到cloudflare 收集的未被注册的.ru域名\n点这里展开！ fuwari.ru nodeseek.ru zjhd.ru hmzj.ru gjdt.ru qinghua.ru beida.ru bupt.ru buaa.ru xjtu.ru sjtu.ru zhju.ru gzxyyz.ru sougou.ru ","date":"2025-01-18T15:20:38+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/15468209_94748100.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%B3%A8%E5%86%8C15/%E5%B9%B4%E7%9A%84.ru%E5%9F%9F%E5%90%8D/","title":"注册15￥/年的.ru域名"},{"content":"配置以及教程 n100的信息查询\n走前人的路不一定最好，但是一定比较稳\n选择的B站教程 文字教程以及交流群 一起玩 NAS!\n小陈折腾日记\n拆机 ​\t没啥难的，没有自带螺丝刀，使用买硬盘送的螺丝刀刚刚好，注意插内存的时候小心就可以了，拆内存把两边扒拉开就行\n底部外壳有个拉条，可以把底盖拉开，这个拉条在网口一侧\n​\t本来买的8G内存，但是没想到飞牛装了太多媒体应用，就占了7个多G，想了下，干脆七天无理由退了，换根32G的或者16G的\n系统选择 由于要使用all in one\n根据n100小主机的性能，想先尝试一下pve，期望的效果是软路由+轻NAS+服务器\nPVE系统下载 官网地址： https://www.proxmox.com/\n官网下载地址： https://www.proxmox.com/en/downloads\n这里有一个坑（官网下载多线程会莫名卡死，选择连接数1就可以下载完整文件，速度慢慢稳定在50%带宽速度）\n教程操作 将iso写入U盘\n装上内存和硬盘\n连接上U盘，鼠标，键盘，显示器（我用的电视），最后插上电源\n先按住键盘del键，然后点击开机键才能进入bios\n设置U盘为第一启动项之后保存（保存在最右边）\n安装和视频教程一样\n安装完成之后务必先拔U盘，才reboot（否则引导grup概率出问题）\n出问题就插U盘进入bios设置第一启动项，重新安装（我装了两次）\n一次性脚本 wget -q -O /root/pve_source.tar.gz \u0026#39;https://bbs.x86pi.cn/file/topic/2023-11-28/file/01ac88d7d2b840cb88c15cb5e19d4305b2.gz\u0026#39; \u0026amp;\u0026amp; tar zxvf /root/pve_source.tar.gz \u0026amp;\u0026amp; /root/./pve_source 很方便，只要bios设置成功，几乎不会出问题，但是安全性存疑，也不利于熟悉家里云\n第一个视频的坑 大部分没有问题，很细致，但是添加no订阅和去除弹窗的命令是冲突的，添加no订阅之后nano /etc/apt/sources.list会多出来一个no订阅的官方连接，自然就慢了，因此不需要让它变绿，只要添加镜像就行 deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian/pve bookworm pve-no-subscription 飞牛OS核显直通 使用教程失败（已经排查出是BIOS没有开启VT-d）\n另寻他法\nBIOS设置可以跳到下面核显虚拟直通BIOS设置\n我在grup引导绑定了完整的硬件信息\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet intel_iommu=on iommu=pt iommu.strict=1 vfio-pci.disable_vga=1 video=vesafb:off video=efifb:off initcall_blacklist=sysfb_init\u0026#34; 其他和教程一样\n点这里看隐藏内容！ 原本的教程：\n修改grub引导启动 nano /etc/default/grub\n\u0026ldquo;quiet intel_iommu=on video=efifb:off\u0026rdquo;\nupdate-grub\n添加模块 nano /etc/modules\n添加如下内容：\nvfio vfio_iommu_type1 vfio_pci vfio_virqfd\n增加黑名单 nano /etc/modprobe.d/pve-blacklist.conf\n添加如下内容：\nblacklist i915 blacklist snd_hda_intel options vfio_iommu_type1 allow_unsafe_interrupts=1\n更新内核 update-initramfs -k all -u\n重启：reboot\n修改fnOS虚拟机硬件配置 GPU 选 virtio GPU\n添加PCI硬件，选择显卡\n关闭并重新启动虚拟机。\n全部设置完成之后\n检查是否需要进行BIOS设置 检查iommu开启与否 dmesg | grep -e DMAR -e IOMMU 如果输出完整信息就是成功\n如果显卡（就是后面是02那个显示被skip，那么说明bios里面没有设置正确）\n正常的输出\nroot@pve:~# dmesg | grep -e DMAR -e IOMMU [ 0.018569] ACPI: DMAR 0x000000006F4F8000 000088 (v02 INTEL EDK2 00000002 01000013) [ 0.018611] ACPI: Reserving DMAR table memory at [mem 0x6f4f8000-0x6f4f8087] [ 0.034121] DMAR: IOMMU enabled [ 0.078599] DMAR: Host address width 39 [ 0.078600] DMAR: DRHD base: 0x000000fed90000 flags: 0x0 [ 0.078608] DMAR: dmar0: reg_base_addr fed90000 ver 4:0 cap 1c0000c40660462 ecap 29a00f0505e [ 0.078611] DMAR: DRHD base: 0x000000fed91000 flags: 0x1 [ 0.078615] DMAR: dmar1: reg_base_addr fed91000 ver 5:0 cap d2008c40660462 ecap f050da [ 0.078617] DMAR: RMRR base: 0x00000076000000 end: 0x000000807fffff [ 0.078621] DMAR-IR: IOAPIC id 2 under DRHD base 0xfed91000 IOMMU 1 [ 0.078622] DMAR-IR: HPET id 0 under DRHD base 0xfed91000 [ 0.078623] DMAR-IR: Queued invalidation will be enabled to support x2apic and Intr-remapping. [ 0.080371] DMAR-IR: Enabled IRQ remapping in x2apic mode [ 0.297428] pci 0000:00:02.0: DMAR: Skip IOMMU disabling for graphics [ 0.375560] DMAR: No ATSR found [ 0.375560] DMAR: No SATC found [ 0.375562] DMAR: IOMMU feature fl1gp_support inconsistent [ 0.375563] DMAR: IOMMU feature pgsel_inv inconsistent [ 0.375563] DMAR: IOMMU feature nwfs inconsistent [ 0.375564] DMAR: IOMMU feature dit inconsistent [ 0.375565] DMAR: IOMMU feature sc_support inconsistent [ 0.375566] DMAR: IOMMU feature dev_iotlb_support inconsistent [ 0.375567] DMAR: dmar0: Using Queued invalidation [ 0.375569] DMAR: dmar1: Using Queued invalidation [ 0.375965] DMAR: Intel(R) Virtualization Technology for Directed I/O root@pve:~# 直通成功\n去除弹窗 逐步执行\nsed -i_orig \u0026#34;s/data.status === \u0026#39;Active\u0026#39;/true/g\u0026#34; /usr/share/pve-manager/js/pvemanagerlib.js sed -i_orig \u0026#34;s/if (res === null || res === undefined || \\!res || res/if(/g\u0026#34; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js sed -i_orig \u0026#34;s/.data.status.toLowerCase() !== \u0026#39;active\u0026#39;/false/g\u0026#34; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js systemctl restart pveproxy PCI硬件（网口，USB等）直通 i915.max_vfs=4（需要虚拟的核显数目）\nsed -i \u0026#39;/^GRUB_CMDLINE_LINUX_DEFAULT/c\\GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;quiet intel_iommu=on iommu=pt pcie_acs_override=downstream i915.enable_guc=3 i915.max_vfs=4\u0026#34;\u0026#39; /etc/default/grub echo -e \u0026#34;vfio\\nvfio_iommu_type1\\nvfio_pci\\nvfio_virqfd\u0026#34; | tee -a /etc/modules update-grub update-initramfs -u -k all reboot 核显虚拟直通BIOS设置 教程较少\n这两个比较直接\n双网口N100主机安装PVE8.0,IKUAI,OP,黑裙,私人流媒体,WIN11显卡SRIOV OR 显卡直通HDMI输出画面-小陈折腾日记 2024.11.24已更新：最新保姆级PVE8.3安装教程！虚拟机PCIE设备及SR-IOV核显直通，最多分配7个虚拟化单独核显！最强虚拟机！ - BoZai - 博客（Blog） 看了大量教程\n大差不差，有两种方式：\n通过开启iommu，添加模块，硬件黑名单更改引导grup intel 12代以上默认支持的SR_IOV（虚拟核显） 暂时没有分割核显的打算，打算直接给飞牛OS使用\n开启VT-d Chipset-\u0026gt;SA configuration-\u0026gt;VT-d设置为enabled（可能需要先开启advanced设置）\n开启 SR_IOV Advanced-\u0026gt;OEM设置-\u0026gt;SR IOV设置为enabled\n轻NAS ​\t使用飞牛OS安装应用完全足够，手机上传文件也很方便\n软路由 ​\t目前的方案是使用iStoreOS，成功使用了旁路由，但是家里的ipv6还不会设置网关，导致有时候wifi成功科学，而有线设备有时候直连，其次是没有多余网线，用了一根五类百兆网线，日常峰值11m有点不够看，4k拖动也会卡顿\n​\t科学插件地址（使用的x86的插件）\n​\tmihomo\n备份方案 ​\t没有更多的资金投入raid阵列和机械硬盘，所以使用onedrive和谷歌相册双端备份吧\n连接wifi在学校使用 首先解决访问pve系统的问题 使用网线将笔记本和主机连接，打开控制面板，这个地址控制面板\\网络和 Internet\\网络和共享中心选择更改适配器选项\n右键以太网选择属性\n点击ipv4这个选项，将自动获取ip更改为PVE主机的ip地址192.168.10.106前三个网段和PVE主机相同，如此唯一的一个网口只能和小主机组内网了\n无线网络 查看无线网卡\nip link 我的是wlo1\n确保 wpasupplicant 已安装：\napt-get update apt-get install wpasupplicant 创建或编辑 /etc/wpa_supplicant/wpa_supplicant.conf 文件，添加 WiFi 配置：\nnano /etc/wpa_supplicant/wpa_supplicant.conf 在文件中添加以下内容：\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=CN network={ ssid=\u0026#34;WIFI名\u0026#34; psk=\u0026#34;密码\u0026#34; } network={ ssid=\u0026#34;buaamobile\u0026#34; key_mgmt=WPA-EAP eap=PEAP identity=\u0026#34;用户名\u0026#34; password=\u0026#34;密码\u0026#34; phase1=\u0026#34;peaplabel=0\u0026#34; phase2=\u0026#34;auth=MSCHAPV2\u0026#34; } 保存并关闭文件。\n启动 wpa_supplicant 服务：\nwpa_supplicant -B -i wlo1 -c /etc/wpa_supplicant/wpa_supplicant.conf 获取 IP 地址：\ndhclient wlo1 检查网络连接状态：\nip addr show wlo1 如果仍然无法连接，请检查以下内容：\n确保无线网卡驱动已正确安装。 确保无线网卡硬件开关已打开（如果有）。 查看 dmesg 或 journalctl -xe 输出，检查是否有相关错误信息。 此时默认网关仍然是以太网ip route\nroot@pve:~# ip route default via 192.168.10.1 dev vmbr0 proto kernel onlink 192.168.10.0/24 dev vmbr0 proto kernel scope link src 192.168.10.100 192.168.135.0/24 dev wlo1 proto kernel scope link src 192.168.135.102 root@pve:~# 需要删除原来的默认网关，使用新的网关\n连接网线之后，首先共享网络给pve，访问地址会改变，之后在飞牛SSH单独安装依赖，直通wifi之后单独连接\n共享笔记本和pve小主机网络 首先同样修改适配器选项，右键WLAN属性\n共享到以太网，此时ip段提示变化到192.168.137.X\n需要修改pve的访问ip 从192.168.10.100:8006改成192.168.137.100:8006\n同时进入pve的shell修改文件\nnano /etc/network/interfaces 不是自动桥接就手动改成需要的ip段（对于这个网口）\nauto vmbr0 iface vmbr0 inet static address 192.168.137.100/24 gateway 192.168.137.1 bridge-ports enp3s0 wlo1 bridge-stp off bridge-fd 0 现在pve就有网了\n点进飞牛系统控制台，由于我直通了两个网口给他\n可以看到新的访问地址192.168.137.7:5666\n将这个网口设置默认网关就可以联网使用\n飞牛作为宿主机 飞牛OS支持了虚拟机，相比PVE，我还是更喜欢国产汉化系统\n功能都已经非常完善了，缺陷是启动时间比较长，需要耐心等待\n已经设置来电自启，目前唯一的麻烦是迁移。\n设置来电自启\nwin精简包一键导入懒人包\n飞牛开启iommu\n飞牛更换ip\nEmby开心版\nwin10安装\n驱动安装\n（终端reboot之后无法自动重启）（gpu直通存在问题，开启iommu宿主机就无法使用GPU）\n串流相关： 虚拟GPU还存在问题，等待完善。\nsunshine\n阿西西修改版moonlight\ntailscale\n汉化版本pasec-vdd\nIStoreOS相关 一般作为旁路由给手机使用（电脑不适合，因为设置了很多代理）\n安装openclash手动上传内核后需要重启istoreOS\n迁移时进入VNC，命令是quickstart修改访问ip\nistoreOS地址\nPasswall运行包地址\nopenclash地址\n旁路由详细新手教程(旁路由设置教程) - 路由器\nsynthing同步 视频教程\n设置开机自启\nsyncthing官方提供了两种方案，第一种是把syncthing添加到windows系统服务（比较麻烦），第二种是通过把快捷方式添加到启动目录（有bug，–no-console参数在windows下无效）\n第一步：下载文件 \u0026amp; 解压\n从synchting官方下载windows版本的压缩包，解压到本地目录，我把它解压到D:\\Program Files\\Syncthing目录。\n第二步：创建脚本\n在syncthing的安装目录下新建一个bat文件，录入以下内容后保存。\n@echo off if \u0026#34;%1\u0026#34;==\u0026#34;h\u0026#34; goto begin start mshta vbscript:createobject(\u0026#34;wscript.shell\u0026#34;).run(\u0026#34;\u0026#34;\u0026#34;%~nx0\u0026#34;\u0026#34; h\u0026#34;,0)(window.close)\u0026amp;\u0026amp;exit :begin cd /d D:\\Program Files\\Syncthing \u0026amp;\u0026amp; syncthing.exe serve --no-browser --no-restart --logflags=0 注意bat脚本中最后一行中的文件路径D:\\Program Files\\Syncthing要根据自己的实际情况调整。\n第三步：创建快捷方式\n将上一步中创建的bat脚本创建快捷方式。\n然后在地址栏中访问%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup，或者用win+r呼出运行窗口以后输入shell:startup，打开widows启动目录。\n最后把bat脚本的快捷方式粘贴到这个启动目录即可。\n好了，到这里就完成了syncthing在windows系统下的开机自启 \u0026amp; 后台运行了，开机的时候cmd窗口会一闪而过，但syncthing的进程依然在后台运行。\n官方方案bug的修复 官方方案提到的第二种方式，创建一个快捷方式并在快捷方式中添加--no-console --no-browser参数，我实测在windows10下--no-console参数是无效的，但可以通过修改设置来实现。\n在自己创建的快捷方式上右键——属性——选项，勾选使用旧版控制台，然后重启系统即可。\n","date":"2025-01-16T12:52:56+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/66145406_62443700.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%AE%B6%E9%87%8C%E4%BA%91all-in-one%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/","title":"家里云All in One折腾日记"},{"content":"项目地址 https://github.com/1143520/txt-link 今天看到一个坛友的帖子魔改汉化的\nDemo https://txt-link.1143520.xyz/\n一些应用实例 md语法测试：Markdown Preview\nVPS表单：https://txt-link.1143520.xyz/t7gu41.md （数据来自三七大佬）\n低价域名：https://txt-link.1143520.xyz/k49r46.md （数据来自论坛）\n气泡对话：https://txt-link.1143520.xyz/qzw1jz.md\nGPT写的烟花：https://txt-link.1143520.xyz/hxzun7.html\n生成的.md网址 .gist网址\n大厂图床存活性测试 原始内容：txt-link.1143520.xyz/is4nye\n图片查看：https://txt-link.1143520.xyz/is4nye.md\nWorkers部署 路由,ui都嵌入js里面了，进入项目里面复制js，绑定一个KV命名空间，变量名是NOTE\n总结 暂时没想到这东西有啥用，可能以后写个html直接生成网页放烟花吧，gist去除只读属性可以在线编辑复制，外部引用都是代理的vercel镜像，但是cloudflare访问时不时Q一下，难受\n","date":"2025-01-15T21:40:22+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/98359404_96195000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/txt-to-link-%E5%BF%AB%E9%80%9F%E5%B0%86%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%E9%80%9A%E8%BF%87url%E5%88%86%E4%BA%AB/","title":"Txt to Link ——快速将文本内容通过url分享"},{"content":"玩机一年，也算是注册上甲骨文了，而且还是坡西的直连ipv4，爽！\n登录入口在邮箱里面，尽量直连登录，不要泄露地址！！\n设置密码登录 使用的ubuntu 20之后的版本，修改两个文件\n权限\nsudo -i 设置登录密码\npasswd 修改第一个文件/etc/ssh/sshd_config，保证两个参数\nPermitRootLogin yes PasswordAuthentication yes 修改第二个文件/etc/ssh/sshd_config.d/*-settings.conf\nPasswordAuthentication yes 添加ipv6 参考教程Oracle Cloud 甲骨文云启用原生 IPv6 地址详细教程 - 简单、通用、免费、双栈更香 - VirCloud\u0026rsquo;s Blog - Learning\u0026amp;Sharing\n保活措施 DD系统或者保活脚本\n目前没有任何需求，打算等一阵子再看看\n脚本：项目地址 （参考博客卸载）\nwget https://github.com/honorcnboy/oracle_keep_alive/raw/main/Sesr/keepoccupied.sh \u0026amp;\u0026amp; bash keepoccupied.sh 点这里展开！ 完全删除🥰\n要删除由该脚本创建的服务，您需要执行以下步骤：\n1. 检查服务名称 根据输出，脚本创建了以下两个服务：\nKeepCPUMemory.service KeepNetwork.service 2. 停止服务 首先，停止这两个服务：\nsystemctl stop KeepCPUMemory.service systemctl stop KeepNetwork.service 3. 禁用服务 从系统启动中移除这些服务：\nsystemctl disable KeepCPUMemory.service systemctl disable KeepNetwork.service 4. 删除服务文件 删除相关的 .service 文件：\nrm -f /etc/systemd/system/KeepCPUMemory.service rm -f /etc/systemd/system/KeepNetwork.service 5. 重新加载 systemd 配置 删除服务文件后，重新加载 systemd 配置：\nsystemctl daemon-reload 6. 检查服务是否已移除 您可以使用以下命令确认服务已成功移除：\nsystemctl list-units --type=service | grep Keep 如果没有任何与 KeepCPUMemory 或 KeepNetwork 相关的服务，说明已成功移除。\n7. 清理其他文件（可选） 删除下载的脚本文件：\nrm -f ~/keepoccupied.sh 执行以上步骤后，这些服务及其相关文件将完全从您的系统中移除。\n最后\nreboot 升级付费用户 思虑再三，还是决定升级，注册时使用的中国区，升级信息使用的基本上是注册账号时的信息（自动填充）\n还有一个手机号\n银行卡使用的注册账户时的工行校园卡\n国区扣除138.19 SGD （美区是100刀）（！以当时的汇率为准，最好多充一点，留点余量，后面可能有二验）\n目前等待邮箱通知\n2025.01.14 升级付费号成功\n收到邮件\n成本预算控制 查看可能产生的费用\n预算控制参考甲骨文云进阶：账号升级、首尔区开通及消费监控全攻略 - 兔哥博客\n在甲骨文云导航中依次点击:成本管理 \u0026gt; 预算 \u0026gt; 创建预算 填写预算名称、金额,并设置报警计划 可以设置多个报警规则,如在实际或预测消费达到预算的10%、20%、30%等时发出通知 硬盘调整 甲骨文云坡西不能开AMD，只有arm，4H24G150G够用了，非跨区i/o性能可以拉满到120，DD系统之后修改硬盘大小使用官方命令失效，询问GPT找到解决方案：\n第一步：查看分卷\nlsblk 显示\nroot@fd:~# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 150G 0 disk ├─sda1 8:1 0 512M 0 part /boot/efi └─sda2 8:2 0 99.5G 0 part / 第二步：安装使用 parted\nsudo parted /dev/sda 显示\nFix/Ignore? Fix 填入Fix\n显示\nPartition number? 填入分区号，即需要调整的sda2 ，这里填2\n显示只有107G\nPartition number? 2 Warning: Partition /dev/sda2 is being used. Are you sure you want to continue? Yes/No? Yes End? [107GB]? 再次填入100%\nEnd? [107GB]? 100% 退出parted（也可以Ctrl+C）\nquit 重新加载\nsudo partprobe /dev/sda 拓展文件系统\nsudo resize2fs /dev/sda2 验证\nlsblk df -h 显示2卷已经是150G了\nroot@fd:~# lsblk df -h NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 150G 0 disk ├─sda1 8:1 0 512M 0 part /boot/efi └─sda2 8:2 0 149.5G 0 part / Filesystem Size Used Avail Use% Mounted on I/O测试200M左右说明VPU性能调整也是生效的\n后续 2025-01-16 15:24 记录 扣费验证 扣除1.38新加坡元验证后返还，毫无征兆 ","date":"2025-01-13T10:59:02+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/85976828_48480500.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E7%94%B2%E9%AA%A8%E6%96%87%E4%BD%BF%E7%94%A8%E6%97%A5%E8%AE%B0/","title":"甲骨文使用日记"},{"content":"人生中的最后一个寒假，也不能这么继续碌碌无为了，以后的每一天还是要活得有意思才行啊\n上岸第一步，先斩去这一身肥膘\n2025-01-09 fighting 第一天 162.4斤 2025-01-10 fighting 第二天 163.7斤 2025-01-11 fighting 第三天 164.6斤 2025-01-12 fighting 第四天 165.7斤 2025-01-15 fighting 第五天 164.3斤 2025-01-17 fighting 第六天 165.7斤 ","date":"2025-01-09T16:43:48+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/16165139_41490400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%AF%92%E5%81%87%E5%87%8F%E8%82%A5%E8%AE%A1%E5%88%92%E5%90%AF%E5%8A%A8/","title":"寒假减肥计划启动"},{"content":"效果预览 Demo\n本来是做着玩的，写篇文章记录一下\n主要配置文件 也是静态网站\n结构 video.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;金将军！忠诚！\u0026lt;/title\u0026gt; \u0026lt;!-- 添加网站图标 favicon --\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/jpeg\u0026#34; href=\u0026#34;https://pic.wtr.cc/i/2024/11/19/673ca4cca2756.jpeg\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; type=\u0026#34;image/jpeg\u0026#34; href=\u0026#34;https://pic.wtr.cc/i/2024/11/19/673ca4cca2756.jpeg\u0026#34;\u0026gt; \u0026lt;!-- Plyr CSS --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.plyr.io/3.7.8/plyr.css\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; /* 在:root中更新主题色变量 */ :root { --primary-color: #ffffff; /* 改为白色，不再使用YouTube红色 */ --youtube-red: #cc0000; /* 更深的YouTube红色 */ --youtube-red-hover: #990000; /* 更深的悬停红色 */ --text-color: #ffffff; --border-color: #303030; --hover-color: #2c2c2c; /* 改为实色而不是半透明 */ --shadow-color: rgba(0, 0, 0, 0.3); --background-color: #0f0f0f; /* YouTube模式背景色 */ --surface-color: #212121; /* YouTube卡片背景色 */ --secondary-text: #aaaaaa; --progress-color: #ffffff; /* 进度条使用白色 */ } /* 修改body背景 */ body { margin: 0; padding: 0; min-height: 100vh; background: var(--background-color); display: flex; justify-content: center; align-items: center; box-sizing: border-box; } .main-container { width: 95vw; max-width: 1600px; height: 98vh; margin: 0 auto; display: flex; justify-content: center; align-items: center; padding: 10px; } .video-container { width: 100%; height: 100%; background: var(--background-color) !important; border: none; border-radius: 0; /* YouTube风格扁平化 */ box-shadow: none; position: relative; /* 确保定位正确 */ display: flex; flex-direction: column; padding: 15px; gap: 8px; box-sizing: border-box; overflow: hidden; } .video-container::before { content: \u0026#34;\u0026#34;; position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; background-image: linear-gradient(rgba(255, 255, 255, 0.15) 1.5px, transparent 1.5px), linear-gradient(90deg, rgba(255, 255, 255, 0.15) 1.5px, transparent 1.5px); background-size: 40px 40px; /* 添加以下属性来调整网格位置 */ background-position: center center; z-index: 0; } .video-container\u0026gt;* { position: relative; z-index: 1; } /* 修改网站图标和标题样式 */ h1 { font-family: \u0026#34;YouTube Sans\u0026#34;, \u0026#34;Roboto\u0026#34;, sans-serif; font-size: 1.4em !important; color: var(--text-color); padding: 8px 0; margin: 0; text-align: center; font-weight: 600; text-shadow: none; letter-spacing: 0.5px; flex-shrink: 0; display: flex; align-items: center; justify-content: center; } /* 修改图标大小和间距 */ .site-icon { width: 55px !important; height: 55px !important; margin-right: 25px !important; /* ��除 border-radius */ vertical-align: middle; animation: shake 2s ease-in-out infinite; } @keyframes shake { 0%, 100% { transform: rotate(0deg); } 25% { transform: rotate(-10deg); } 75% { transform: rotate(10deg); } } /* 移动备适配 */ @media screen and (max-width: 768px) { h1 { font-size: 1em !important; } .site-icon { width: 16px !important; height: 16px !important; margin-right: 8px !important; /* 不需要 border-radius */ } } /* 修改字幕样式的实现方式 */ .plyr__captions { font-size: var(--subtitle-size, 20px) !important; font-weight: var(--subtitle-weight, 500) !important; bottom: var(--subtitle-bottom, 60px) !important; } .plyr__caption { background: var(--subtitle-bg-color, rgba(0, 0, 0, 0.7)) !important; padding: 5px 10px !important; border-radius: 4px !important; text-shadow: none !important; max-width: 90% !important; margin: 0 auto !important; } /* 移除原来的字幕设置面板样式 */ .subtitle-settings { display: none; } /* 新增字幕控制面板样式 */ .subtitle-controls-panel { width: 95%; margin: 5px auto; display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; padding: 15px; background: var(--surface-color) !important; border-radius: 2px; padding: 16px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06); border: none !important; } .subtitle-control { margin: 0; padding: 8px; background: transparent !important; border: none; border-radius: 8px; } .subtitle-control label { display: block; margin-bottom: 8px; color: var(--text-color); font-weight: 500; } .control-group { display: flex; align-items: center; gap: 10px; background: var(--background-color) !important; padding: 8px; border-radius: 6px; border: none !important; } .subtitle-control input[type=\u0026#34;range\u0026#34;] { flex: 1; height: 4px; background: rgba(255, 255, 255, 0.1) !important; border-radius: 2px; appearance: none; -webkit-appearance: none; } .subtitle-control input[type=\u0026#34;range\u0026#34;]::-webkit-slider-thumb { -webkit-appearance: none; width: 16px; height: 16px; background: var(--primary-color) !important; border-radius: 50%; cursor: pointer; box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3); } .subtitle-control span { min-width: 45px; text-align: right; color: var(--secondary-text); font-size: 0.9em; } /* 滚动条美化 */ .video-list::-webkit-scrollbar { height: 6px; } .video-list::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 3px; } .video-list::-webkit-scrollbar-thumb { background: #ccc; border-radius: 3px; } .video-list::-webkit-scrollbar-thumb:hover { background: #999; } /* 确保播放器控件样式统一 */ .plyr__controls { display: flex !important; flex-wrap: nowrap !important; align-items: center !important; gap: 8px !important; padding: 15px !important; min-height: 80px !important; width: 100% !important; background: rgba(0, 0, 0, 0) !important; /* 完全透明 */ } /* 移除之可能存在的渐变和模糊效果 */ .plyr__controls { backdrop-filter: none !important; -webkit-backdrop-filter: none !important; background-image: none !important; } /* 调整控制按钮样式以确保在透明背景上可见 */ .plyr__control { background: rgba(255, 255, 255, 0.1) !important; border-radius: 10px !important; transition: all 0.15s ease-out !important; } .plyr__control:hover { background: rgba(255, 255, 255, 0.1) !important; } /* 调整进度条样式以确保在透明背景上可见 */ .plyr__progress input[type=\u0026#39;range\u0026#39;] { height: 6px !important; background: rgba(255, 255, 255, 0.3) !important; /* 增加进度条背景不透明度 */ } /* 调整音量控制样式 */ .plyr__volume input[type=\u0026#39;range\u0026#39;] { height: 6px !important; background: rgba(255, 255, 255, 0.3) !important; } /* 式布局调整 */ @media (max-width: 768px) { .subtitle-controls-panel { grid-template-columns: 1fr; } .video-container { padding: 10px; } } /* 确保播放器容器是相对定位 */ .player-wrapper { flex: 1; width: 95%; margin: 0 auto; /* 移除上边距 */ display: flex; justify-content: center; align-items: center; background: #000; border-radius: 8px; overflow: hidden; position: relative; min-height: 80vh; aspect-ratio: 16/9; } /* 确保视频填充容器 */ .plyr { width: 100% !important; height: 100% !important; max-height: calc(100vh - 200px) !important; --plyr-control-spacing: 15px !important; --plyr-control-icon-size: 32px !important; --plyr-progress-loading-size: 50px !important; } /* 移除原有的视频列表样式 */ .video-list { display: none; } /* 下拉菜单容器 */ .video-select-container { width: 95%; margin: 5px auto 0 auto; /* 移除下边距 */ position: relative; background: transparent !important; border-radius: 8px; padding: 0; min-height: auto; display: flex; align-items: center; } /* 修改下拉菜单样式，确保按钮本身的大小合适 */ .video-select { width: 100%; padding: 12px 40px 12px 15px !important; font-size: 16px; color: var(--text-color); border: 1px solid var(--text-color) !important; border-radius: 8px; cursor: pointer; height: 48px; /* 添加固定高度 */ line-height: 24px; /* 确保文字垂直居中 */ } /* 修改下拉箭头样式 */ .video-select-container::after { content: \u0026#34;\u0026#34;; position: absolute; right: 25px; top: 50%; width: 8px; height: 8px; border-right: 2px solid var(--text-color); border-bottom: 2px solid var(--text-color); transform: translateY(-50%) rotate(45deg); pointer-events: none; z-index: 2; transition: transform 0.3s ease; } /* 下拉菜单展开时箭头旋转 */ .video-select:focus::after { transform: translateY(-50%) rotate(-135deg); } /* 调整下拉菜单样式 */ .video-select { width: 100%; padding: 12px 40px 12px 15px !important; font-size: 16px; color: var(--text-color); border: 1px solid var(--text-color) !important; border-radius: 8px; cursor: pointer; /* 添加以下属性来防止抖动 */ height: 48px; /* 固定高度 */ line-height: 24px; /* 确保文字垂直居中 */ appearance: none !important; -webkit-appearance: none !important; -moz-appearance: none !important; background-color: #000000 !important; background: #000000 !important; transition: border-color 0.2s ease !important; /* 只添边框颜色过渡效果 */ /* 保��头图标 */ background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23ffffff\u0026#39; d=\u0026#39;M7 10l5 5 5-5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; background-repeat: no-repeat !important; background-position: right 10px center !important; background-size: 20px !important; background-blend-mode: normal !important; } /* 下拉菜单基础样式 */ select.video-select { width: 100%; padding: 12px 15px; font-size: 16px; color: var(--text-color); background-color: var(--surface-color); border: 1px solid var(--border-color); border-radius: 8px; cursor: pointer; display: block; position: relative; /* 完全禁用默认样式和箭头 */ appearance: none !important; -moz-appearance: none !important; -webkit-appearance: none !important; /* 移除所有背景相关属性 */ background-image: none !important; background: var(--surface-color) !important; } /* 禁用IE的默认箭头 */ select.video-select::-ms-expand { display: none !important; } /* 选项样式 */ select.video-select option { padding: 12px; height: 48px; /* 固定选项高度 */ line-height: 24px; /* 确保文字垂直居中 */ background-color: var(--background-color); color: var(--text-color); } /* 悬停状态 */ select.video-select:hover { background-color: var(--hover-color) !important; border-color: var(--primary-color); } /* 禁用所有可能的背景图 */ select.video-select, select.video-select:hover, select.video-select:focus, select.video-select:active { background-image: none !important; } /* 悬停状态 */ .video-select:hover { background: var(--hover-color) !important; border-color: var(--primary-color); } /* 选项样式 */ .video-select option { background: var(--background-color); color: var(--text-color); padding: 12px; } /* 修改下拉菜单容器样式 */ .video-select-container { width: 95%; margin: 5px auto; position: relative; background: transparent !important; border-radius: 8px; padding: 10px; } /* 改放器容器式保齐 */ .player-wrapper { width: 95%; /* 确保与视频列表宽度一致 */ margin: 2px auto; /* 将上边距从 5px 改为 2px */ /* 居中对齐 */ flex: 1; display: flex; justify-content: center; align-items: center; background: #000; border-radius: 8px; overflow: hidden; position: relative; } /* 修改幕控面板保持一致 */ .subtitle-controls-panel { width: 95%; /* 与其他元素保持一致 */ margin: 5px auto; /* 居中对齐 */ display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; padding: 15px; background: transparent !important; border-radius: 8px; border: none !important; box-shadow: none !important; } /* 美化主容器 */ .main-container { width: 95vw; max-width: 1600px; height: 98vh; margin: 0 auto; } /* 美化视频容器 */ .video-container { background: rgba(255, 255, 255, 0.95); border-radius: 20px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.2); } /* 美化标题 */ h1 { color: var(--text-color); font-size: 1.8em; font-weight: 600; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); letter-spacing: 0.5px; } /* 美化下拉菜单 */ .video-select { background: var(--surface-color) !important; color: var(--text-color) !important; border: 1px solid var(--border-color) !important; border-radius: 12px; padding: 14px 20px; font-size: 16px; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); } .video-select:hover { background: #e0e0e0 !important; border-color: #2196F3; outline: none; } /* 美化播放器容器 */ .player-wrapper { border-radius: 16px; overflow: hidden; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12); } /* 美化播放器控制栏 */ .plyr__controls { background: linear-gradient(to top, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.5)) !important; padding: 20px !important; backdrop-filter: blur(8px); } .plyr__control { background: rgba(255, 255, 255, 0.1) !important; border-radius: 10px !important; transition: all 0.15s ease-out !important; } .plyr__control:hover { background: rgba(255, 255, 255, 0.1) !important; } /* 美化进度条 */ .plyr__progress input[type=\u0026#39;range\u0026#39;] { height: 6px !important; background: rgba(255, 255, 255, 0.2) !important; } .plyr__progress__buffer { background: rgba(255, 255, 255, 0.3) !important; } .plyr--full-ui input[type=\u0026#39;range\u0026#39;] { color: var(--text-color) !important; } /* 美化音量控制 */ .plyr__volume input[type=\u0026#39;range\u0026#39;] { height: 6px !important; } /* 美化字幕控制面板 */ .subtitle-controls-panel { background: var(--surface-color); border-radius: 16px; padding: 20px; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06); border: 1px solid var(--border-color); } .subtitle-control { background: white; padding: 15px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04); } .subtitle-control label { color: var(--text-color); font-weight: 600; font-size: 0.95em; margin-bottom: 12px; } .control-group { background: var(--background-color); padding: 12px; border-radius: 10px; border: 1px solid var(--border-color); } /* 美化滑块 */ input[type=\u0026#34;range\u0026#34;] { height: 6px !important; background: #e0e0e0; border-radius: 3px; } input[type=\u0026#34;range\u0026#34;]::-webkit-slider-thumb { width: 18px !important; height: 18px !important; background: var(--primary-color) !important; border: 2px solid white; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2); transition: all 0.2s ease; } input[type=\u0026#34;range\u0026#34;]::-webkit-slider-thumb:hover { transform: scale(1.1); } /* 添加平滑过渡果 */ .plyr__control, .video-select, .subtitle-control, input[type=\u0026#34;range\u0026#34;] { transition: all 0.2s ease-in-out; } /* 美具提示 */ .plyr__tooltip { background: rgba(0, 0, 0, 0.9) !important; border-radius: 8px !important; font-size: 14px !important; padding: 8px 12px !important; backdrop-filter: blur(4px); } /* 添加响应式悬停效果 */ .plyr__control:hover, .video-select:hover, .subtitle-control:hover { transform: translateY(-2px); } /* 美化字幕样式 */ .plyr__captions { font-family: -apple-system, BlinkMacSystemFont, \u0026#34;Segoe UI\u0026#34;, Roboto, sans-serif; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4) !important; } .plyr__caption { background: rgba(0, 0, 0, 0.8) !important; backdrop-filter: blur(4px); border-radius: 8px !important; padding: 8px 16px !important; } /* 添加网站图标 */ .site-icon { width: 32px; height: 32px; margin-right: 10px; border-radius: 50%; vertical-align: middle; } /* 修改容器样式 */ .main-container { width: 95vw; max-width: 1600px; height: 98vh; margin: 0 auto; display: flex; justify-content: center; align-items: center; } /* 修改视频容样式 */ .video-container { width: 100%; height: 100%; background-color: #e0e0e0 !important; /* 更深的背景色 */ background-image: linear-gradient(#8f939b 1.5px, transparent 1.5px), linear-gradient(90deg, #8f939b 1.5px, transparent 1.5px) !important; background-size: 40px 40px; border-radius: 12px; border: 1px solid #8f939b; /* 边框颜色与网格线一致 */ display: flex; flex-direction: column; padding: 15px; gap: 8px; box-sizing: border-box; overflow: hidden; box-shadow: none; backdrop-filter: none !important; } /* 调整标题样式 */ h1 { margin: 5px 0; flex-shrink: 0; } /* 调整下拉菜单容器样式 */ .video-select-container { margin: 5px auto; flex-shrink: 0; } /* 调播放器容器样式 */ .player-wrapper { flex: 1; min-height: 0; margin: 0 auto; /* 移除上边距 */ } /* 调整字幕控面板样 */ .subtitle-controls-panel { width: 95%; margin: 5px auto; padding: 10px; flex-shrink: 0; display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; } /* 调整幕控制项样式 */ .subtitle-control { margin: 0; padding: 8px; } .control-group { padding: 8px; } /* 确保所有内容都在容器内 */ .video-container\u0026gt;* { max-height: 100%; } /* 移除大播放按钮的动画效果 */ .plyr__control--overlaid { transition: none !important; /* 移除所有过渡效果 */ transform: none !important; /* 移除变形效果 */ animation: none !important; /* 移除所有动画 */ } .plyr__control--overlaid:hover { transform: none !important; /* 移除悬停时的变形效果 */ background: rgba(255, 255, 255, 0.8) !important; /* 简单的背景色变化 */ } /* 调整大播放按钮的位置和样式 */ .plyr__control--overlaid { position: absolute !important; top: 50% !important; left: 50% !important; transform: translate(-50%, -50%) !important; /* 使用 transform 来居中 */ background: rgba(255, 255, 255, 0.7) !important; border: 0 !important; border-radius: 50% !important; padding: 25px !important; margin: 0 !important; z-index: 2 !important; opacity: 0; /* 默认隐藏 */ pointer-events: none; /* 禁用鼠标事件 */ visibility: hidden; /* 完全隐藏 */ } /* 视频暂停时显示按钮 */ .plyr--paused .plyr__control--overlaid { opacity: 1; pointer-events: auto; visibility: visible; } /* 移除所有动画效果 */ .plyr__control--overlaid, .plyr--paused .plyr__control--overlaid, .plyr__control--overlaid:hover { transition: opacity 0.1s linear !important; /* 只保留透明度的过渡 */ transform: translate(-50%, -50%) !important; /* 保持固定位置 */ animation: none !important; } /* 简化悬停效果 */ .plyr__control--overlaid:hover { background: rgba(255, 255, 255, 0.8) !important; } /* 确保按钮图标居中且大小固定 */ .plyr__control--overlaid svg { width: 30px !important; height: 30px !important; margin: 0 !important; padding: 0 !important; display: block !important; } /* 调整播放器容器样式确保按钮定位正确 */ .player-wrapper { position: relative !important; } .plyr { position: relative !important; } /* 调整进度条和音量控制滑块样式 */ .plyr__progress input[type=\u0026#39;range\u0026#39;], .plyr__volume input[type=\u0026#39;range\u0026#39;] { height: 6px !important; /* 减小滑块高度 */ background: rgba(255, 255, 255, 0.2) !important; position: relative !important; } /* 调整滑块圆点样式 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-webkit-slider-thumb, .plyr__volume input[type=\u0026#39;range\u0026#39;]::-webkit-slider-thumb { -webkit-appearance: none !important; width: 16px !important; height: 16px !important; background: #fff !important; border-radius: 50% !important; cursor: pointer !important; position: relative !important; top: 50% !important; transform: translateY(-50%) !important; /* 垂直居中 */ margin-top: 0 !important; /* 移除默认边 */ box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2) !important; } /* Firefox 滑块样式 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-moz-range-thumb, .plyr__volume input[type=\u0026#39;range\u0026#39;]::-moz-range-thumb { width: 16px !important; height: 16px !important; background: #fff !important; border-radius: 50% !important; cursor: pointer !important; border: none !important; position: relative !important; transform: translateY(0) !important; /* Firefox 不需要 Y 轴偏移 */ margin-top: 0 !important; } /* 滑块轨道样式 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-webkit-slider-runnable-track, .plyr__volume input[type=\u0026#39;range\u0026#39;]::-webkit-slider-runnable-track { height: 6px !important; background: rgba(255, 255, 255, 0.2) !important; border-radius: 3px !important; } /* Firefox 轨道样 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-moz-range-track, .plyr__volume input[type=\u0026#39;range\u0026#39;]::-moz-range-track { height: 6px !important; background: rgba(255, 255, 255, 0.2) !important; border-radius: 3px !important; } /* 调整音量控区域样式 */ .plyr__volume { max-width: 150px !important; /* 加最大宽度 */ min-width: 120px !important; /* 增加最小宽度 */ margin: 0 10px !important; } /* 调整量滑块样式 */ .plyr__volume input[type=\u0026#39;range\u0026#39;] { width: 100% !important; min-width: 100px !important; /* 增加块最小宽度 */ height: 6px !important; margin: 0 !important; background: rgba(255, 255, 255, 0.3) !important; } /* 确保音量控制在控栏中的位置正确 */ .plyr__controls { gap: 12px !important; /* 增加控件之间的间距 */ } /* 调整音量图标和滑块的间距 */ .plyr__volume button { margin-right: 8px !important; } /* 调整设置按钮大小和样式 */ .plyr__menu__container { font-size: 16px !important; /* 减小字体大小 */ padding: 8px !important; /* 减小内边距 */ } .plyr__menu__container .plyr__control { padding: 8px 12px !important; /* 小内边距 */ font-size: 14px !important; /* 减小字体大小 */ } /* 调整设置按钮图标大小 */ .plyr__controls button[data-plyr=\u0026#34;settings\u0026#34;] svg { width: 18px !important; /* 小图标大小 */ height: 18px !important; } /* 确保所有控制按钮图标大小一致 */ .plyr__controls .plyr__control svg { width: 18px !important; height: 18px !important; } /* 调整菜单项的样式 */ .plyr__menu__container .plyr__menu__value { font-size: 14px !important; padding: 6px !important; } /* 调设置菜单容器样式 */ .plyr__menu__container { font-size: 14px !important; padding: 8px !important; min-width: 240px !important; /* 增加菜单宽度 */ text-align: center !important; } /* 调菜布局 */ .plyr__menu__container .plyr__control { display: flex !important; align-items: center !important; justify-content: center !important; padding: 10px 16px !important; /* 增加内距 */ width: 100% !important; box-sizing: border-box !important; position: relative !important; } /* 调整菜单项文本布局 */ .plyr__menu__container .plyr__control span { display: flex !important; align-items: center !important; justify-content: center !important; width: 100% !important; text-align: center !important; } /* 移除子菜单指示角 */ .plyr__menu__container [role=\u0026#34;menuitem\u0026#34;][aria-haspopup=\u0026#34;true\u0026#34;]\u0026gt;span:after { display: none !important; } /* 调整子菜单容器 */ .plyr__menu__container .plyr__menu__submenu { min-width: 200px !important; /* 增加子菜单宽度 */ padding: 8px !important; background: rgba(28, 28, 28, 0.9) !important; } /* 调整子菜单项样式 */ .plyr__menu__container .plyr__menu__submenu .plyr__control { padding: 10px 16px !important; /* 保持一致的内边距 */ } /* 调整菜单值的样式 */ .plyr__menu__container .plyr__menu__value { margin-left: 12px !important; /* 增加左边距 */ opacity: 0.8 !important; } /* 添加移动设备响应式样 */ @media screen and (max-width: 768px) { /* 调整主容器 */ .main-container { width: 100vw; height: 100vh; padding: 0; } /* 调整视容器 */ .video-container { border-radius: 0; /* 移除圆角 */ padding: 10px 5px; } /* 调整标题 */ h1 { font-size: 1.2em; margin: 5px 0; } .site-icon { width: 24px; height: 24px; margin-right: 5px; } /* 调整下拉菜单 */ .video-select { padding: 8px 12px; font-size: 14px; } /* 调整播放器容器 */ .player-wrapper { width: 100%; min-height: 50vh; } /* 调整字控制面板 */ .subtitle-controls-panel { grid-template-columns: 1fr; /* 改为单列布局 */ gap: 8px; padding: 8px; width: 100%; } .subtitle-control { padding: 8px; } .subtitle-control label { font-size: 0.9em; } /* 调整播放器控制栏 */ .plyr__controls { padding: 8px !important; min-height: 40px !important; } /* 调整控制按钮大小 */ .plyr__control { padding: 8px !important; } /* 调整时间显示 */ .plyr__time { font-size: 12px !important; min-width: 45px !important; } /* 调整音量控制 */ .plyr__volume { max-width: 80px !important; min-width: 60px !important; } /* 调整进度条 */ .plyr__progress input[type=\u0026#39;range\u0026#39;] { height: 4px !important; } /* 调整字幕大小 */ .plyr__captions { font-size: 16px !important; } /* 优触摸操 */ .plyr__control, .video-select, input[type=\u0026#34;range\u0026#34;] { touch-action: manipulation; } /* ��整设置菜单 */ .plyr__menu__container { font-size: 12px !important; } .plyr__menu__container .plyr__control { padding: 6px 20px 6px 10px !important; } /* 确保控制栏在小屏幕上不会太拥挤 */ .plyr__controls { gap: 4px !important; } /* 优化全屏模式 */ .plyr--fullscreen-enabled [data-plyr=\u0026#34;fullscreen\u0026#34;] { order: 10; } /* 调整工具提示 */ .plyr__tooltip { font-size: 12px !important; padding: 4px 8px !important; } /* 优化横屏模式 */ @media screen and (orientation: landscape) { .player-wrapper { min-height: 80vh; } .subtitle-controls-panel { grid-template-columns: repeat(3, 1fr); /* 横屏时恢复三列布局 */ } } } /* 调整控制栏布局，确全屏按钮始终显示 */ .plyr__controls { display: flex !important; flex-wrap: nowrap !important; align-items: center !important; gap: 8px !important; padding: 15px !important; min-height: 80px !important; width: 100% !important; } /* 设置全屏按钮样式 */ .plyr__controls [data-plyr=\u0026#34;fullscreen\u0026#34;] { flex: 0 0 auto !important; /* 防止压缩 */ display: flex !important; /* 始终显示 */ order: 999 !important; /* 确保在最右侧 */ margin-left: auto !important; /* 推到最右边 */ padding: 8px !important; min-width: 36px !important; /* 保最宽度 */ } /* 移设备配时也保持全屏按钮显示 */ @media screen and (max-width: 768px) { .plyr__controls [data-plyr=\u0026#34;fullscreen\u0026#34;] { display: flex !important; min-width: 32px !important; } /* 在空间足时，可以隐藏其他次要控件，但全屏按钮 */ .plyr__controls [data-plyr=\u0026#34;settings\u0026#34;], .plyr__controls [data-plyr=\u0026#34;pip\u0026#34;] { display: none !important; } } /* 超窄屏适配 */ @media screen and (max-width: 480px) { .plyr__controls [data-plyr=\u0026#34;fullscreen\u0026#34;] { min-width: 28px !important; padding: 6px !important; } /* 在极屏幕可以隐藏更多控件，仍保持全屏按钮 */ .plyr__time--duration { display: none !important; } } /* 修改控制组和相关元素背色 */ .control-group { background: var(--background-color) !important; border: 1px solid var(--border-color) !important; color: var(--text-color) !important; } .subtitle-control label { color: var(--text-color) !important; } .subtitle-control span { color: var(--secondary-text) !important; } /* 修改下拉菜单样式 */ .video-select { width: 100%; padding: 12px 40px 12px 15px !important; font-size: 16px; color: var(--text-color); border: 1px solid var(--text-color) !important; border-radius: 8px; cursor: pointer; /* 移除所有默认样式 */ appearance: none !important; -webkit-appearance: none !important; -moz-appearance: none !important; /* 强制使用纯黑背景 */ background-color: #000000 !important; background: #000000 !important; /* 保持箭头图标 */ background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23ffffff\u0026#39; d=\u0026#39;M7 10l5 5 5-5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; background-repeat: no-repeat !important; background-position: right 10px center !important; background-size: 20px !important; background-blend-mode: normal !important; } /* 悬停和焦点状态也保持白色边框 */ .video-select:hover, .video-select:focus { border: 1px solid var(--text-color) !important; background-color: #000000 !important; background: #000000 !important; } /* 删除之前的重复定义 */ .video-select, .video-select:hover, .video-select:focus, .video-select:active { background-color: #000000 !important; background: #000000 !important; } /* 删除可能影响背景的其他样式 */ .video-select-container::after { display: none !important; } /* 修改播放器背景 */ .player-wrapper { background: var(--background-color) !important; } /* 确保所有文本色正确 */ .plyr__menu__container, .plyr__menu__container .plyr__control, .plyr__menu__container .plyr__menu__value { color: var(--text-color) !important; } /* 添加加载遮罩样式 */ .loading-overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: var(--background-color); display: flex; justify-content: center; align-items: center; z-index: 1000; opacity: 1; transition: opacity 0.3s ease; } .loading-overlay.hidden { opacity: 0; pointer-events: none; } .loading-spinner { width: 50px; height: 50px; border: 5px solid var(--border-color); border-top: 5px solid var(--primary-color); border-radius: 50%; animation: spin 1s linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } /* 修改视频容器样式 - 移除前的白色背景 */ .video-container { background: var(--surface-color) !important; border: 1px solid var(--border-color); box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3); } /* 修字幕控制面板中的白背景 */ .subtitle-control { background: var(--surface-color) !important; border: 1px solid var(--border-color); } /* 修改下拉菜单的hover状态 */ .video-select:hover { background-color: #000000 !important; border-color: var(--primary-color); } /* 修改播放器菜单容器样式 */ .plyr__menu__container { background: var(--surface-color) !important; color: var(--text-color) !important; } .plyr__menu__container .plyr__control { background: var(--surface-color) !important; color: var(--text-color) !important; } .plyr__menu__container .plyr__control:hover { background: #000000 !important; } /* 修改播放器设置菜单样式 */ .plyr__menu__container .plyr__menu__submenu { background: var(--surface-color) !important; border: 1px solid var(--border-color); } /* 修改时间显示文字颜色 */ .plyr__time { color: var(--text-color) !important; } /* 修改进度条缓冲区颜色 */ .plyr--full-ui input[type=range]::-webkit-slider-runnable-track { background: var(--surface-color) !important; } .plyr--full-ui input[type=range]::-webkit-slider-thumb { background: var(--primary-color) !important; } /* 修改音量控制滑块 */ .plyr__volume input[type=range]::-webkit-slider-runnable-track { background: var(--surface-color) !important; } .plyr__volume input[type=range]::-webkit-slider-thumb { background: var(--primary-color) !important; } /* 修改具提示样式 */ .plyr__tooltip { background: var(--surface-color) !important; color: var(--text-color) !important; border: 1px solid var(--border-color); } /* 修改字幕样式 */ .plyr__captions .plyr__caption { color: var(--text-color) !important; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important; } /* 修改下拉菜单箭头色 */ .video-select { background-image: url(\u0026#34;data:image/svg+xml;charset=UTF-8,%3csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39; fill=\u0026#39;none\u0026#39; stroke=\u0026#39;%23ecf0f1\u0026#39; stroke-width=\u0026#39;2\u0026#39; stroke-linecap=\u0026#39;round\u0026#39; stroke-linejoin=\u0026#39;round\u0026#39;%3e%3cpolyline points=\u0026#39;6 9 12 15 18 9\u0026#39;%3e%3c/polyline%3e%3c/svg%3e\u0026#34;) !important; } /* 修改滑块样式统一 */ input[type=\u0026#34;range\u0026#34;] { background: var(--surface-color) !important; } input[type=\u0026#34;range\u0026#34;]::-webkit-slider-thumb { background: var(--primary-color) !important; border: 2px solid var(--text-color) !important; } /* 修改播放器控件颜色 */ .plyr__control svg { fill: var(--text-color) !important; } /* 修改播放器大按钮样式 */ .plyr__control--overlaid { position: absolute !important; top: 50% !important; left: 50% !important; transform: translate(-50%, -50%) !important; background: rgba(33, 33, 33, 0.8) !important; border-radius: 50% !important; padding: 20px !important; margin: 0 !important; transition: background-color 0.2s ease !important; width: 64px !important; height: 64px !important; display: flex !important; align-items: center !important; justify-content: center !important; } .plyr__control--overlaid:hover { background: rgba(255, 255, 255, 0.9) !important; } /* 修改播放按钮图标大小 */ .plyr__control--overlaid svg { width: 32px !important; height: 32px !important; transition: fill 0.2s ease !important; margin: 0 !important; padding: 0 !important; } /* 悬停时改变图标颜色 */ .plyr__control--overlaid:hover svg { fill: var(--background-color) !important; } /* 确保所有SVG图标颜色正确 */ svg { fill: var(--text-color) !important; } /* 修改加载动画颜色 */ .loading-spinner { border-color: var(--surface-color); border-top-color: var(--primary-color); } /* 修改下拉菜单样式 */ .video-select { width: 100%; padding: 12px 40px 12px 15px !important; font-size: 16px; color: var(--text-color); border: 1px solid var(--text-color) !important; border-radius: 8px; cursor: pointer; /* 移除所有默认式 */ appearance: none !important; -webkit-appearance: none !important; -moz-appearance: none !important; /* 强制使用纯黑背景 */ background-color: #000000 !important; background: #000000 !important; /* 保持箭头图标 */ background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23ffffff\u0026#39; d=\u0026#39;M7 10l5 5 5-5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; background-repeat: no-repeat !important; background-position: right 10px center !important; background-size: 20px !important; background-blend-mode: normal !important; transition: all 0.3s ease !important; } /* 展开时的样式 */ .video-select:focus { border-color: var(--primary-color); background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23ecf0f1\u0026#39; d=\u0026#39;M7 14l5-5 5 5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; } /* 移除所有可能冲突的样式 */ .video-select-container::after { display: none !important; } .video-select { background: var(--surface-color) !important; } /* 确保背景图片显示 */ .video-select { background-color: #000000 !important; background-blend-mode: normal !important; } /* 修改所有播放制按钮的悬停效果 */ .plyr__control:hover { background: var(--youtube-red) !important; color: var(--text-color) !important; } /* 修改进度条和音量滑块的颜色 */ .plyr--full-ui input[type=range] { color: var(--youtube-red) !important; /* 使用YouTube红色 */ } /* 修改进度条已播放部的颜色 */ .plyr--full-ui input[type=range]::-webkit-slider-runnable-track { background: var(--surface-color) !important; } .plyr--full-ui input[type=range]::-webkit-slider-thumb { background: var(--text-color) !important; } /* 保进度条已播放部分为红色 */ .plyr__progress input[type=\u0026#39;range\u0026#39;] { color: var(--youtube-red) !important; background: linear-gradient(to right, var(--youtube-red) var(--value, 0%), rgba(255, 255, 255, 0.25) var(--value, 0%)) !important; } /* Firefox特定样式 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-moz-range-progress { background: var(--youtube-red) !important; } /* 修改音量控制为色 */ .plyr__volume input[type=\u0026#39;range\u0026#39;] { color: var(--youtube-red) !important; } /* 修改缓冲条颜色 */ .plyr__progress__buffer { background-color: rgba(255, 255, 255, 0.25) !important; } /* 确保进度条背景色正确 */ .plyr--full-ui input[type=range]::-webkit-slider-runnable-track { background-color: rgba(255, 255, 255, 0.25) !important; } /* 修改进度条悬停效果 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]:hover { color: var(--youtube-red-hover) !important; } /* 修改音量控制条样式 */ .plyr__volume input[type=\u0026#39;range\u0026#39;] { color: var(--youtube-red) !important; } /* 修改音量控制条已调节部分的颜色 */ .plyr__volume input[type=\u0026#39;range\u0026#39;]::-webkit-slider-runnable-track { background: linear-gradient(to right, var(--youtube-red) var(--value, 0%), rgba(255, 255, 255, 0.25) var(--value, 0%)) !important; } /* Firefox特定样 */ .plyr__volume input[type=\u0026#39;range\u0026#39;]::-moz-range-progress { background: var(--youtube-red) !important; } .plyr__volume input[type=\u0026#39;range\u0026#39;]::-moz-range-track { background: rgba(255, 255, 255, 0.25) !important; } /* 确保音量控制滑块为白色 */ .plyr__volume input[type=\u0026#39;range\u0026#39;]::-webkit-slider-thumb { background: var(--text-color) !important; border: none !important; } .plyr__volume input[type=\u0026#39;range\u0026#39;]::-moz-range-thumb { background: var(--text-color) !important; border: none !important; } /* 修改音量控制条背景色 */ .plyr__volume input[type=\u0026#39;range\u0026#39;] { background: rgba(255, 255, 255, 0.25) !important; } /* 修改字幕控制面板滑块样式 */ .subtitle-control input[type=\u0026#34;range\u0026#34;] { -webkit-appearance: none !important; -moz-appearance: none !important; appearance: none !important; /* 添加标准属性以确保兼容性 */ width: 100% !important; height: 6px !important; background: rgba(255, 255, 255, 0.25) !important; border-radius: 3px !important; outline: none !important; } /* 修改滑块已调节部分的颜色 */ .subtitle-control input[type=\u0026#34;range\u0026#34;]::-webkit-slider-runnable-track { width: 100% !important; height: 6px !important; background: linear-gradient(to right, var(--youtube-red) var(--value, 0%), rgba(255, 255, 255, 0.25) var(--value, 0%)) !important; border-radius: 3px !important; } /* 修改滑块圆点样 */ .subtitle-control input[type=\u0026#34;range\u0026#34;]::-webkit-slider-thumb { -webkit-appearance: none !important; width: 16px !important; height: 16px !important; background: var(--text-color) !important; border-radius: 50% !important; cursor: pointer !important; margin-top: -5px !important; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2) !important; } /* Firefox特定样式 */ .subtitle-control input[type=\u0026#34;range\u0026#34;]::-moz-range-track { width: 100% !important; height: 6px !important; background: rgba(255, 255, 255, 0.25) !important; border-radius: 3px !important; } .subtitle-control input[type=\u0026#34;range\u0026#34;]::-moz-range-progress { background: var(--youtube-red) !important; height: 6px !important; border-radius: 3px !important; } .subtitle-control input[type=\u0026#34;range\u0026#34;]::-moz-range-thumb { width: 16px !important; height: 16px !important; background: var(--text-color) !important; border: none !important; border-radius: 50% !important; cursor: pointer !important; } /* 进度条悬停效果 */ .plyr__progress { --plyr-progress-loading-background: rgba(255, 255, 255, 0.25) !important; --plyr-progress-loading-size: 25px !important; transition: height 0.2s ease !important; } /* 进度条容器悬停效果 */ .plyr__progress__container:hover .plyr__progress { height: 10px !important; /* 悬停时增加高度 */ } /* 进度条滑块悬停效果 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]:hover::-webkit-slider-thumb { background: var(--youtube-red) !important; transform: scale(1.2) !important; box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3) !important; } .plyr__progress input[type=\u0026#39;range\u0026#39;]:hover::-moz-range-thumb { background: var(--youtube-red) !important; transform: scale(1.2) !important; box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3) !important; } /* 进度条预览效果 */ .plyr__progress__buffer { background: rgba(255, 255, 255, 0.25) !important; transition: all 0.2s ease !important; } /* 进度条览悬停效果 */ .plyr__progress:hover .plyr__progress__buffer { background: rgba(255, 255, 255, 0.35) !important; } /* 进度条已播放部分的悬停效果 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]:hover { background: linear-gradient(to right, var(--youtube-red-hover) var(--value, 0%), rgba(255, 255, 255, 0.35) var(--value, 0%)) !important; } /* 时间提示工具提示样式 */ .plyr__tooltip { background: rgba(28, 28, 28, 0.9) !important; color: var(--text-color) !important; font-size: 14px !important; padding: 6px 10px !important; border-radius: 4px !important; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important; transition: opacity 0.2s ease, transform 0.2s ease !important; } /* 时间提示工具提示悬停效果 */ .plyr__progress:hover .plyr__tooltip { transform: translate(-50%, -10px) !important; opacity: 1 !important; } /* 确保进度条块始终可见 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-webkit-slider-thumb { opacity: 0; transition: opacity 0.2s ease, transform 0.2s ease, background-color 0.2s ease !important; } .plyr__progress:hover input[type=\u0026#39;range\u0026#39;]::-webkit-slider-thumb { opacity: 1; } /* Firefox 版本 */ .plyr__progress input[type=\u0026#39;range\u0026#39;]::-moz-range-thumb { opacity: 0; transition: opacity 0.2s ease, transform 0.2s ease, background-color 0.2s ease !important; } .plyr__progress:hover input[type=\u0026#39;range\u0026#39;]::-moz-range-thumb { opacity: 1; } /* 进度条加载动画 */ .plyr__progress__buffer { background-size: var(--plyr-progress-loading-size) var(--plyr-progress-loading-size) !important; animation: plyr-progress 1s linear infinite !important; } @keyframes plyr-progress { to { background-position: var(--plyr-progress-loading-size) 0; } } /* 在:root中添加浅色主题变量 */ :root[data-theme=\u0026#34;light\u0026#34;] { --primary-color: #000000; --youtube-red: #cc0000; --youtube-red-hover: #990000; --text-color: #000000; --border-color: #e0e0e0; --hover-color: #f5f5f5; --shadow-color: rgba(0, 0, 0, 0.1); --background-color: #ffffff; --surface-color: #f8f8f8; --secondary-text: #666666; --progress-color: #000000; } /* 主题切换按钮样式 */ .theme-toggle { position: fixed; top: 20px; right: 70px; /* 调整右边距,让按钮往左移 */ width: 40px; height: 40px; border-radius: 50%; background: var(--surface-color); border: 2px solid var(--border-color); cursor: pointer; display: flex; align-items: center; justify-content: center; z-index: 1000; transition: all 0.3s ease; } .theme-toggle:hover { transform: scale(1.1); background: var(--hover-color); } .theme-toggle svg { width: 24px; height: 24px; fill: var(--text-color) !important; transition: all 0.3s ease; } /* 移动设备适配 */ @media screen and (max-width: 768px) { .theme-toggle { top: 10px; right: 50px; /* 调整移动端右边距 */ width: 32px; height: 32px; } .theme-toggle svg { width: 18px; height: 18px; } } /* 完善浅色主题变量 */ :root[data-theme=\u0026#34;light\u0026#34;] { --primary-color: #000000; --youtube-red: #cc0000; --youtube-red-hover: #990000; --text-color: #000000; --border-color: #e0e0e0; --hover-color: #f5f5f5; --shadow-color: rgba(0, 0, 0, 0.1); --background-color: #ffffff; --surface-color: #f8f8f8; --secondary-text: #666666; --progress-color: #000000; } /* 确保播放器在浅色主题下的样式 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-container { background-color: #ffffff !important; background-image: linear-gradient(#e0e0e0 1.5px, transparent 1.5px), linear-gradient(90deg, #e0e0e0 1.5px, transparent 1.5px) !important; border-color: #e0e0e0; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr { --plyr-color-main: var(--youtube-red); --plyr-video-background: #ffffff; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__controls { background: rgba(255, 255, 255, 0.9) !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__control { color: #000000; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__control svg { fill: #000000 !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__menu__container { background: #ffffff; color: #000000; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__time { color: #000000; } :root[data-theme=\u0026#34;light\u0026#34;] .video-select { background-color: #ffffff !important; color: #000000; border-color: #e0e0e0 !important; background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23000000\u0026#39; d=\u0026#39;M7 10l5 5 5-5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; } :root[data-theme=\u0026#34;light\u0026#34;] .subtitle-control { background: #ffffff; } :root[data-theme=\u0026#34;light\u0026#34;] .subtitle-control label { color: #000000; } :root[data-theme=\u0026#34;light\u0026#34;] .control-group { background: #f8f8f8; border-color: #e0e0e0; } :root[data-theme=\u0026#34;light\u0026#34;] input[type=\u0026#34;range\u0026#34;] { background: rgba(0, 0, 0, 0.1) !important; } :root[data-theme=\u0026#34;light\u0026#34;] input[type=\u0026#34;range\u0026#34;]::-webkit-slider-thumb { background: var(--youtube-red) !important; } /* 修改下拉菜单样式 - 更新浅色主题下的样式 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-select { background-color: #ffffff !important; color: #000000; border-color: #e0e0e0 !important; /* 移除所有默认样式 */ appearance: none !important; -webkit-appearance: none !important; -moz-appearance: none !important; /* 强制使用纯白背景 */ background: #ffffff !important; /* 自定义箭头图标 - 使用黑色箭头 */ background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23000000\u0026#39; d=\u0026#39;M7 10l5 5 5-5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; background-repeat: no-repeat !important; background-position: right 10px center !important; background-size: 20px !important; background-blend-mode: normal !important; } /* 展开时的样式 - 浅色主题 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-select:focus { border-color: var(--youtube-red); background-image: url(\u0026#34;data:image/svg+xml,%3Csvg xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39; width=\u0026#39;24\u0026#39; height=\u0026#39;24\u0026#39; viewBox=\u0026#39;0 0 24 24\u0026#39;%3E%3Cpath fill=\u0026#39;%23000000\u0026#39; d=\u0026#39;M7 14l5-5 5 5z\u0026#39;/%3E%3C/svg%3E\u0026#34;) !important; } /* 确保移除默认箭头 - 针对不同浏览器 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-select::-ms-expand { display: none !important; } /* 悬停状态 - 浅色主题 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-select:hover { background-color: #f5f5f5 !important; border-color: var(--youtube-red) !important; } /* 选项样式 - 浅色主题 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-select option { background: #ffffff; color: #000000; padding: 12px; } /* 在 :root[data-theme=\u0026#34;light\u0026#34;] 下添加以下样式 */ :root[data-theme=\u0026#34;light\u0026#34;] { /* 保持有的浅主题变量... */ /* 修改字幕样式 */ --plyr-captions-background: rgba(255, 255, 255, 0.9) !important; --plyr-captions-text-color: #000000 !important; } /* 浅色主题下的字幕样式 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__captions { color: #000000 !important; text-shadow: none !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__caption { background: rgba(255, 255, 255, 0.9) !important; color: #000000 !important; border: 1px solid rgba(0, 0, 0, 0.1) !important; } /* 浅色主题下的提示文字样式 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__tooltip { background: rgba(255, 255, 255, 0.95) !important; color: #000000 !important; border: 1px solid rgba(0, 0, 0, 0.1) !important; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important; } /* 色主题下的菜单样式 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__menu__container { background: #ffffff !important; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__menu__container .plyr__control { color: #000000 !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__menu__container .plyr__control--forward::after, :root[data-theme=\u0026#34;light\u0026#34;] .plyr__menu__container .plyr__control--back::before { border-left-color: #000000 !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__menu__container .plyr__control[role=menuitemradio]::before { background: #000000 !important; } /* 浅色主题下的控制按钮提示 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__control:hover .plyr__tooltip { background: #ffffff !important; color: #000000 !important; } /* 浅色主题下的进度条预览提示 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__progress .plyr__tooltip { background: #ffffff !important; color: #000000 !important; } /* 浅色主题下的音量控制提示 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__volume .plyr__tooltip { background: #ffffff !important; color: #000000 !important; } /* 浅色主题下的时间显示 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__time { color: #000000 !important; } /* 浅色主题下的加载动画 */ :root[data-theme=\u0026#34;light\u0026#34;] .loading-spinner { border-color: rgba(0, 0, 0, 0.1) !important; border-top-color: var(--youtube-red) !important; } /* 浅色主题下的控制面板背景 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__controls { background: linear-gradient(to top, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.8)) !important; backdrop-filter: blur(10px) !important; } /* 浅色主题下的大播放按钮 */ :root[data-theme=\u0026#34;light\u0026#34;] .plyr__control--overlaid { background: rgba(255, 255, 255, 0.8) !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__control--overlaid:hover { background: var(--youtube-red) !important; } :root[data-theme=\u0026#34;light\u0026#34;] .plyr__control--overlaid:hover svg { fill: #ffffff !important; } /* 修改浅色主题下的网格样式 */ :root[data-theme=\u0026#34;light\u0026#34;] .video-container { background-color: #ffffff !important; border: 1px solid #e0e0e0 !important; } :root[data-theme=\u0026#34;light\u0026#34;] .video-container::before { content: \u0026#34;\u0026#34;; position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; background-image: linear-gradient(rgba(0, 0, 0, 0.1) 1.5px, transparent 1.5px), linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1.5px, transparent 1.5px) !important; background-size: 40px 40px; /* 添加以下属性来调整网格位置 */ background-position: center center; z-index: 0; } /* 确保深色主题下的网格样式不受影响 */ .video-container::before { content: \u0026#34;\u0026#34;; position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; background-image: linear-gradient(rgba(255, 255, 255, 0.15) 1.5px, transparent 1.5px), linear-gradient(90deg, rgba(255, 255, 255, 0.15) 1.5px, transparent 1.5px); background-size: 40px 40px; /* 添加以下属性来调整网格位置 */ background-position: center center; z-index: 0; } /* 添加新按钮样式 */ .custom-controls { display: flex; align-items: center; gap: 8px; margin-left: 8px; } .custom-control { display: flex; align-items: center; justify-content: center; width: 32px; height: 32px; border-radius: 4px; background: transparent; border: none; cursor: pointer; color: var(--text-color); transition: all 0.2s ease; } .custom-control:hover { background: var(--youtube-red); } .custom-control svg { width: 20px; height: 20px; fill: var(--text-color) !important; } .custom-control.active { background: var(--youtube-red); } /* 浅色主题适配 */ :root[data-theme=\u0026#34;light\u0026#34;] .custom-control svg { fill: #000000 !important; } :root[data-theme=\u0026#34;light\u0026#34;] .custom-control:hover svg, :root[data-theme=\u0026#34;light\u0026#34;] .custom-control.active svg { fill: #ffffff !important; } /* 工具提示样式 */ .custom-control { position: relative; } .custom-control::after { content: attr(data-tooltip); position: absolute; bottom: 100%; left: 50%; transform: translateX(-50%) translateY(-8px); background: rgba(28, 28, 28, 0.9); color: var(--text-color); padding: 4px 8px; border-radius: 4px; font-size: 12px; white-space: nowrap; opacity: 0; visibility: hidden; transition: all 0.2s ease; } .custom-control:hover::after { opacity: 1; visibility: visible; transform: translateX(-50%) translateY(-4px); } :root[data-theme=\u0026#34;light\u0026#34;] .custom-control::after { background: rgba(255, 255, 255, 0.9); color: #000000; border: 1px solid rgba(0, 0, 0, 0.1); } /* 自动续播按钮基础样式 */ #autoplayButton { position: relative; overflow: hidden; } #autoplayButton svg { transform: scale(0.85); transition: all 0.3s ease; } /* 图标各部分样式 */ #autoplayButton .icon-main { fill: var(--text-color); } #autoplayButton .icon-repeat { fill: var(--text-color); opacity: 0.7; transform-origin: center; transition: all 0.3s ease; } /* 激活状态样式 */ #autoplayButton.active { background: var(--youtube-red) !important; } #autoplayButton.active .icon-main, #autoplayButton.active .icon-repeat { fill: #ffffff !important; opacity: 1; } /* 悬停效果 */ #autoplayButton:hover { background: var(--youtube-red-hover) !important; } #autoplayButton:hover .icon-main, #autoplayButton:hover .icon-repeat { fill: #ffffff !important; opacity: 1; } /* 动画效果 */ @keyframes rotate-repeat { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } #autoplayButton.active .icon-repeat { animation: rotate-repeat 4s linear infinite; } /* 浅色主题适配 */ :root[data-theme=\u0026#34;light\u0026#34;] #autoplayButton .icon-main, :root[data-theme=\u0026#34;light\u0026#34;] #autoplayButton .icon-repeat { fill: #000000; } :root[data-theme=\u0026#34;light\u0026#34;] #autoplayButton.active .icon-main, :root[data-theme=\u0026#34;light\u0026#34;] #autoplayButton.active .icon-repeat, :root[data-theme=\u0026#34;light\u0026#34;] #autoplayButton:hover .icon-main, :root[data-theme=\u0026#34;light\u0026#34;] #autoplayButton:hover .icon-repeat { fill: #ffffff !important; } /* 找到 .custom-control 的样式定义，修改为: */ .custom-control { display: flex; align-items: center; justify-content: center; width: 40px; /* 增加宽度 */ height: 40px; /* 增加高度 */ border-radius: 6px; /* 稍微增加圆角 */ background: transparent; border: none; cursor: pointer; color: var(--text-color); transition: all 0.2s ease; margin: 0 2px; /* 添加左右间距 */ } /* 修改图标大小 */ .custom-control svg { width: 24px; /* 增加图标大小 */ height: 24px; /* 增加图标大小 */ fill: var(--text-color) !important; } /* 修改自动续播按钮的图标大小 */ #autoplayButton svg { transform: scale(1); /* 移除缩小效果 */ transition: all 0.3s ease; } /* 调整工具提示的位置 */ .custom-control::after { bottom: 120%; /* 稍微提高提示位置 */ font-size: 14px; /* 增加提示文字大小 */ padding: 6px 12px; /* 增加提框内边距 */ } /* 调整按钮组的位置和间距 */ .custom-controls { display: flex; align-items: center; gap: 12px; /* 增加按钮之间的间距 */ margin-left: 12px; /* 增加左侧间距 */ padding: 0 4px; /* 添加两侧内边距 */ } /* 移动设备适配 */ @media screen and (max-width: 768px) { .custom-control { width: 36px; /* ��动端稍微小一点 */ height: 36px; } .custom-control svg { width: 22px; height: 22px; } .custom-controls { gap: 8px; margin-left: 8px; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button class=\u0026#34;theme-toggle\u0026#34; id=\u0026#34;themeToggle\u0026#34; aria-label=\u0026#34;切换主题\u0026#34;\u0026gt; \u0026lt;svg class=\u0026#34;sun-icon\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;main-container\u0026#34;\u0026gt; \u0026lt;!-- 左侧视频区域 --\u0026gt; \u0026lt;div class=\u0026#34;video-container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; \u0026lt;img src=\u0026#34;logo.png\u0026#34; alt=\u0026#34;网站图标\u0026#34; class=\u0026#34;site-icon\u0026#34;\u0026gt; 金将军！忠诚！ \u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;video-select-container\u0026#34;\u0026gt; \u0026lt;select class=\u0026#34;video-select\u0026#34; id=\u0026#34;videoSelect\u0026#34;\u0026gt; \u0026lt;!-- 选项会通过 JavaScript 动态添加 --\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;player-wrapper\u0026#34;\u0026gt; \u0026lt;!-- 添加载遮罩 --\u0026gt; \u0026lt;div class=\u0026#34;loading-overlay\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;loading-spinner\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;video id=\u0026#34;player\u0026#34; playsinline controls\u0026gt; \u0026lt;source src=\u0026#34;\u0026#34; type=\u0026#34;video/mp4\u0026#34; /\u0026gt; \u0026lt;track kind=\u0026#34;captions\u0026#34; label=\u0026#34;文\u0026#34; src=\u0026#34;\u0026#34; srclang=\u0026#34;zh\u0026#34; default /\u0026gt; \u0026lt;/video\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 新增字幕控面板 --\u0026gt; \u0026lt;div class=\u0026#34;subtitle-controls-panel\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;subtitle-control\u0026#34;\u0026gt; \u0026lt;label\u0026gt;字幕大小\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;control-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;fontSize\u0026#34; min=\u0026#34;16\u0026#34; max=\u0026#34;80\u0026#34; value=\u0026#34;32\u0026#34; step=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;fontSizeValue\u0026#34;\u0026gt;32px\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;subtitle-control\u0026#34;\u0026gt; \u0026lt;label\u0026gt;背景透明度\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;control-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;bgOpacity\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;100\u0026#34; value=\u0026#34;70\u0026#34; step=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;bgOpacityValue\u0026#34;\u0026gt;70%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;subtitle-control\u0026#34;\u0026gt; \u0026lt;label\u0026gt;字幕位置\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;control-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;range\u0026#34; id=\u0026#34;subtitlePosition\u0026#34; min=\u0026#34;20\u0026#34; max=\u0026#34;200\u0026#34; value=\u0026#34;60\u0026#34; step=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;positionValue\u0026#34;\u0026gt;60px\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Plyr JS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.plyr.io/3.7.8/plyr.polyfilled.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { let player; let currentVideoName = \u0026#39;\u0026#39;; // 定义播放控制函数 function playPrevVideo() { const videoSelect = document.getElementById(\u0026#39;videoSelect\u0026#39;); const currentIndex = videoSelect.selectedIndex; const prevIndex = currentIndex === 0 ? videoSelect.options.length - 1 : currentIndex - 1; videoSelect.selectedIndex = prevIndex; loadVideo(videoSelect.value); } function playNextVideo() { const videoSelect = document.getElementById(\u0026#39;videoSelect\u0026#39;); const currentIndex = videoSelect.selectedIndex; const nextIndex = (currentIndex + 1) % videoSelect.options.length; videoSelect.selectedIndex = nextIndex; loadVideo(videoSelect.value); } // 获取视频列表 console.log(\u0026#39;开始获取视频列表...\u0026#39;); fetch(\u0026#39;/api/videos\u0026#39;) .then(response =\u0026gt; response.json()) .then(videos =\u0026gt; { console.log(\u0026#39;获取到的视频列表:\u0026#39;, videos); const videoSelect = document.getElementById(\u0026#39;videoSelect\u0026#39;); if (videos \u0026amp;\u0026amp; videos.length \u0026gt; 0) { // 对视频列表进行排序，确保APT.mp4在第位 videos.sort((a, b) =\u0026gt; { if (a.name === \u0026#39;APT.mp4\u0026#39;) return -1; if (b.name === \u0026#39;APT.mp4\u0026#39;) return 1; return a.name.localeCompare(b.name); }); videos.forEach((video, index) =\u0026gt; { const option = document.createElement(\u0026#39;option\u0026#39;); option.value = video.name; option.textContent = video.name.replace(/\\.mp4$/, \u0026#34;\u0026#34;); videoSelect.appendChild(option); }); // 始化第一个视频 initializeFirstVideo(videos[0].name); } }) .catch(error =\u0026gt; { console.error(\u0026#39;获取视频列表失败:\u0026#39;, error); // 移除报错提示，因为视频仍可以 console.log(\u0026#39;继续初化默认视频\u0026#39;); initializeFirstVideo(\u0026#39;APT.mp4\u0026#39;); // 使用默认视频 }); // 修改视频选择事件处理 document.getElementById(\u0026#39;videoSelect\u0026#39;).addEventListener(\u0026#39;change\u0026#39;, function (e) { // 防止事件冒泡和默认行为 e.preventDefault(); e.stopPropagation(); const selectedVideo = e.target.value; if (selectedVideo \u0026amp;\u0026amp; selectedVideo !== currentVideoName) { loadVideo(selectedVideo); } }); // 初始化第一个视频的函数 function initializeFirstVideo(videoName) { const videoElement = document.getElementById(\u0026#39;player\u0026#39;); const source = videoElement.querySelector(\u0026#39;source\u0026#39;); const track = videoElement.querySelector(\u0026#39;track\u0026#39;); const loadingOverlay = document.querySelector(\u0026#39;.loading-overlay\u0026#39;); // 使用 decodeURIComponent 和 encodeURI 来正确处理中文文件名 const videoPath = `/video/${decodeURIComponent(encodeURI(videoName))}`; source.src = videoPath; // 检查字幕文件是否存在 const subtitleFileName = videoName.replace(/\\.mp4$/, \u0026#34;\u0026#34;); const subtitlePath = `/video/${decodeURIComponent(encodeURI(subtitleFileName))}.mp4.vtt`; // 先检查视频是否存在 fetch(videoPath, { method: \u0026#39;HEAD\u0026#39; }) .then(response =\u0026gt; { if (response.ok) { // 视频存在，继续处理 fetch(subtitlePath) .then(response =\u0026gt; { if (response.ok) { track.src = subtitlePath; } else { track.remove(); } }) .catch(error =\u0026gt; { console.log(\u0026#39;Error checking subtitle file:\u0026#39;, error); track.remove(); }) .finally(() =\u0026gt; { // 根据设备类型初始化不同的播放器 if (isMobileDevice()) { // 移动设备使用原生播放器 initializeMobilePlayer(videoElement); // 添加加载完成事件监听 videoElement.addEventListener(\u0026#39;loadeddata\u0026#39;, function onLoadedData() { loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); videoElement.play().catch(error =\u0026gt; { console.log(\u0026#39;Auto-play prevented:\u0026#39;, error); }); videoElement.removeEventListener(\u0026#39;loadeddata\u0026#39;, onLoadedData); }); // 强制加载视频 videoElement.load(); } else { // PC端使用Plyr播放器 initializePlyrPlayer(videoElement); } }); } else { throw new Error(\u0026#39;Video not found\u0026#39;); } }) .catch(error =\u0026gt; { console.error(\u0026#39;Error loading video:\u0026#39;, error); loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); alert(\u0026#39;视频加载失败，请稍后重试\u0026#39;); }); currentVideoName = videoName; } // 移动设备播放器初始化 function initializeMobilePlayer(videoElement) { // 移除现有的Plyr相关类和属性 videoElement.className = \u0026#39;mobile-player\u0026#39;; // 移除可能存在的Plyr实例 if (player) { player.destroy(); player = null; } // 设置移动端所需的属性 videoElement.setAttribute(\u0026#39;playsinline\u0026#39;, \u0026#39;\u0026#39;); videoElement.setAttribute(\u0026#39;webkit-playsinline\u0026#39;, \u0026#39;\u0026#39;); videoElement.setAttribute(\u0026#39;x5-playsinline\u0026#39;, \u0026#39;\u0026#39;); videoElement.setAttribute(\u0026#39;x5-video-player-type\u0026#39;, \u0026#39;h5\u0026#39;); videoElement.setAttribute(\u0026#39;x5-video-player-fullscreen\u0026#39;, \u0026#39;true\u0026#39;); videoElement.setAttribute(\u0026#39;x5-video-orientation\u0026#39;, \u0026#39;landscape\u0026#39;); videoElement.setAttribute(\u0026#39;controls\u0026#39;, \u0026#39;\u0026#39;); // 启用原生控件 // 添加移动端播放器样式 const style = document.createElement(\u0026#39;style\u0026#39;); style.textContent = ` .mobile-player { width: 100%; height: 100%; background: #000; object-fit: contain; } .mobile-player:fullscreen { width: 100vw; height: 100vh; } .mobile-player::cue { font-size: 20px; background-color: rgba(0, 0, 0, 0.7); color: white; } `; document.head.appendChild(style); // 监听加载完成事件 videoElement.addEventListener(\u0026#39;loadeddata\u0026#39;, () =\u0026gt; { loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); }); // 错误处理 videoElement.addEventListener(\u0026#39;error\u0026#39;, () =\u0026gt; { console.error(\u0026#39;Video error:\u0026#39;, videoElement.error); loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); alert(\u0026#39;视频加载失败，请稍后重试\u0026#39;); }); // 添加全屏事件监听 videoElement.addEventListener(\u0026#39;fullscreenchange\u0026#39;, handleFullscreen); videoElement.addEventListener(\u0026#39;webkitfullscreenchange\u0026#39;, handleFullscreen); videoElement.addEventListener(\u0026#39;mozfullscreenchange\u0026#39;, handleFullscreen); videoElement.addEventListener(\u0026#39;MSFullscreenChange\u0026#39;, handleFullscreen); let isVideoFullscreen = false; function handleFullscreen() { const isFullscreen = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement; if (isFullscreen \u0026amp;\u0026amp; isFullscreen === videoElement) { isVideoFullscreen = true; lockScreenOrientation(\u0026#39;landscape\u0026#39;); } else if (isVideoFullscreen) { isVideoFullscreen = false; if (screen.orientation \u0026amp;\u0026amp; screen.orientation.unlock) { screen.orientation.unlock(); } } } // 添加页面可见性变化监听 document.addEventListener(\u0026#39;visibilitychange\u0026#39;, function () { if (!document.hidden \u0026amp;\u0026amp; !isVideoFullscreen) { if (screen.orientation \u0026amp;\u0026amp; screen.orientation.unlock) { screen.orientation.unlock(); } } }); // 添加屏幕方向变化监听 window.addEventListener(\u0026#39;orientationchange\u0026#39;, function () { if (!isVideoFullscreen) { if (screen.orientation \u0026amp;\u0026amp; screen.orientation.unlock) { screen.orientation.unlock(); } } }); } // PC端Plyr播放器初始化 function initializePlyrPlayer(videoElement) { // 确保移除移动端相关的类和控件 const mobileControls = document.querySelector(\u0026#39;.mobile-controls\u0026#39;); if (mobileControls) { mobileControls.remove(); } videoElement.className = \u0026#39;\u0026#39;; // 初始化Plyr播放器 player = new Plyr(\u0026#39;#player\u0026#39;, { captions: { active: true, language: \u0026#39;zh\u0026#39;, update: true }, controls: [ \u0026#39;play-large\u0026#39;, \u0026#39;play\u0026#39;, \u0026#39;progress\u0026#39;, \u0026#39;current-time\u0026#39;, \u0026#39;duration\u0026#39;, \u0026#39;mute\u0026#39;, \u0026#39;volume\u0026#39;, \u0026#39;captions\u0026#39;, \u0026#39;settings\u0026#39;, \u0026#39;pip\u0026#39;, \u0026#39;fullscreen\u0026#39; ], settings: [\u0026#39;captions\u0026#39;, \u0026#39;quality\u0026#39;, \u0026#39;speed\u0026#39;], tooltips: { controls: true }, ratio: \u0026#39;16:9\u0026#39;, fullscreen: { enabled: true, fallback: true, iosNative: true } }); // 添加自定义控件 player.on(\u0026#39;ready\u0026#39;, () =\u0026gt; { const controlsContainer = document.querySelector(\u0026#39;.plyr__controls\u0026#39;); const volumeControl = controlsContainer.querySelector(\u0026#39;.plyr__volume\u0026#39;); // 添加自定义控件 const customControls = ` \u0026lt;div class=\u0026#34;custom-controls\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;custom-control\u0026#34; id=\u0026#34;autoplayButton\u0026#34; data-tooltip=\u0026#34;自动续播\u0026#34;\u0026gt; \u0026lt;svg viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path class=\u0026#34;icon-main\u0026#34; d=\u0026#34;M7 7v10l7-5-7-5z\u0026#34;/\u0026gt; \u0026lt;path class=\u0026#34;icon-repeat\u0026#34; d=\u0026#34;M17 17H7v-2H5v2c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2v-2h-2v2zM17 5H7v2H5V5c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2v2h-2V5z\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;custom-control\u0026#34; id=\u0026#34;prevVideoButton\u0026#34; data-tooltip=\u0026#34;上一个视频\u0026#34;\u0026gt; \u0026lt;svg viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M6 6h2v12H6zm3.5 6l8.5 6V6z\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;custom-control\u0026#34; id=\u0026#34;nextVideoButton\u0026#34; data-tooltip=\u0026#34;下一个视频\u0026#34;\u0026gt; \u0026lt;svg viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; `; volumeControl.insertAdjacentHTML(\u0026#39;afterend\u0026#39;, customControls); // 绑定自定义控件事件 document.getElementById(\u0026#39;autoplayButton\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const isEnabled = document.getElementById(\u0026#39;autoplayButton\u0026#39;).classList.toggle(\u0026#39;active\u0026#39;); localStorage.setItem(\u0026#39;autoplay\u0026#39;, isEnabled); }); document.getElementById(\u0026#39;prevVideoButton\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, playPrevVideo); document.getElementById(\u0026#39;nextVideoButton\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, playNextVideo); // 获取自动续播状态 const autoplayEnabled = localStorage.getItem(\u0026#39;autoplay\u0026#39;) === \u0026#39;true\u0026#39;; if (autoplayEnabled) { document.getElementById(\u0026#39;autoplayButton\u0026#39;).classList.add(\u0026#39;active\u0026#39;); } }); // 视频结束时的处理 player.on(\u0026#39;ended\u0026#39;, () =\u0026gt; { const autoplayEnabled = localStorage.getItem(\u0026#39;autoplay\u0026#39;) === \u0026#39;true\u0026#39;; if (autoplayEnabled) { playNextVideo(); } }); // 隐藏加载遮罩 document.querySelector(\u0026#39;.loading-overlay\u0026#39;).classList.add(\u0026#39;hidden\u0026#39;); } // 修改加载视频函数 function loadVideo(videoName) { if (!videoName || currentVideoName === videoName) return; const videoSelect = document.getElementById(\u0026#39;videoSelect\u0026#39;); videoSelect.disabled = true; const loadingOverlay = document.querySelector(\u0026#39;.loading-overlay\u0026#39;); loadingOverlay.classList.remove(\u0026#39;hidden\u0026#39;); const videoElement = document.getElementById(\u0026#39;player\u0026#39;); if (isMobileDevice()) { // 移动设备加载视频 const videoPath = `/video/${decodeURIComponent(encodeURI(videoName))}`; // 先检查视频是否存在 fetch(videoPath, { method: \u0026#39;HEAD\u0026#39; }) .then(response =\u0026gt; { if (response.ok) { // 视频存在，开始加载 videoElement.src = videoPath; // 检查字幕文件 const subtitleFileName = videoName.replace(/\\.mp4$/, \u0026#34;\u0026#34;); const subtitlePath = `/video/${decodeURIComponent(encodeURI(subtitleFileName))}.mp4.vtt`; const track = videoElement.querySelector(\u0026#39;track\u0026#39;); if (track) { fetch(subtitlePath) .then(response =\u0026gt; { if (response.ok) { track.src = subtitlePath; } else { track.remove(); } }) .catch(() =\u0026gt; track.remove()); } // 监听视频加载完成事件 const onLoadedData = function () { loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); videoSelect.disabled = false; videoElement.play().catch(error =\u0026gt; { console.log(\u0026#39;Auto-play prevented:\u0026#39;, error); }); }; videoElement.addEventListener(\u0026#39;loadeddata\u0026#39;, onLoadedData, { once: true }); // 添加错误处理 const onError = function () { console.error(\u0026#39;Video loading error:\u0026#39;, videoElement.error); loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); videoSelect.disabled = false; alert(\u0026#39;视频加载失败，请稍后重试\u0026#39;); }; videoElement.addEventListener(\u0026#39;error\u0026#39;, onError, { once: true }); videoElement.load(); // 开始加载视频 } else { throw new Error(\u0026#39;Video not found\u0026#39;); } }) .catch(error =\u0026gt; { console.error(\u0026#39;Error loading video:\u0026#39;, error); loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); videoSelect.disabled = false; alert(\u0026#39;视频加载失败，请稍后重试\u0026#39;); }); } else { // PC端代码保持不变 if (player) { const newSource = { type: \u0026#39;video\u0026#39;, sources: [{ src: `/video/${decodeURIComponent(encodeURI(videoName))}`, type: \u0026#39;video/mp4\u0026#39; }] }; // 检查字幕文件是否存在 const subtitleFileName = videoName.replace(/\\.mp4$/, \u0026#34;\u0026#34;); const subtitlePath = `/video/${decodeURIComponent(encodeURI(subtitleFileName))}.mp4.vtt`; fetch(subtitlePath) .then(response =\u0026gt; { if (response.ok) { newSource.tracks = [{ kind: \u0026#39;captions\u0026#39;, label: \u0026#39;中文\u0026#39;, srclang: \u0026#39;zh\u0026#39;, src: subtitlePath, default: true }]; } }) .catch(error =\u0026gt; { console.log(\u0026#39;Error checking subtitle file:\u0026#39;, error); }) .finally(() =\u0026gt; { player.source = newSource; player.once(\u0026#39;loadeddata\u0026#39;, () =\u0026gt; { loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); videoSelect.disabled = false; player.play().catch(error =\u0026gt; { console.log(\u0026#39;Auto-play prevented:\u0026#39;, error); }); }); }); } } currentVideoName = videoName; } // 字幕设置关代码 const fontSize = document.getElementById(\u0026#39;fontSize\u0026#39;); const fontSizeValue = document.getElementById(\u0026#39;fontSizeValue\u0026#39;); fontSize.addEventListener(\u0026#39;input\u0026#39;, function () { const size = this.value; fontSizeValue.textContent = `${size}px`; document.documentElement.style.setProperty(\u0026#39;--subtitle-size\u0026#39;, `${size}px`); const weight = size \u0026gt; 40 ? 400 : 500; document.documentElement.style.setProperty(\u0026#39;--subtitle-weight\u0026#39;, weight); }); const bgOpacity = document.getElementById(\u0026#39;bgOpacity\u0026#39;); const bgOpacityValue = document.getElementById(\u0026#39;bgOpacityValue\u0026#39;); bgOpacity.addEventListener(\u0026#39;input\u0026#39;, function () { const opacity = this.value / 100; bgOpacityValue.textContent = `${this.value}%`; document.documentElement.style.setProperty( \u0026#39;--subtitle-bg-color\u0026#39;, `rgba(0, 0, 0, ${opacity})` ); }); const subtitlePosition = document.getElementById(\u0026#39;subtitlePosition\u0026#39;); const positionValue = document.getElementById(\u0026#39;positionValue\u0026#39;); subtitlePosition.addEventListener(\u0026#39;input\u0026#39;, function () { const position = this.value; positionValue.textContent = `${position}px`; document.documentElement.style.setProperty(\u0026#39;--subtitle-bottom\u0026#39;, `${position}px`); }); // 键盘快捷键 document.addEventListener(\u0026#39;keydown\u0026#39;, function (event) { if (!player) return; if (event.code === \u0026#39;Space\u0026#39;) { player.togglePlay(); event.preventDefault(); } else if (event.code === \u0026#39;ArrowUp\u0026#39;) { player.increaseVolume(0.1); event.preventDefault(); } else if (event.code === \u0026#39;ArrowDown\u0026#39;) { player.decreaseVolume(0.1); event.preventDefault(); } }); // 初始化字幕样式 document.documentElement.style.setProperty(\u0026#39;--subtitle-size\u0026#39;, \u0026#39;32px\u0026#39;); document.documentElement.style.setProperty(\u0026#39;--subtitle-bg-color\u0026#39;, \u0026#39;rgba(0, 0, 0, 0.7)\u0026#39;); document.documentElement.style.setProperty(\u0026#39;--subtitle-bottom\u0026#39;, \u0026#39;60px\u0026#39;); // 修改字幕设置面板样式 const style = document.createElement(\u0026#39;style\u0026#39;); style.textContent = ` .plyr__subtitle-settings { position: absolute; bottom: 60px; right: 10px; background: rgba(0, 0, 0, 0.9); padding: 15px; border-radius: 4px; z-index: 1000; color: white; min-width: 200px; } .subtitle-control { margin-bottom: 10px; } .subtitle-control label { display: block; margin-bottom: 5px; } .subtitle-control input[type=\u0026#34;range\u0026#34;] { width: 100%; } .subtitle-control span { float: right; font-size: 12px; } /* 增大字幕样式 */ .plyr__captions { font-size: var(--subtitle-size, 32px) !important; font-weight: var(--subtitle-weight, 500) !important; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important; } .plyr__caption { background: var(--subtitle-bg-color, rgba(0, 0, 0, 0.7)) !important; padding: 8px 12px !important; border-radius: 4px !important; max-width: 90% !important; margin: 0 auto !important; line-height: 1.4 !important; } `; document.head.appendChild(style); }); // 将之前在 CSS 中的 JavaScript 代码移到这里 function updateRangeBackground(rangeElement) { const value = (rangeElement.value - rangeElement.min) / (rangeElement.max - rangeElement.min) * 100; rangeElement.style.setProperty(\u0026#39;--value\u0026#39;, `${value}%`); } // 为所有滑块添加事件监听 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { document.querySelectorAll(\u0026#39;.subtitle-control input[type=\u0026#34;range\u0026#34;]\u0026#39;).forEach(range =\u0026gt; { // 初始化滑块颜色 updateRangeBackground(range); // 监听滑块变化 range.addEventListener(\u0026#39;input\u0026#39;, function () { updateRangeBackground(this); }); }); }); // 在 DOMContentLoaded 事件监听器中添加以下代码 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { // 主题切换能 const themeToggle = document.getElementById(\u0026#39;themeToggle\u0026#39;); const root = document.documentElement; const moonIcon = `\u0026lt;svg class=\u0026#34;moon-icon\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-3.03 0-5.5-2.47-5.5-5.5 0-1.82.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;`; const sunIcon = `\u0026lt;svg class=\u0026#34;sun-icon\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt;`; // 检查本地存储中的主题设置 const savedTheme = localStorage.getItem(\u0026#39;theme\u0026#39;) || \u0026#39;dark\u0026#39;; root.setAttribute(\u0026#39;data-theme\u0026#39;, savedTheme); themeToggle.innerHTML = savedTheme === \u0026#39;dark\u0026#39; ? sunIcon : moonIcon; // 题切换事件处理 themeToggle.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const currentTheme = root.getAttribute(\u0026#39;data-theme\u0026#39;); const newTheme = currentTheme === \u0026#39;dark\u0026#39; ? \u0026#39;light\u0026#39; : \u0026#39;dark\u0026#39;; root.setAttribute(\u0026#39;data-theme\u0026#39;, newTheme); themeToggle.innerHTML = newTheme === \u0026#39;dark\u0026#39; ? sunIcon : moonIcon; // 保存主题设置到本地存储 localStorage.setItem(\u0026#39;theme\u0026#39;, newTheme); }); }); // 处理屏幕方向变化 function handleOrientationChange() { if (isMobileDevice()) { const isLandscape = isLandscapeMode(); if (isLandscape \u0026amp;\u0026amp; !player.fullscreen.active) { player.fullscreen.enter(); } else if (!isLandscape \u0026amp;\u0026amp; player.fullscreen.active) { player.fullscreen.exit(); } } } // 检查是否是移动设备 function isMobileDevice() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent); } // 检查是否是横屏模式 function isLandscapeMode() { // 优先使用屏幕向API if (window.screen \u0026amp;\u0026amp; window.screen.orientation) { return window.screen.orientation.type.includes(\u0026#39;landscape\u0026#39;); } // 回退到window.orientation else if (window.orientation !== undefined) { return Math.abs(window.orientation) === 90; } // 最后使用视窗尺寸比例 return window.innerWidth \u0026gt; window.innerHeight; } // 在组件卸载时清理事件监听 window.addEventListener(\u0026#39;unload\u0026#39;, () =\u0026gt; { if (\u0026#39;orientation\u0026#39; in window) { window.removeEventListener(\u0026#39;orientationchange\u0026#39;, handleOrientationChange); } else if (\u0026#39;screen\u0026#39; in window \u0026amp;\u0026amp; \u0026#39;orientation\u0026#39; in window.screen) { screen.orientation.removeEventListener(\u0026#39;change\u0026#39;, handleOrientationChange); } }); // 添加全屏变化监听，处理用户手动退出全屏的情况 document.addEventListener(\u0026#39;fullscreenchange\u0026#39;, handleFullscreenChange); document.addEventListener(\u0026#39;webkitfullscreenchange\u0026#39;, handleFullscreenChange); document.addEventListener(\u0026#39;mozfullscreenchange\u0026#39;, handleFullscreenChange); document.addEventListener(\u0026#39;MSFullscreenChange\u0026#39;, handleFullscreenChange); function handleFullscreenChange() { if (isMobileDevice() \u0026amp;\u0026amp; isLandscapeMode()) { const videoContainer = document.querySelector(\u0026#39;.video-container\u0026#39;); if (!document.fullscreenElement \u0026amp;\u0026amp; videoContainer) { lockScreenOrientation(\u0026#39;landscape\u0026#39;); videoContainer.requestFullscreen().catch(error =\u0026gt; { console.log(\u0026#39;Fullscreen re-entry failed:\u0026#39;, error); }); } } } // 添加屏幕方向锁定支持 function lockScreenOrientation(orientation) { try { if (screen.orientation \u0026amp;\u0026amp; screen.orientation.lock) { screen.orientation.lock(orientation).catch(error =\u0026gt; { console.log(\u0026#39;Screen orientation lock failed:\u0026#39;, error); // 锁定失败时尝试解锁 screen.orientation.unlock(); }); } else if (screen.lockOrientation) { screen.lockOrientation(orientation); } else if (screen.webkitLockOrientation) { screen.webkitLockOrientation(orientation); } else if (screen.mozLockOrientation) { screen.mozLockOrientation(orientation); } else if (screen.msLockOrientation) { screen.msLockOrientation(orientation); } } catch (error) { console.log(\u0026#39;Screen orientation lock error:\u0026#39;, error); // 发生错误时尝试解锁 if (screen.orientation \u0026amp;\u0026amp; screen.orientation.unlock) { screen.orientation.unlock(); } } } // 在 script 标签内添加 checkOrientation 函数定义 function checkOrientation() { if (isMobileDevice()) { const isLandscape = isLandscapeMode(); if (isLandscape \u0026amp;\u0026amp; !player.fullscreen.active) { player.fullscreen.enter().catch(error =\u0026gt; { console.log(\u0026#39;Fullscreen enter failed:\u0026#39;, error); }); } } } function loadVideo(videoName) { // ...现有代码 let retryCount = 0; const maxRetries = 3; function tryLoadVideo() { fetch(`/video/${decodeURIComponent(encodeURI(videoName))}`, { method: \u0026#39;HEAD\u0026#39; }).then(response =\u0026gt; { if (response.ok) { // 视频存在，继续加载 player.source = newSource; } else { throw new Error(\u0026#39;Video not found\u0026#39;); } }).catch(error =\u0026gt; { console.error(\u0026#39;Error loading video:\u0026#39;, error); if (retryCount \u0026lt; maxRetries) { retryCount++; setTimeout(tryLoadVideo, 1000 * retryCount); } else { loadingOverlay.classList.add(\u0026#39;hidden\u0026#39;); videoSelect.disabled = false; alert(\u0026#39;视频加载失败，请稍后重试\u0026#39;); } }); } tryLoadVideo(); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 视频文件和字幕位于/video，命名示例\n视频：APT.mp4 字幕：APT.mp4.vtt nginx.conf\n# 在 server 块之前添加日志格式定义 log_format video_access \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#39; \u0026#39;\u0026#34;$request\u0026#34; $status $body_bytes_sent \u0026#39; \u0026#39;\u0026#34;$http_referer\u0026#34; \u0026#34;$http_user_agent\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_range\u0026#34; $request_time\u0026#39;; server { listen 80 ; listen [::]:80 ; listen 443 ssl http2 ; listen [::]:443 ssl http2 ; server_name video.1143520.xyz fastly-test.1143520.xyz; index video.html index.php index.html index.htm default.php default.htm default.html; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Real-IP $remote_addr; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; access_log /www/sites/video.1143520.xyz/log/access.log main; error_log /www/sites/video.1143520.xyz/log/error.log; location ^~ /.well-known/acme-challenge { allow all; root /usr/share/nginx/html; } root /www/sites/video.1143520.xyz/index; error_page 404 /404.html; if ($scheme = http) { return 301 https://$host$request_uri; } ssl_certificate /www/sites/video.1143520.xyz/ssl/fullchain.pem; ssl_certificate_key /www/sites/video.1143520.xyz/ssl/privkey.pem; ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1 TLSv1; ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:!aNULL:!eNULL:!EXPORT:!DSS:!DES:!RC4:!3DES:!MD5:!PSK:!KRB5:!SRP:!CAMELLIA:!SEED; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; error_page 497 https://$host$request_uri; proxy_set_header X-Forwarded-Proto https; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; location = / { try_files /video.html =404; } location = /video.html { return 301 /; } location ~* \\.html$ { return 403; } location ~* \\.srt$ { add_header Content-Type \u0026#34;application/x-subrip\u0026#34;; add_header Access-Control-Allow-Origin \u0026#34;*\u0026#34;; } location /video/ { valid_referers none blocked server_names *.1143520.xyz; if ($invalid_referer) { return 301 /; } alias /www/sites/video.1143520.xyz/index/video/; add_header Access-Control-Allow-Origin \u0026#34;*\u0026#34;; types { application/x-subrip srt; video/mp4 mp4; } add_header Cache-Control \u0026#34;public, max-age=3600\u0026#34;; add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34;; add_header Accept-Ranges bytes; slice 1m; proxy_cache_key $uri$is_args$args$slice_range; proxy_set_header Range $slice_range; proxy_cache_valid 200 206 1h; access_log /www/sites/video.1143520.xyz/log/video_access.log video_access; } location /api/videos { default_type application/json; content_by_lua_block { local cjson = require \u0026#34;cjson\u0026#34; local io = io local videos = {} -- 添加调试日志 ngx.log(ngx.ERR, \u0026#34;开始扫描视频目录\u0026#34;) -- 使用更安全的方式列出文件 local video_dir = \u0026#34;/www/sites/video.1143520.xyz/index/video\u0026#34; local cmd = string.format(\u0026#34;find %s -maxdepth 1 -type f -name \u0026#39;*.mp4\u0026#39;\u0026#34;, video_dir) -- 执行命令并捕获输出 local handle = io.popen(cmd) if not handle then ngx.log(ngx.ERR, \u0026#34;无法执行命令\u0026#34;) ngx.status = 500 ngx.say(cjson.encode({error = \u0026#34;Internal server error\u0026#34;})) return end local result = handle:read(\u0026#34;*a\u0026#34;) handle:close() -- 记录扫描结果 ngx.log(ngx.ERR, \u0026#34;扫描结果: \u0026#34; .. (result or \u0026#34;空\u0026#34;)) -- 解析文件列表 for filename in string.gmatch(result, \u0026#34;[^\\n]+\u0026#34;) do -- 提取文件名 local name = string.match(filename, \u0026#34;([^/]+)$\u0026#34;) if name and string.match(name, \u0026#34;%.mp4$\u0026#34;) then table.insert(videos, {name = name}) ngx.log(ngx.ERR, \u0026#34;找到视频文件: \u0026#34; .. name) end end if #videos == 0 then ngx.log(ngx.ERR, \u0026#34;没有找到任何视频文件\u0026#34;) end -- 设置响应头 ngx.header[\u0026#34;Content-Type\u0026#34;] = \u0026#34;application/json\u0026#34; ngx.header[\u0026#34;Access-Control-Allow-Origin\u0026#34;] = \u0026#34;*\u0026#34; ngx.header[\u0026#34;Access-Control-Allow-Methods\u0026#34;] = \u0026#34;GET\u0026#34; -- 返回结果 local response = cjson.encode(videos) ngx.log(ngx.ERR, \u0026#34;返回数据: \u0026#34; .. response) ngx.say(response) } } } ","date":"2025-01-09T14:18:38+08:00","image":"https://img20.360buyimg.com/openfeedback/jfs/t1/261887/15/16081/689620/679e3c25F0e1c76f7/847cc061b4ef658c.webp","permalink":"https://note.zhongyangblog.eu.org/p/%E8%87%AA%E5%BB%BA%E8%A7%86%E9%A2%91%E5%BA%93/","title":"自建视频库"},{"content":"效果展示 Demo\n主要配置 纯静态网页，用于展示\n网站结构 index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/x-icon\u0026#34; href=\u0026#34;/favicon.ico\u0026#34;\u0026gt; \u0026lt;title\u0026gt;个人自用图片资源\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; :root { --primary-color: #ffffff; --text-color: #ffffff; --border-color: #303030; --hover-color: #2c2c2c; --shadow-color: rgba(0, 0, 0, 0.3); --background-color: #0f0f0f; --surface-color: #212121; --secondary-text: #aaaaaa; } /* 浅色主题变量 */ :root[data-theme=\u0026#34;light\u0026#34;] { --primary-color: #000000; --text-color: #000000; --border-color: #e0e0e0; --hover-color: #f5f5f5; --shadow-color: rgba(0, 0, 0, 0.1); --background-color: #ffffff; --surface-color: #f8f8f8; --secondary-text: #666666; } body { margin: 0; padding: 5px; min-height: 100vh; background: var(--background-color); color: var(--text-color); font-family: -apple-system, BlinkMacSystemFont, \u0026#34;Segoe UI\u0026#34;, Roboto, sans-serif; } .container { max-width: 1600px; margin: 0 auto; padding: 0px; } h1 { text-align: center; margin-bottom: 20px; margin-top: 10px; font-size: 2em; color: var(--text-color); cursor: pointer; transition: opacity 0.3s ease; } h1:hover { opacity: 0.8; } .image-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; padding: 20px; opacity: 1; transition: opacity 0.3s ease; } .image-grid.loading { opacity: 0.6; } .image-item { position: relative; border-radius: 8px; background: var(--surface-color); transition: transform 0.3s ease, opacity 0.3s ease; cursor: pointer; display: flex; flex-direction: column; overflow: hidden; opacity: 0; animation: fadeIn 0.3s ease forwards; } @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } } .image-container { position: relative; aspect-ratio: 1; overflow: hidden; } .image-container img { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; } .image-item:hover .image-container img { transform: scale(1.05); } .image-info { padding: 15px; background: var(--surface-color); color: var(--text-color); font-size: 0.9em; line-height: 1.4; display: flex; flex-direction: column; } .image-info h3 { margin: 0 0 8px 0; font-size: 1.1em; color: var(--primary-color); } .image-info p { margin: 4px 0; color: var(--secondary-text); } .source-link { display: flex; align-items: center; padding: 6px 8px; background: var(--hover-color); border-radius: 4px; transition: background 0.2s ease; gap: 8px; } .source-link:hover { background: var(--border-color); } .source-name { font-weight: bold; color: var(--primary-color); min-width: 80px; } .source-url { color: var(--secondary-text); word-break: break-all; flex: 1; text-decoration: none; } .source-url:hover { color: var(--primary-color); text-decoration: underline; } .copy-icon { padding: 4px 8px; border-radius: 4px; color: var(--primary-color); cursor: pointer; background: var(--surface-color); transition: background 0.2s ease; } .copy-icon:hover { background: var(--border-color); } .copy-tooltip { position: fixed; top: 20px; left: 20px; background: #4CAF50; color: white; padding: 12px 24px; border-radius: 8px; font-size: 16px; font-weight: 500; pointer-events: none; opacity: 0; transform: translateY(-20px); transition: all 0.3s ease; z-index: 2001; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2); display: flex; align-items: center; gap: 8px; min-width: 200px; } .copy-tooltip::before { content: \u0026#34;✓\u0026#34;; font-weight: bold; font-size: 18px; } .copy-tooltip.show { opacity: 1; transform: translateY(0); } /* 加载动画 */ .loading { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: var(--background-color); display: none; justify-content: center; align-items: center; z-index: 1000; opacity: 0; transition: opacity 0.3s ease; } .loading.active { opacity: 1; display: flex; } .loading-spinner { width: 50px; height: 50px; border: 5px solid var(--border-color); border-top: 5px solid var(--primary-color); border-radius: 50%; animation: spin 1s linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } /* 主题切换按钮 */ .theme-toggle { position: fixed; top: 20px; right: 20px; width: 40px; height: 40px; border-radius: 50%; background: var(--surface-color); border: 2px solid var(--border-color); cursor: pointer; display: flex; align-items: center; justify-content: center; z-index: 1000; transition: all 0.3s ease; opacity: 0; transform: scale(0.8); } .theme-toggle:hover { transform: scale(1); opacity: 1; background: var(--hover-color); } .theme-toggle svg { width: 24px; height: 24px; fill: var(--text-color); transition: all 0.3s ease; } /* 响应式布局 */ @media screen and (max-width: 1200px) { .image-grid { grid-template-columns: repeat(3, 1fr); } } @media screen and (max-width: 768px) { .image-grid { grid-template-columns: repeat(2, 1fr); gap: 15px; padding: 15px; } .theme-toggle { top: 10px; right: 10px; width: 35px; height: 35px; } .theme-toggle svg { width: 20px; height: 20px; } } @media screen and (max-width: 480px) { .image-grid { grid-template-columns: 1fr; gap: 10px; padding: 10px; } h1 { font-size: 1.5em; margin-bottom: 20px; } } /* 图片查看器 */ .image-viewer { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.9); display: flex; justify-content: center; align-items: center; z-index: 2000; cursor: zoom-out; opacity: 0; transition: opacity 0.4s cubic-bezier(0.4, 0, 1, 1); pointer-events: none; } .image-viewer.active { opacity: 1; pointer-events: auto; } .viewer-loading { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 50px; height: 50px; border: 5px solid var(--border-color); border-top: 5px solid var(--primary-color); border-radius: 50%; animation: spin 1s linear infinite; display: none; } .viewer-loading.show { display: block; } .image-viewer img { max-width: 90%; max-height: 90vh; object-fit: contain; cursor: zoom-out; transition: transform 0.4s cubic-bezier(0.4, 0, 1, 1), opacity 0.4s cubic-bezier(0.4, 0, 1, 1); opacity: 0; } .image-viewer img.loaded { opacity: 1; } .close-viewer { position: absolute; top: 20px; right: 20px; width: 40px; height: 40px; background: var(--surface-color); border: none; border-radius: 50%; cursor: pointer; display: flex; align-items: center; justify-content: center; color: var(--text-color); font-size: 24px; } /* 修改折叠按钮和链接容器的样式 */ .collapse-button { width: 100%; padding: 10px; background: var(--surface-color); border: none; border-radius: 4px; color: var(--text-color); cursor: pointer; display: flex; align-items: center; justify-content: space-between; transition: background 0.2s ease; margin-bottom: 0; } .collapse-button:hover { background: var(--hover-color); } .collapse-button::after { content: \u0026#34;▼\u0026#34;; font-size: 12px; transition: transform 0.3s ease; } .collapse-button.collapsed::after { transform: rotate(-90deg); } .links-container { display: flex; flex-direction: column; gap: 8px; padding: 8px 0; transition: all 0.3s ease; overflow: hidden; flex: 1; } .links-container.collapsed { padding: 0; max-height: 0; } /* 添加分页样式 */ .pagination { display: flex; justify-content: center; align-items: center; gap: 8px; margin: 20px 0; flex-wrap: wrap; padding: 0 10px; opacity: 0; transition: opacity 0.3s ease; } .pagination.show { opacity: 1; } .page-button { padding: 8px 16px; border: none; border-radius: 4px; background: var(--surface-color); color: var(--text-color); cursor: pointer; transition: all 0.2s ease; } .page-button:hover { background: var(--hover-color); } .page-button.active { background: var(--primary-color); color: var(--background-color); } .page-button:disabled { opacity: 0.5; cursor: not-allowed; } /* 添加搜索框样式 */ .search-container { margin: 0px auto; width: 100%; max-width: 800px; position: relative; box-sizing: border-box; } .search-input { width: 100%; padding: 12px 20px; font-size: 16px; border: 2px solid var(--border-color); border-radius: 8px; background: var(--surface-color); color: var(--text-color); transition: all 0.3s ease; box-sizing: border-box; } .search-input:focus { outline: none; border-color: var(--primary-color); box-shadow: 0 0 5px var(--shadow-color); } .search-input::placeholder { color: var(--secondary-text); } .clear-search { position: absolute; right: 10px; top: 50%; transform: translateY(-50%); background: none; border: none; color: var(--secondary-text); cursor: pointer; padding: 5px; display: none; } .clear-search:hover { color: var(--primary-color); } .no-results { text-align: center; padding: 40px; color: var(--secondary-text); font-size: 1.2em; } @media screen and (max-width: 1200px) { .search-container { max-width: 90%; } } @media screen and (max-width: 480px) { .search-container { margin: 10px auto; width: 90%; } .search-input { padding: 10px 15px; font-size: 14px; } } .page-dots { padding: 8px 12px; color: var(--text-color); user-select: none; } .pagination { display: flex; justify-content: center; align-items: center; gap: 8px; margin: 20px 0; flex-wrap: wrap; padding: 0 10px; opacity: 0; transition: opacity 0.3s ease; } .pagination.show { opacity: 1; } .page-button { min-width: 40px; height: 40px; padding: 0 12px; border: none; border-radius: 4px; background: var(--surface-color); color: var(--text-color); cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center; } @media screen and (max-width: 480px) { .page-button { min-width: 36px; height: 36px; padding: 0 8px; font-size: 14px; } .pagination { gap: 4px; } } /* 添加上传按钮样式 */ .upload-button { position: fixed; right: 20px; bottom: 20px; padding: 0 20px; height: 45px; border-radius: 25px; background: var(--primary-color); color: var(--background-color); border: none; cursor: pointer; display: flex; align-items: center; gap: 8px; font-size: 16px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3); transition: all 0.3s ease; z-index: 1000; text-decoration: none; opacity: 0; transform: scale(0.8); } .upload-button:hover { transform: scale(1); opacity: 1; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4); } .upload-button svg { width: 20px; height: 20px; fill: currentColor; } @media screen and (max-width: 480px) { .upload-button { padding: 0 15px; height: 40px; right: 15px; bottom: 15px; font-size: 14px; } .upload-button svg { width: 18px; height: 18px; } } /* 添加导航按钮样式 */ .viewer-nav { position: absolute; top: 50%; transform: translateY(-50%); width: 50px; height: 50px; background: rgba(0, 0, 0, 0.5); border: none; border-radius: 50%; color: white; font-size: 24px; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.3s ease; z-index: 2002; } .viewer-nav:hover { background: rgba(0, 0, 0, 0.8); transform: translateY(-50%) scale(1.1); } .viewer-prev { left: 20px; } .viewer-next { right: 20px; } /* 图片计数器样式 */ .image-counter { position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); background: rgba(0, 0, 0, 0.5); color: white; padding: 8px 16px; border-radius: 20px; font-size: 14px; z-index: 2002; } @media screen and (max-width: 768px) { .viewer-nav { width: 40px; height: 40px; font-size: 20px; } .viewer-prev { left: 10px; } .viewer-next { right: 10px; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 添加上传按钮 --\u0026gt; \u0026lt;a href=\u0026#34;https://rn-alist.1143520.xyz:5244/%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0\u0026#34; target=\u0026#34;_blank\u0026#34; class=\u0026#34;upload-button\u0026#34; title=\u0026#34;上传图片\u0026#34;\u0026gt; \u0026lt;svg viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M9 16h6v-6h4l-7-7-7 7h4v6zm-4 2h14v2H5v-2z\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span\u0026gt;上传图片\u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;button class=\u0026#34;theme-toggle\u0026#34; id=\u0026#34;themeToggle\u0026#34; aria-label=\u0026#34;切换主题\u0026#34;\u0026gt; \u0026lt;svg class=\u0026#34;sun-icon\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;个人自用图片资源\u0026lt;/h1\u0026gt; \u0026lt;!-- 添加搜索框 --\u0026gt; \u0026lt;div class=\u0026#34;search-container\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;searchInput\u0026#34; class=\u0026#34;search-input\u0026#34; placeholder=\u0026#34;搜索图片名称...\u0026#34; autocomplete=\u0026#34;off\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;clearSearch\u0026#34; class=\u0026#34;clear-search\u0026#34;\u0026gt;✕\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;image-grid\u0026#34; id=\u0026#34;imageGrid\u0026#34;\u0026gt; \u0026lt;!-- 图片将通过 JavaScript 动态加载 --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;loading\u0026#34; id=\u0026#34;loading\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;loading-spinner\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;image-viewer\u0026#34; id=\u0026#34;imageViewer\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;close-viewer\u0026#34; id=\u0026#34;closeViewer\u0026#34;\u0026gt;×\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;viewer-nav viewer-prev\u0026#34; id=\u0026#34;viewerPrev\u0026#34;\u0026gt;❮\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;viewer-nav viewer-next\u0026#34; id=\u0026#34;viewerNext\u0026#34;\u0026gt;❯\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;viewer-loading\u0026#34; id=\u0026#34;viewerLoading\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34; id=\u0026#34;viewerImage\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;image-counter\u0026#34; id=\u0026#34;imageCounter\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pagination\u0026#34; id=\u0026#34;pagination\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { const imageGrid = document.getElementById(\u0026#39;imageGrid\u0026#39;); const loading = document.getElementById(\u0026#39;loading\u0026#39;); const imageViewer = document.getElementById(\u0026#39;imageViewer\u0026#39;); const viewerImage = document.getElementById(\u0026#39;viewerImage\u0026#39;); const closeViewer = document.getElementById(\u0026#39;closeViewer\u0026#39;); const themeToggle = document.getElementById(\u0026#39;themeToggle\u0026#39;); const root = document.documentElement; const title = document.querySelector(\u0026#39;h1\u0026#39;); const moonIcon = `\u0026lt;svg class=\u0026#34;moon-icon\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-3.03 0-5.5-2.47-5.5-5.5 0-1.82.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;`; const sunIcon = `\u0026lt;svg class=\u0026#34;sun-icon\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;`; // 检查本地存储中的主题设置 const savedTheme = localStorage.getItem(\u0026#39;theme\u0026#39;) || \u0026#39;dark\u0026#39;; root.setAttribute(\u0026#39;data-theme\u0026#39;, savedTheme); themeToggle.innerHTML = savedTheme === \u0026#39;dark\u0026#39; ? sunIcon : moonIcon; // 主题切换 themeToggle.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const currentTheme = root.getAttribute(\u0026#39;data-theme\u0026#39;); const newTheme = currentTheme === \u0026#39;dark\u0026#39; ? \u0026#39;light\u0026#39; : \u0026#39;dark\u0026#39;; root.setAttribute(\u0026#39;data-theme\u0026#39;, newTheme); themeToggle.innerHTML = newTheme === \u0026#39;dark\u0026#39; ? sunIcon : moonIcon; localStorage.setItem(\u0026#39;theme\u0026#39;, newTheme); }); // 创建复制提示元素 const tooltip = document.createElement(\u0026#39;div\u0026#39;); tooltip.className = \u0026#39;copy-tooltip\u0026#39;; tooltip.textContent = \u0026#39;链接已复制到剪贴板\u0026#39;; document.body.appendChild(tooltip); // 复制文本到剪贴板的函数 async function copyToClipboard(text, event) { try { await navigator.clipboard.writeText(text); // 直接显示提示，不需要计算位置 tooltip.style.background = \u0026#39;#4CAF50\u0026#39;; // 重置为成功颜色 tooltip.textContent = \u0026#39;链接已复制到剪贴板\u0026#39;; tooltip.classList.add(\u0026#39;show\u0026#39;); // 2秒后隐藏提示 setTimeout(() =\u0026gt; { tooltip.classList.remove(\u0026#39;show\u0026#39;); }, 2000); } catch (err) { console.error(\u0026#39;复制失败:\u0026#39;, err); // 显示错误提示 tooltip.style.background = \u0026#39;#f44336\u0026#39;; tooltip.textContent = \u0026#39;复制失败，请重试\u0026#39;; tooltip.classList.add(\u0026#39;show\u0026#39;); // 2秒后隐藏提示 setTimeout(() =\u0026gt; { tooltip.classList.remove(\u0026#39;show\u0026#39;); }, 2000); } } const ITEMS_PER_PAGE = 20; let currentPage = 1; let allImageFiles = []; let filteredImageFiles = []; let totalPages = 1; let searchTimeout; // 添加搜索相关的DOM元素 const searchInput = document.getElementById(\u0026#39;searchInput\u0026#39;); const clearSearch = document.getElementById(\u0026#39;clearSearch\u0026#39;); // 添加搜索输入框的事件监听 searchInput.addEventListener(\u0026#39;input\u0026#39;, (e) =\u0026gt; { const query = e.target.value.trim(); clearSearch.style.display = query ? \u0026#39;block\u0026#39; : \u0026#39;none\u0026#39;; handleSearch(query); }); // 添加搜索框的键盘事件监听 searchInput.addEventListener(\u0026#39;keydown\u0026#39;, (e) =\u0026gt; { if (e.key === \u0026#39;Escape\u0026#39;) { searchInput.value = \u0026#39;\u0026#39;; clearSearch.style.display = \u0026#39;none\u0026#39;; filteredImageFiles = allImageFiles; currentPage = 1; createPagination(filteredImageFiles.length); loadPageImages(); updateUrlWithPage(currentPage); } }); // 从URL获取页码 function getPageFromUrl() { const path = window.location.pathname; const match = path.match(/\\/(\\d{3})/); if (match) { const page = parseInt(match[1]); return page \u0026gt; 0 ? page : 1; } return 1; } // 更新URL中的页码 function updateUrlWithPage(page) { const formattedPage = String(page).padStart(3, \u0026#39;0\u0026#39;); const newUrl = `/${formattedPage}`; window.history.pushState({ page }, \u0026#39;\u0026#39;, newUrl); // 更新分页显示 createPagination(filteredImageFiles.length); } // 创建分页按钮 function createPagination(total) { const pagination = document.getElementById(\u0026#39;pagination\u0026#39;); pagination.innerHTML = \u0026#39;\u0026#39;; totalPages = Math.ceil(total / ITEMS_PER_PAGE); // 上一页按钮 const prevButton = document.createElement(\u0026#39;button\u0026#39;); prevButton.className = \u0026#39;page-button\u0026#39;; prevButton.textContent = \u0026#39;上一页\u0026#39;; prevButton.disabled = currentPage === 1; prevButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { if (currentPage \u0026gt; 1) { currentPage--; updateUrlWithPage(currentPage); loadPageImages(); } }); pagination.appendChild(prevButton); // 计算需要显示的页码范围 let startPage = Math.max(1, currentPage - 10); let endPage = Math.min(totalPages, currentPage + 10); const showLeftDots = startPage \u0026gt; 2; const showRightDots = endPage \u0026lt; totalPages - 1; // 第一页 addPageButton(1); // 左侧省略号 if (showLeftDots) { const dotsSpan = document.createElement(\u0026#39;span\u0026#39;); dotsSpan.className = \u0026#39;page-dots\u0026#39;; dotsSpan.textContent = \u0026#39;...\u0026#39;; pagination.appendChild(dotsSpan); } // 中间页码 for (let i = startPage; i \u0026lt;= endPage; i++) { if (i !== 1 \u0026amp;\u0026amp; i !== totalPages) { addPageButton(i); } } // 右侧省略号 if (showRightDots) { const dotsSpan = document.createElement(\u0026#39;span\u0026#39;); dotsSpan.className = \u0026#39;page-dots\u0026#39;; dotsSpan.textContent = \u0026#39;...\u0026#39;; pagination.appendChild(dotsSpan); } // 最后一页 if (totalPages \u0026gt; 1) { addPageButton(totalPages); } // 下一页按钮 const nextButton = document.createElement(\u0026#39;button\u0026#39;); nextButton.className = \u0026#39;page-button\u0026#39;; nextButton.textContent = \u0026#39;下一页\u0026#39;; nextButton.disabled = currentPage === totalPages; nextButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { if (currentPage \u0026lt; totalPages) { currentPage++; updateUrlWithPage(currentPage); loadPageImages(); } }); pagination.appendChild(nextButton); } // 辅助函数：添加页码按钮 function addPageButton(pageNum) { const pageButton = document.createElement(\u0026#39;button\u0026#39;); pageButton.className = `page-button ${pageNum === currentPage ? \u0026#39;active\u0026#39; : \u0026#39;\u0026#39;}`; pageButton.textContent = pageNum; pageButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { if (pageNum !== currentPage) { currentPage = pageNum; updateUrlWithPage(currentPage); loadPageImages(); } }); pagination.appendChild(pageButton); } // 搜索功能 function performSearch(query) { query = query.toLowerCase(); filteredImageFiles = allImageFiles.filter(file =\u0026gt; file.toLowerCase().includes(query) ); currentPage = 1; createPagination(filteredImageFiles.length); loadPageImages(); updateUrlWithPage(currentPage); } // 添加分页按钮状态更新函数 function updatePaginationButtons() { const buttons = document.querySelectorAll(\u0026#39;.page-button\u0026#39;); buttons.forEach(button =\u0026gt; { if (button.textContent === \u0026#39;上一页\u0026#39;) { button.disabled = currentPage === 1; } else if (button.textContent === \u0026#39;下一页\u0026#39;) { button.disabled = currentPage === totalPages; } else { button.classList.toggle(\u0026#39;active\u0026#39;, parseInt(button.textContent) === currentPage); } }); } // 优化搜索功能，添加防抖 function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () =\u0026gt; { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; } // 添加一个标志来跟踪是否是首次加载 let isFirstLoad = true; // 修改loadPageImages函数以支持平滑过渡 async function loadPageImages() { const imageGrid = document.getElementById(\u0026#39;imageGrid\u0026#39;); const pagination = document.getElementById(\u0026#39;pagination\u0026#39;); imageGrid.classList.add(\u0026#39;loading\u0026#39;); // 立即隐藏分页按钮（移除transition效果） pagination.style.transition = \u0026#39;none\u0026#39;; pagination.classList.remove(\u0026#39;show\u0026#39;); // 强制浏览器重绘 pagination.offsetHeight; // 恢复transition效果 pagination.style.transition = \u0026#39;\u0026#39;; const start = (currentPage - 1) * ITEMS_PER_PAGE; const end = Math.min(start + ITEMS_PER_PAGE, filteredImageFiles.length); const currentPageFiles = filteredImageFiles.slice(start, end); // 如果没有搜索结果，显示提示信息 if (currentPageFiles.length === 0) { imageGrid.innerHTML = \u0026#39;\u0026lt;div class=\u0026#34;no-results\u0026#34;\u0026gt;没有找到匹配的图片\u0026lt;/div\u0026gt;\u0026#39;; imageGrid.classList.remove(\u0026#39;loading\u0026#39;); setTimeout(() =\u0026gt; { pagination.classList.add(\u0026#39;show\u0026#39;); }, 300); return; } // 预先获取当前页的JSON数据 const jsonDataPromises = currentPageFiles.map(image =\u0026gt; fetch(`/random/${image.replace(/\\.(jpg|jpeg|png|gif|webp|ico|avif)$/i, \u0026#39;.json\u0026#39;)}`) .then(res =\u0026gt; res.ok ? res.json() : null) .catch(() =\u0026gt; null) ); const jsonDataArray = await Promise.all(jsonDataPromises); // 创建一个文档片段来存储所有新元素 const fragment = document.createDocumentFragment(); // 创建当前页的图片元素 const imageElements = await Promise.all(currentPageFiles.map(async (image, index) =\u0026gt; { const imageItem = document.createElement(\u0026#39;div\u0026#39;); imageItem.className = \u0026#39;image-item\u0026#39;; // 添加延迟动画 imageItem.style.animationDelay = `${index * 50}ms`; const imageContainer = document.createElement(\u0026#39;div\u0026#39;); imageContainer.className = \u0026#39;image-container\u0026#39;; const img = document.createElement(\u0026#39;img\u0026#39;); img.alt = image; img.loading = \u0026#39;lazy\u0026#39;; // 设置图片源 const jsonData = jsonDataArray[index]; if (jsonData \u0026amp;\u0026amp; jsonData[\u0026#39;4399\u0026#39;]) { img.src = jsonData[\u0026#39;4399\u0026#39;]; img.onerror = () =\u0026gt; { console.log(`Failed to load image from 4399, using local image for ${image}`); img.src = `/random/${image}`; }; } else { img.src = `/random/${image}`; } imageContainer.appendChild(img); imageItem.appendChild(imageContainer); const imageInfo = document.createElement(\u0026#39;div\u0026#39;); imageInfo.className = \u0026#39;image-info\u0026#39;; // 修改图片点击事件，移动到这里 imageContainer.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const allImages = document.querySelectorAll(\u0026#39;.image-container img\u0026#39;); const index = Array.from(allImages).indexOf(img); showImageViewer(img.src, index); }); if (jsonData) { // 创建折叠按钮 const collapseButton = document.createElement(\u0026#39;button\u0026#39;); collapseButton.className = \u0026#39;collapse-button\u0026#39;; collapseButton.textContent = decodeURIComponent(image); imageInfo.appendChild(collapseButton); // 创建链接容器 const linksContainer = document.createElement(\u0026#39;div\u0026#39;); linksContainer.className = \u0026#39;links-container collapsed\u0026#39;; // 获取JSON中的所有字段，保持原始顺序 const allFields = Object.keys(jsonData); // 遍历所有字段创建链接 allFields.forEach(source =\u0026gt; { const url = jsonData[source]; const sourceLink = document.createElement(\u0026#39;div\u0026#39;); sourceLink.className = \u0026#39;source-link\u0026#39;; sourceLink.innerHTML = ` \u0026lt;span class=\u0026#34;source-name\u0026#34;\u0026gt;${source}:\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;${url}\u0026#34; target=\u0026#34;_blank\u0026#34; class=\u0026#34;source-url\u0026#34;\u0026gt;${url}\u0026lt;/a\u0026gt; \u0026lt;span class=\u0026#34;copy-icon\u0026#34; title=\u0026#34;点击复制链接\u0026#34;\u0026gt;📋\u0026lt;/span\u0026gt; `; // 只在点击复制图标时复制链接 const copyIcon = sourceLink.querySelector(\u0026#39;.copy-icon\u0026#39;); copyIcon.addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.stopPropagation(); copyToClipboard(url, e); }); linksContainer.appendChild(sourceLink); }); imageInfo.appendChild(linksContainer); // 添加折叠功能 collapseButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const isCollapsed = collapseButton.classList.toggle(\u0026#39;collapsed\u0026#39;); linksContainer.classList.toggle(\u0026#39;collapsed\u0026#39;); // 使用max-height来控制展开和收起 if (!isCollapsed) { linksContainer.style.maxHeight = linksContainer.scrollHeight + \u0026#34;px\u0026#34;; } else { linksContainer.style.maxHeight = \u0026#34;0\u0026#34;; } }); // 默认折叠 collapseButton.classList.add(\u0026#39;collapsed\u0026#39;); } else { // 如果没有JSON数据，只显示文件名 const fileName = document.createElement(\u0026#39;div\u0026#39;); fileName.className = \u0026#39;file-name\u0026#39;; fileName.textContent = decodeURIComponent(image); fileName.style.padding = \u0026#39;10px\u0026#39;; fileName.style.color = \u0026#39;var(--text-color)\u0026#39;; imageInfo.appendChild(fileName); } imageItem.appendChild(imageInfo); // 当图片加载完成时预加载大图 img.addEventListener(\u0026#39;load\u0026#39;, () =\u0026gt; { preloadImage(img.src).catch(console.error); }); return imageItem; })); // 将所有元素添加到文档片段中 imageElements.forEach(element =\u0026gt; fragment.appendChild(element)); // 清空网格并添加新元素 requestAnimationFrame(() =\u0026gt; { imageGrid.innerHTML = \u0026#39;\u0026#39;; imageGrid.appendChild(fragment); imageGrid.classList.remove(\u0026#39;loading\u0026#39;); // 延时显示分页按钮 setTimeout(() =\u0026gt; { pagination.classList.add(\u0026#39;show\u0026#39;); }, 300); // 直接设置滚动位置到顶部 window.scrollTo(0, 0); }); // 更新分页按钮状态 updatePaginationButtons(); } // 修改搜索处理函数，重置首次加载标志 const handleSearch = debounce((query) =\u0026gt; { const imageGrid = document.getElementById(\u0026#39;imageGrid\u0026#39;); imageGrid.classList.add(\u0026#39;loading\u0026#39;); isFirstLoad = true; // 搜索时重置为首次加载状态 setTimeout(() =\u0026gt; { performSearch(query); }, 10); }, 300); // 修改清除搜索函数，重置首次加载标志 clearSearch.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { searchInput.value = \u0026#39;\u0026#39;; clearSearch.style.display = \u0026#39;none\u0026#39;; filteredImageFiles = allImageFiles; currentPage = 1; isFirstLoad = true; // 清除搜索时重置为首次加载状态 createPagination(filteredImageFiles.length); loadPageImages(); updateUrlWithPage(currentPage); }); // 修改loadPageImages函数以支持平滑过渡 async function loadPageImages() { const imageGrid = document.getElementById(\u0026#39;imageGrid\u0026#39;); const pagination = document.getElementById(\u0026#39;pagination\u0026#39;); imageGrid.classList.add(\u0026#39;loading\u0026#39;); // 立即隐藏分页按钮（移除transition效果） pagination.style.transition = \u0026#39;none\u0026#39;; pagination.classList.remove(\u0026#39;show\u0026#39;); // 强制浏览器重绘 pagination.offsetHeight; // 恢复transition效果 pagination.style.transition = \u0026#39;\u0026#39;; const start = (currentPage - 1) * ITEMS_PER_PAGE; const end = Math.min(start + ITEMS_PER_PAGE, filteredImageFiles.length); const currentPageFiles = filteredImageFiles.slice(start, end); // 如果没有搜索结果，显示提示信息 if (currentPageFiles.length === 0) { imageGrid.innerHTML = \u0026#39;\u0026lt;div class=\u0026#34;no-results\u0026#34;\u0026gt;没有找到匹配的图片\u0026lt;/div\u0026gt;\u0026#39;; imageGrid.classList.remove(\u0026#39;loading\u0026#39;); setTimeout(() =\u0026gt; { pagination.classList.add(\u0026#39;show\u0026#39;); }, 300); return; } // 预先获取当前页的JSON数据 const jsonDataPromises = currentPageFiles.map(image =\u0026gt; fetch(`/random/${image.replace(/\\.(jpg|jpeg|png|gif|webp|ico|avif)$/i, \u0026#39;.json\u0026#39;)}`) .then(res =\u0026gt; res.ok ? res.json() : null) .catch(() =\u0026gt; null) ); const jsonDataArray = await Promise.all(jsonDataPromises); // 创建一个文档片段来存储所有新元素 const fragment = document.createDocumentFragment(); // 创建当前页的图片元素 const imageElements = await Promise.all(currentPageFiles.map(async (image, index) =\u0026gt; { const imageItem = document.createElement(\u0026#39;div\u0026#39;); imageItem.className = \u0026#39;image-item\u0026#39;; // 添加延迟动画 imageItem.style.animationDelay = `${index * 50}ms`; const imageContainer = document.createElement(\u0026#39;div\u0026#39;); imageContainer.className = \u0026#39;image-container\u0026#39;; const img = document.createElement(\u0026#39;img\u0026#39;); img.alt = image; img.loading = \u0026#39;lazy\u0026#39;; // 设置图片源 const jsonData = jsonDataArray[index]; if (jsonData \u0026amp;\u0026amp; jsonData[\u0026#39;4399\u0026#39;]) { img.src = jsonData[\u0026#39;4399\u0026#39;]; img.onerror = () =\u0026gt; { console.log(`Failed to load image from 4399, using local image for ${image}`); img.src = `/random/${image}`; }; } else { img.src = `/random/${image}`; } imageContainer.appendChild(img); imageItem.appendChild(imageContainer); const imageInfo = document.createElement(\u0026#39;div\u0026#39;); imageInfo.className = \u0026#39;image-info\u0026#39;; // 修改图片点击事件，移动到这里 imageContainer.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const allImages = document.querySelectorAll(\u0026#39;.image-container img\u0026#39;); const index = Array.from(allImages).indexOf(img); showImageViewer(img.src, index); }); if (jsonData) { // 创建折叠按钮 const collapseButton = document.createElement(\u0026#39;button\u0026#39;); collapseButton.className = \u0026#39;collapse-button\u0026#39;; collapseButton.textContent = decodeURIComponent(image); imageInfo.appendChild(collapseButton); // 创建链接容器 const linksContainer = document.createElement(\u0026#39;div\u0026#39;); linksContainer.className = \u0026#39;links-container collapsed\u0026#39;; // 获取JSON中的所有字段，保持原始顺序 const allFields = Object.keys(jsonData); // 遍历所有字段创建链接 allFields.forEach(source =\u0026gt; { const url = jsonData[source]; const sourceLink = document.createElement(\u0026#39;div\u0026#39;); sourceLink.className = \u0026#39;source-link\u0026#39;; sourceLink.innerHTML = ` \u0026lt;span class=\u0026#34;source-name\u0026#34;\u0026gt;${source}:\u0026lt;/span\u0026gt; \u0026lt;a href=\u0026#34;${url}\u0026#34; target=\u0026#34;_blank\u0026#34; class=\u0026#34;source-url\u0026#34;\u0026gt;${url}\u0026lt;/a\u0026gt; \u0026lt;span class=\u0026#34;copy-icon\u0026#34; title=\u0026#34;点击复制链接\u0026#34;\u0026gt;📋\u0026lt;/span\u0026gt; `; // 只在点击复制图标时复制链接 const copyIcon = sourceLink.querySelector(\u0026#39;.copy-icon\u0026#39;); copyIcon.addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.stopPropagation(); copyToClipboard(url, e); }); linksContainer.appendChild(sourceLink); }); imageInfo.appendChild(linksContainer); // 添加折叠功能 collapseButton.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { const isCollapsed = collapseButton.classList.toggle(\u0026#39;collapsed\u0026#39;); linksContainer.classList.toggle(\u0026#39;collapsed\u0026#39;); // 使用max-height来控制展开和收起 if (!isCollapsed) { linksContainer.style.maxHeight = linksContainer.scrollHeight + \u0026#34;px\u0026#34;; } else { linksContainer.style.maxHeight = \u0026#34;0\u0026#34;; } }); // 默认折叠 collapseButton.classList.add(\u0026#39;collapsed\u0026#39;); } else { // 如果没有JSON数据，只显示文件名 const fileName = document.createElement(\u0026#39;div\u0026#39;); fileName.className = \u0026#39;file-name\u0026#39;; fileName.textContent = decodeURIComponent(image); fileName.style.padding = \u0026#39;10px\u0026#39;; fileName.style.color = \u0026#39;var(--text-color)\u0026#39;; imageInfo.appendChild(fileName); } imageItem.appendChild(imageInfo); // 当图片加载完成时预加载大图 img.addEventListener(\u0026#39;load\u0026#39;, () =\u0026gt; { preloadImage(img.src).catch(console.error); }); return imageItem; })); // 将所有元素添加到文档片段中 imageElements.forEach(element =\u0026gt; fragment.appendChild(element)); // 清空网格并添加新元素 requestAnimationFrame(() =\u0026gt; { imageGrid.innerHTML = \u0026#39;\u0026#39;; imageGrid.appendChild(fragment); imageGrid.classList.remove(\u0026#39;loading\u0026#39;); // 延时显示分页按钮 setTimeout(() =\u0026gt; { pagination.classList.add(\u0026#39;show\u0026#39;); }, 300); // 直接设置滚动位置到顶部 window.scrollTo(0, 0); }); // 更新分页按钮状态 updatePaginationButtons(); } // 修改loadImages函数以支持搜索 const loadImages = async () =\u0026gt; { try { const response = await fetch(\u0026#39;/random/\u0026#39;); const text = await response.text(); const parser = new DOMParser(); const doc = parser.parseFromString(text, \u0026#39;text/html\u0026#39;); const links = Array.from(doc.querySelectorAll(\u0026#39;a\u0026#39;)); allImageFiles = links .map(link =\u0026gt; { const href = link.getAttribute(\u0026#39;href\u0026#39;); return href ? decodeURIComponent(href) : null; }) .filter(href =\u0026gt; href \u0026amp;\u0026amp; /\\.(jpg|jpeg|png|gif|webp|ico|avif)$/i.test(href)); filteredImageFiles = allImageFiles; // 初始化过滤后的图片列表 // 从URL获取初始页码 currentPage = getPageFromUrl(); // 创建分页 createPagination(filteredImageFiles.length); // 加载当前页 await loadPageImages(); } catch (error) { console.error(\u0026#39;Error loading images:\u0026#39;, error); loading.style.display = \u0026#39;none\u0026#39;; } }; // 添加浏览器后退/前进事件处理 window.addEventListener(\u0026#39;popstate\u0026#39;, (event) =\u0026gt; { if (event.state \u0026amp;\u0026amp; event.state.page) { currentPage = event.state.page; loadPageImages(); } }); // 修改标题点击事件 title.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { if (currentPage !== 1) { currentPage = 1; updateUrlWithPage(currentPage); loadPageImages(); } }); // 加载图片 loadImages(); const viewerLoading = document.getElementById(\u0026#39;viewerLoading\u0026#39;); // 预加载图片函数 function preloadImage(url) { return new Promise((resolve, reject) =\u0026gt; { const img = new Image(); img.onload = () =\u0026gt; resolve(url); img.onerror = () =\u0026gt; reject(url); img.src = url; }); } let currentViewerIndex = -1; // 当前查看的图片索引 // 修改图片查看逻辑 async function showImageViewer(imgSrc, index) { currentViewerIndex = index; imageViewer.classList.add(\u0026#39;active\u0026#39;); viewerImage.classList.remove(\u0026#39;loaded\u0026#39;); viewerLoading.classList.add(\u0026#39;show\u0026#39;); // 更新计数器 const start = (currentPage - 1) * ITEMS_PER_PAGE; const currentPageImages = filteredImageFiles.slice(start, Math.min(start + ITEMS_PER_PAGE, filteredImageFiles.length)); document.getElementById(\u0026#39;imageCounter\u0026#39;).textContent = `${index + 1} / ${currentPageImages.length}`; try { await preloadImage(imgSrc); viewerImage.src = imgSrc; viewerImage.classList.add(\u0026#39;loaded\u0026#39;); } catch (error) { console.error(\u0026#39;Failed to load image:\u0026#39;, error); } finally { viewerLoading.classList.remove(\u0026#39;show\u0026#39;); } } // 切换到上一张图片 async function showPreviousImage() { const start = (currentPage - 1) * ITEMS_PER_PAGE; const currentPageImages = filteredImageFiles.slice(start, Math.min(start + ITEMS_PER_PAGE, filteredImageFiles.length)); if (currentViewerIndex \u0026gt; 0) { currentViewerIndex--; const prevImage = document.querySelectorAll(\u0026#39;.image-container img\u0026#39;)[currentViewerIndex]; await showImageViewer(prevImage.src, currentViewerIndex); } } // 切换到下一张图片 async function showNextImage() { const start = (currentPage - 1) * ITEMS_PER_PAGE; const currentPageImages = filteredImageFiles.slice(start, Math.min(start + ITEMS_PER_PAGE, filteredImageFiles.length)); if (currentViewerIndex \u0026lt; currentPageImages.length - 1) { currentViewerIndex++; const nextImage = document.querySelectorAll(\u0026#39;.image-container img\u0026#39;)[currentViewerIndex]; await showImageViewer(nextImage.src, currentViewerIndex); } } // 添加导航按钮事件监听 document.getElementById(\u0026#39;viewerPrev\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.stopPropagation(); showPreviousImage(); }); document.getElementById(\u0026#39;viewerNext\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.stopPropagation(); showNextImage(); }); // 添加键盘事件监听 document.addEventListener(\u0026#39;keydown\u0026#39;, (e) =\u0026gt; { if (imageViewer.classList.contains(\u0026#39;active\u0026#39;)) { if (e.key === \u0026#39;Escape\u0026#39;) { closeImageViewer(); } else if (e.key === \u0026#39;ArrowLeft\u0026#39;) { showPreviousImage(); } else if (e.key === \u0026#39;ArrowRight\u0026#39;) { showNextImage(); } else if (e.key === \u0026#39;ArrowUp\u0026#39;) { // 上一页 if (currentPage \u0026gt; 1) { closeImageViewer(); currentPage--; updateUrlWithPage(currentPage); loadPageImages().then(() =\u0026gt; { // 在新页面加载完成后，打开最后一张图片 setTimeout(() =\u0026gt; { const allImages = document.querySelectorAll(\u0026#39;.image-container img\u0026#39;); if (allImages.length \u0026gt; 0) { const lastIndex = allImages.length - 1; showImageViewer(allImages[lastIndex].src, lastIndex); } }, 100); }); } } else if (e.key === \u0026#39;ArrowDown\u0026#39;) { // 下一页 if (currentPage \u0026lt; totalPages) { closeImageViewer(); currentPage++; updateUrlWithPage(currentPage); loadPageImages().then(() =\u0026gt; { // 在新页面加载完成后，打开第一张图片 setTimeout(() =\u0026gt; { const allImages = document.querySelectorAll(\u0026#39;.image-container img\u0026#39;); if (allImages.length \u0026gt; 0) { showImageViewer(allImages[0].src, 0); } }, 100); }); } } } else { // 当图片查看器未打开时的键盘事件处理 if (e.key === \u0026#39;ArrowUp\u0026#39;) { // 上一页 if (currentPage \u0026gt; 1) { currentPage--; updateUrlWithPage(currentPage); loadPageImages(); } } else if (e.key === \u0026#39;ArrowDown\u0026#39;) { // 下一页 if (currentPage \u0026lt; totalPages) { currentPage++; updateUrlWithPage(currentPage); loadPageImages(); } } } }); // 修改关闭查看器的逻辑 function closeImageViewer() { imageViewer.classList.remove(\u0026#39;active\u0026#39;); setTimeout(() =\u0026gt; { viewerImage.src = \u0026#39;\u0026#39;; viewerImage.classList.remove(\u0026#39;loaded\u0026#39;); }, 500); } closeViewer.addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.stopPropagation(); closeImageViewer(); }); viewerImage.addEventListener(\u0026#39;click\u0026#39;, (e) =\u0026gt; { e.stopPropagation(); closeImageViewer(); }); imageViewer.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { closeImageViewer(); }); document.addEventListener(\u0026#39;keydown\u0026#39;, (e) =\u0026gt; { if (e.key === \u0026#39;Escape\u0026#39; \u0026amp;\u0026amp; imageViewer.classList.contains(\u0026#39;active\u0026#39;)) { closeImageViewer(); } }); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; nginx.conf\n# 在 server 块之前添加日志格式定义 log_format img_access \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#39; \u0026#39;\u0026#34;$request\u0026#34; $status $body_bytes_sent \u0026#39; \u0026#39;\u0026#34;$http_referer\u0026#34; \u0026#34;$http_user_agent\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_range\u0026#34; $request_time\u0026#39;; server { listen 80 ; listen [::]:80 ; listen 443 ssl http2 ; listen [::]:443 ssl http2 ; server_name img-deploy.1143520.xyz; index index.html index.php index.htm default.php default.htm default.html; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Real-IP $remote_addr; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; access_log /www/sites/img-deploy.1143520.xyz/log/access.log main; error_log /www/sites/img-deploy.1143520.xyz/log/error.log; location ^~ /.well-known/acme-challenge { allow all; root /usr/share/nginx/html; } root /www/sites/img-deploy.1143520.xyz/index; error_page 404 /404.html; if ($scheme = http) { return 301 https://$host$request_uri; } ssl_certificate /www/sites/img-deploy.1143520.xyz/ssl/fullchain.pem; ssl_certificate_key /www/sites/img-deploy.1143520.xyz/ssl/privkey.pem; ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1 TLSv1; ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:!aNULL:!eNULL:!EXPORT:!DSS:!DES:!RC4:!3DES:!MD5:!PSK:!KRB5:!SRP:!CAMELLIA:!SEED; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; error_page 497 https://$host$request_uri; proxy_set_header X-Forwarded-Proto https; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; # 图片目录配置 location /random/ { valid_referers none blocked server_names *.1143520.xyz; if ($invalid_referer) { return 301 /; } alias /www/sites/img-deploy.1143520.xyz/index/random/; autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8; add_header Access-Control-Allow-Origin \u0026#34;*\u0026#34;; types { image/jpeg jpg jpeg; image/png png; image/gif gif; image/webp webp; application/json json; } add_header Cache-Control \u0026#34;public, max-age=3600\u0026#34;; add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34;; access_log /www/sites/img-deploy.1143520.xyz/log/random_access.log img_access; } # 根路径配置 location = / { try_files /index.html =404; } # 添加对页码URL的支持（修复正则表达式） location ~ \u0026#34;^/[0-9]{3}$\u0026#34; { try_files /index.html =404; } location = /index.html { return 301 /; } location ~* \\.html$ { return 403; } } 图片位置 /random 每一个图片对应一个json文件（没有同名json也不影响）\njson文件是图片的链接集合\njson示例\n{ \u0026#34;meituan-api\u0026#34;: \u0026#34;https://img.meituan.net/video/e953cff3e704cf4c3fba3e6d5245204c246872.png\u0026#34;, \u0026#34;niubi\u0026#34;: \u0026#34;https://pic.rmb.bdstatic.com/bjh/3ed2c3ceb1c/241221/e953cff3e704cf4c3fba3e6d5245204c.png\u0026#34;, \u0026#34;tx\u0026#34;: \u0026#34;https://g.gtimg.cn/music/photo_new/T053XD01002eSyln2QiHl6.png\u0026#34;, } ","date":"2025-01-09T12:19:59+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/49980921_57339700.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%93/","title":"自建图库"},{"content":"修改机器码无限白嫖 点这里展开！ 项目地址 aigem/cursor-pro-trial: 安全又简便快捷地换标识码，for cursor pro trial。\nCursor 设备标识生成器 一个安全、简便、快捷的 Cursor Pro Trial 设备标识重置工具。\n功能特点 🔒 安全可靠：纯前端生成，无需后端服务 🚀 快速便捷：一键生成新的设备标识 💻 跨平台支持：Windows、macOS 和 Linux 使用步骤 退出cursor的登录账号，确保 Cursor 完全关闭（包括后台进程），一般关闭Cursor就可以了。 打开工具页面，点击\u0026quot;重新生成 ID\u0026quot;按钮。页面地址在这里,或看简介链接 根据您的操作系统，找到并打开对应的配置文件： Windows（win键+R，输入）: %APPDATA%\\Cursor\\User\\globalStorage\\storage.json macOS: ~/Library/Application Support/Cursor/User/globalStorage/storage.json Linux: ~/.config/Cursor/User/globalStorage/storage.json 将生成的三个标识码复制替换到配置文件中： telemetry.macMachineId telemetry.machineId telemetry.devDeviceId 保存文件 重新启动 Cursor 并登录 确保Cursor Pro Trial（pro测试） 账号正常，就可以正常使用了。 快速访问配置文件 Windows 按 Win + R 打开运行对话框 粘贴 %APPDATA%\\Cursor\\User\\globalStorage\\storage.json 点击确定 macOS 在 Finder 中按 Command + Shift + G 粘贴 ~/Library/Application Support/Cursor/User/globalStorage/storage.json 点击前往 Linux 直接在终端中使用编辑器打开：\nnano ~/.config/Cursor/User/globalStorage/storage.json 或 vim ~/.config/Cursor/User/globalStorage/storage.json 注意事项 ⚠️ 使用前请确保 Cursor 完全关闭 💾 建议在修改前备份原配置文件 🔄 如果修改后无效，请检查 Cursor 是否还在后台运行。 免责声明 本工具仅供学习和研究使用。使用本工具产生的任何问题和风险由使用者自行承担。cursor 是一个不错的编辑器，条件允许，请购买支持。\n网页生成机器码的逻辑\nindex.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Cursor 设备标识生成器\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { font-family: \u0026#34;PingFang SC\u0026#34;, \u0026#34;Microsoft YaHei\u0026#34;, Arial, sans-serif; margin: 0; padding: 0; background: linear-gradient(135deg, #1a1a1a 0%, #0f0f0f 100%); color: #d6d6dd; display: flex; justify-content: center; align-items: center; min-height: 100vh; overflow: hidden; flex-direction: column; } .container { background: rgba(44, 44, 44, 0.95); border-radius: 20px; padding: 20px; width: 85%; max-width: 800px; text-align: center; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.1); transition: transform 0.3s ease; } .container:hover { transform: translateY(-5px); } h1 { color: white; margin-bottom: 15px; font-size: 1.8em; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); background: linear-gradient(45deg, #fff, #d6d6dd); background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent; } sup { background: rgba(255, 255, 255, 0.1); padding: 6px 12px; border-radius: 6px; font-size: 0.9em; color: #aaa; display: inline-block; margin-bottom: 15px; } .json-block { background-color: rgba(30, 30, 30, 0.95); color: #d6d6dd; padding: 15px; border-radius: 10px; font-family: \u0026#34;Fira Code\u0026#34;, \u0026#34;Cascadia Code\u0026#34;, monospace; white-space: pre-wrap; word-wrap: break-word; margin: 15px 0; overflow-x: auto; max-width: 100%; text-align: left; border: 1px solid rgba(255, 255, 255, 0.1); box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2); } button { background: linear-gradient(45deg, #2ea043, #347d39); color: white; border: none; padding: 12px 30px; font-size: 16px; cursor: pointer; border-radius: 20px; transition: all 0.3s ease; margin: 15px 0; font-weight: 600; box-shadow: 0 4px 15px rgba(46, 160, 67, 0.2); } button:hover { background: linear-gradient(45deg, #3ab54d, #3b8b40); transform: translateY(-2px); box-shadow: 0 6px 20px rgba(46, 160, 67, 0.3); } button:active { transform: scale(0.95) translateY(0); } .important { color: #ffd700; font-weight: bold; background: rgba(255, 215, 0, 0.1); padding: 12px 15px; border-radius: 10px; margin: 15px 0; border: 1px solid rgba(255, 215, 0, 0.2); animation: pulse 2s infinite; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 rgba(255, 215, 0, 0.2); } 70% { box-shadow: 0 0 0 10px rgba(255, 215, 0, 0); } 100% { box-shadow: 0 0 0 0 rgba(255, 215, 0, 0); } } .tip { background: rgba(255, 255, 255, 0.05); padding: 15px; border-radius: 10px; margin: 15px 0; border: 1px solid rgba(255, 255, 255, 0.1); } .tip p { margin: 8px 0; } .tip code, .tip .path { background: rgba(0, 0, 0, 0.3); padding: 5px 10px; border-radius: 6px; font-family: \u0026#34;Fira Code\u0026#34;, \u0026#34;Cascadia Code\u0026#34;, monospace; color: #f0f0f0; border: 1px solid rgba(255, 255, 255, 0.1); } .github-btn { display: inline-flex; align-items: center; background: linear-gradient(45deg, #333, #444); color: #fff; padding: 10px 20px; border-radius: 20px; text-decoration: none; font-size: 16px; transition: all 0.3s ease; margin-top: 15px; border: 1px solid rgba(255, 255, 255, 0.1); } .github-btn:hover { background: linear-gradient(45deg, #444, #555); transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } .github-btn:active { transform: scale(0.95); } .github-btn img { width: 24px; margin-right: 12px; border-radius: 50%; filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2)); } a { color: #7ee787; text-decoration: none; transition: all 0.3s ease; padding: 2px 6px; border-radius: 4px; } a:hover { color: #2ea043; background: rgba(126, 231, 135, 0.1); } .important a { color: #ffd700; font-weight: bold; } .important a:hover { background: rgba(255, 215, 0, 0.15); color: #ffed4a; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;手动替换Cursor设备 ID\u0026lt;/h1\u0026gt; \u0026lt;sup\u0026gt; C:\\Users\\[用户]\\AppData\\Roaming\\Cursor\\User\\globalStorage\\storage.json \u0026lt;a href=\u0026#34;https://www.bilibili.com/video/BV1H3ktYtEUy/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;视频教程\u0026lt;/a\u0026gt; \u0026lt;/sup\u0026gt; \u0026lt;div class=\u0026#34;json-block\u0026#34; id=\u0026#34;json-block\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;button id=\u0026#34;regenerate-btn\u0026#34;\u0026gt;重新生成 ID\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;tip\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;strong\u0026gt;提示：\u0026lt;/strong\u0026gt; 你可以通过按 \u0026lt;strong\u0026gt;WIN + R\u0026lt;/strong\u0026gt; 并粘贴以下路径来快速打开 \u0026lt;code class=\u0026#34;path\u0026#34;\u0026gt;%APPDATA%\\Cursor\\User\\globalStorage\\storage.json\u0026lt;/code\u0026gt; 文件。 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; mac、linux 用户使用方法请看github说明 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;important\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.bilibili.com/video/BV1H3ktYtEUy/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;[视频教程]\u0026lt;/a\u0026gt; 在运行脚本之前，你必须先退出并完全关闭 Cursor。 否则它可能会恢复到之前的设备 ID，使重置无效。 \u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;https://github.com/aigem/cursor-pro-trial\u0026#34; class=\u0026#34;github-btn\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\u0026#34; alt=\u0026#34;GitHub\u0026#34; /\u0026gt; 在 GitHub 上查看(点个星星呗) \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function getRandHex() { let array = new Uint8Array(32); window.crypto.getRandomValues(array); return Array.from(array) .map((byte) =\u0026gt; byte.toString(16).padStart(2, \u0026#34;0\u0026#34;)) .join(\u0026#34;\u0026#34;); } function getGuid() { return \u0026#34;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\u0026#34;.replace( /[xy]/g, function (c) { let r = (Math.random() * 16) | 0; let v = c === \u0026#34;x\u0026#34; ? r : (r \u0026amp; 0x3) | 0x8; return v.toString(16); } ); } function regenerateJSON() { const jsonStructure = { \u0026#34;telemetry.macMachineId\u0026#34;: getRandHex(), \u0026#34;telemetry.machineId\u0026#34;: getRandHex(), \u0026#34;telemetry.devDeviceId\u0026#34;: getGuid(), }; const jsonBlock = document.getElementById(\u0026#34;json-block\u0026#34;); jsonBlock.textContent = JSON.stringify(jsonStructure, null, 4); } document .getElementById(\u0026#34;regenerate-btn\u0026#34;) .addEventListener(\u0026#34;click\u0026#34;, regenerateJSON); regenerateJSON(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用破解工具 理论上是8人共享pro账号\n项目地址\nrelease下载exe点击使用\n或者下面这个\nchengazhen/cursor-auto-free: auto sign cursor\n淘宝购买 淘宝15元一个月，和上面差不多，不过是3人共享（商家说辞）\n使用一段时间了，agent时常断联，要么商家的号有鬼，要么邻居做了其他交易导致滥用，只能正常使用normal，体验并不好，还是推荐第二种方式\n","date":"2025-01-08T23:07:56+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20250109/85773959_11114400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/cursor%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88/","title":"cursor使用方案"},{"content":"拉取仓库 git clone https://github.com/1143520/fuwari.git 安装 Node.js https://nodejs.org/\n安装依赖（管理员CMD） npm install -g pnpm 然后\nD: cd D:\\code\\astro-fuwari\\fuwari pnpm install 本地预览 pnpm dev 项目地址\n上传仓库自动构建和vercel部署 首先排除依赖文件夹node_modules（太大），可以剪切或者ignore\n上传之后\n自动构建fuwari\\.github\\workflows\\deploy.yml\nname: Deploy to GitHub Pages on: push: branches: [main] workflow_dispatch: permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false jobs: build: runs-on: ubuntu-latest steps: - name: Checkout your repository using git uses: actions/checkout@v4 - name: Setup pnpm uses: pnpm/action-setup@v2 with: version: 8 - name: Setup Node.js uses: actions/setup-node@v3 with: node-version: 18 cache: \u0026#34;pnpm\u0026#34; - name: Get pnpm store directory shell: bash run: | echo \u0026#34;STORE_PATH=$(pnpm store path --silent)\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV - name: Setup pnpm cache uses: actions/cache@v3 with: path: ${{ env.STORE_PATH }} key: ${{ runner.os }}-pnpm-store-${{ hashFiles(\u0026#39;**/pnpm-lock.yaml\u0026#39;) }} restore-keys: | ${{ runner.os }}-pnpm-store- - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Install dependencies run: pnpm install - name: Build site run: pnpm build - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: name: github-pages path: dist deploy: needs: build runs-on: ubuntu-latest environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 设置多个域名（vercel部署需要）\nfuwari\\astro.config.mjs\nimport sitemap from \u0026#34;@astrojs/sitemap\u0026#34;; import svelte from \u0026#34;@astrojs/svelte\u0026#34;; import tailwind from \u0026#34;@astrojs/tailwind\u0026#34;; import swup from \u0026#34;@swup/astro\u0026#34;; import Compress from \u0026#34;astro-compress\u0026#34;; import icon from \u0026#34;astro-icon\u0026#34;; import { defineConfig } from \u0026#34;astro/config\u0026#34;; import rehypeAutolinkHeadings from \u0026#34;rehype-autolink-headings\u0026#34;; import rehypeComponents from \u0026#34;rehype-components\u0026#34;; /* Render the custom directive content */ import rehypeKatex from \u0026#34;rehype-katex\u0026#34;; import rehypeSlug from \u0026#34;rehype-slug\u0026#34;; import remarkDirective from \u0026#34;remark-directive\u0026#34;; /* Handle directives */ import remarkGithubAdmonitionsToDirectives from \u0026#34;remark-github-admonitions-to-directives\u0026#34;; import remarkMath from \u0026#34;remark-math\u0026#34;; import remarkSectionize from \u0026#34;remark-sectionize\u0026#34;; import { AdmonitionComponent } from \u0026#34;./src/plugins/rehype-component-admonition.mjs\u0026#34;; import { GithubCardComponent } from \u0026#34;./src/plugins/rehype-component-github-card.mjs\u0026#34;; import { parseDirectiveNode } from \u0026#34;./src/plugins/remark-directive-rehype.js\u0026#34;; import { remarkExcerpt } from \u0026#34;./src/plugins/remark-excerpt.js\u0026#34;; import { remarkReadingTime } from \u0026#34;./src/plugins/remark-reading-time.mjs\u0026#34;; const isVercel = process.env.VERCEL === \u0026#34;1\u0026#34;; // https://astro.build/config export default defineConfig({ site: isVercel ? \u0026#34;https://astro.aliya.news\u0026#34; : \u0026#34;https://aliya.1143520.xyz\u0026#34;, base: isVercel ? \u0026#34;/\u0026#34; : \u0026#34;/astro-blog\u0026#34;, trailingSlash: \u0026#34;always\u0026#34;, integrations: [ tailwind( { nesting: true, } ), swup({ theme: false, animationClass: \u0026#34;transition-swup-\u0026#34;, // see https://swup.js.org/options/#animationselector // the default value `transition-` cause transition delay // when the Tailwind class `transition-all` is used containers: [\u0026#34;main\u0026#34;, \u0026#34;#toc\u0026#34;], smoothScrolling: true, cache: true, preload: true, accessibility: true, updateHead: true, updateBodyClass: false, globalInstance: true, }), icon({ include: { \u0026#34;preprocess: vitePreprocess(),\u0026#34;: [\u0026#34;*\u0026#34;], \u0026#34;fa6-brands\u0026#34;: [\u0026#34;*\u0026#34;], \u0026#34;fa6-regular\u0026#34;: [\u0026#34;*\u0026#34;], \u0026#34;fa6-solid\u0026#34;: [\u0026#34;*\u0026#34;], }, }), svelte(), sitemap(), Compress({ CSS: false, Image: false, Action: { Passed: async () =\u0026gt; true, // https://github.com/PlayForm/Compress/issues/376 }, }), ], markdown: { remarkPlugins: [ remarkMath, remarkReadingTime, remarkExcerpt, remarkGithubAdmonitionsToDirectives, remarkDirective, remarkSectionize, parseDirectiveNode, ], rehypePlugins: [ rehypeKatex, rehypeSlug, [ rehypeComponents, { components: { github: GithubCardComponent, note: (x, y) =\u0026gt; AdmonitionComponent(x, y, \u0026#34;note\u0026#34;), tip: (x, y) =\u0026gt; AdmonitionComponent(x, y, \u0026#34;tip\u0026#34;), important: (x, y) =\u0026gt; AdmonitionComponent(x, y, \u0026#34;important\u0026#34;), caution: (x, y) =\u0026gt; AdmonitionComponent(x, y, \u0026#34;caution\u0026#34;), warning: (x, y) =\u0026gt; AdmonitionComponent(x, y, \u0026#34;warning\u0026#34;), }, }, ], [ rehypeAutolinkHeadings, { behavior: \u0026#34;append\u0026#34;, properties: { className: [\u0026#34;anchor\u0026#34;], }, content: { type: \u0026#34;element\u0026#34;, tagName: \u0026#34;span\u0026#34;, properties: { className: [\u0026#34;anchor-icon\u0026#34;], \u0026#34;data-pagefind-ignore\u0026#34;: true, }, children: [ { type: \u0026#34;text\u0026#34;, value: \u0026#34;#\u0026#34;, }, ], }, }, ], ], }, vite: { build: { rollupOptions: { onwarn(warning, warn) { // temporarily suppress this warning if ( warning.message.includes(\u0026#34;is dynamically imported by\u0026#34;) \u0026amp;\u0026amp; warning.message.includes(\u0026#34;but also statically imported by\u0026#34;) ) { return; } warn(warning); }, }, }, }, }); 成品预览 vercel地址\nGitHub pages地址\n","date":"2025-01-08T21:26:21+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/08838862_16139700.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Eastro%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/","title":"搭建基于astro的静态博客"},{"content":" 转发自【统计】免费域名/低价域名注册续费统计\n注：本帖只分析能支持添加到CF的域名\n目前本人在用域名统计 注册地 址链接 注册/续费价格 评价 备注 .eu.org 链接点这里 免费 曾经免费域名里的王者，稳定免费而且不需要每年续期，不过已经有一年没审批新域名了，想注册也注册不了。自从我自己的几个eu.org被盗滞后，我已经放弃这个域名了。 无法注册，只能私下购买。 .pp.ua 链接点这里 免费 免费的乌克兰域名，也是免费域名里比较出名的。相比于eu.org来说注册需要绑卡就劝退一大波人，然后每年需要通过tg续期激活一次，whois信息是公开的。有些人还是接受不了。域名好记，能免费就很不错了。不过乌克兰正处于战争之中，这个域名还能不能稳定也不好说。 注册绑卡，一年一续 .free.hr 链接点这里 2元/年 一个突然火起来又突然泯于众人的免费域名，互联网的免费分享精神被15K这样的人给玷污了。免费域名变成了收费域名，目前此域名在hz.cz及subreg.cz上注册及续费金额调整成30元/年，估计99%的人都不想续费了。需要注册及续费的朋友可以联系我，2元/个。注册及续费通道就不公开了。 到期前60天内才能续费 .xyz 链接点这里 4.7元/年 spaceship6位数字以上.xyz还是很便宜的，这个域名也绝对是大家选择低价收费域名的第一选择，但是注册了太多了，好看好记的数字组合很难注册到了，要不然就不好记。 便宜，但是域名不好记 .best 链接点这里 10.87元/年 spaceship6位数字以上.best新推出的较为便宜的域名，虽然比6位数.xyz贵一些，但是目前来说有很多好记的数字可以注册。大家可以考虑。 比6位数.xyz贵一倍，好记的数字还很多。 .de 链接点这里 10.32元/年 买.de域名最便宜的途径就是netcup每个月最后一个星期二做活动的时候了，但是netcup免税账号注册稍微麻烦一些。而且得先下单才能注册账号。门槛稍微高一些。需要的朋友可以去研究一下。 最便宜的国别域名 .i.ng 链接点这里 11.68元/年（含7.5%税） 同类型的还有: com.ng 11.68元/年； net.ng 6.2元/年；name.ng 6.2元/年；mobi.ng 6.2元/年等 尼日利亚域名，没有隐私保护 .ru 链接点这里 14.43元/年 除了.de域名之外，最好注册且最便宜的一级国别域名就是这个。如果需要支付宝付款的话，可以在https://regery.com 里注册，首年价格为2美元（￥14.16元），续费价格3.69美元/年（￥26.25元/年）。之前看reg.ru上首年注册119卢布（8.8元），续费199卢布（14.73元），试了用信用卡支付，没成功。而且续费价格也不是最便宜的。不建议去reg.ru上买ru域名 注册方便，可通过paypal支付 .top 链接点这里 28.26元/年 spaceship的top域名还是挺便宜的，也是我买的第一个收费域名，不考虑xyz和best数字域名的情况下，top域名算是比较便宜且好记的域名了，很多人都愿意选择他。但是目前该域名为国内江苏某企业负责运营，比那些国家注册局运营的域名，在稳定性上可能不那么让人放心。 top域名目前为江苏某企业运营 .su 链接点这里 29.94元/年 苏联域名，虽然说苏联不在了，但是这个还是可以注册的，目前还有大量好记的域名可以注册 注册方便，可通过paypal支付 .com 链接点这里 69.5元/年 目前注册.com最便的已经是cloudflare了,有朋友说spaceship上首单价格最低，用优惠码可以打个将近3折，也可以后期转走。我之前用cosmotown.com注册com域名算是最便宜的，不过最近他们涨价了，也就没啥优势了。 spaceship优惠码：compros 未注册过的域名 注册地址链接 注册/续费价格 评价 备注 us.kg 链接点这里 免费 好像是一个国外学生进行维护的域名，注册需要验证KYC。刚去试了注册一下，说是US.KG 域名被用于对一家银行的攻击，现在暂停注册了。除非捐赠1美元。相当于花钱买域名了，1美元买3个。个人感觉如果花钱去买私人维护的免费域名，还是要慎重。 提前180天续期 nom.za 链接点这里 免费 南非域名，域名申请是人工审核，通不通过看运气，反正我的申请被拒绝了。限制1人只能注册一个。说是长时间不用会被收回，也不知道是怎么审查的，可能是没建站吧。注册通过难度全凭运气，随缘了。有毅力的可以试试。 南非免费域名 id.lv 链接点这里 免费 拉脱维亚共和国国家域名，需要拉脱维亚个人信息才能注册。一般人也搞不到这些信息。 拉脱维亚免费域名 nyc.mn 链接点这里 免费 针对个人和企业的纽约市相关免费域名，只有纽约IP才能注册，目前滥用太多，审核可能会更加困难了。 .mn为蒙古域名，蒙古那可是美国的小弟。 obl.ong 链接点这里 免费 目前管网已经打不开了。之前注册了一个，一直在审核中，没想到就这么没了。 也是个人维护的免费域名 .feedback 链接点这里 5.88元/年 可以注册4位数及以上的域名，3位数之前的都是溢价域名。下单容易触发反欺诈系统，要求验证身份信息。有点麻烦 \u0026mdash; ggff.net 链接点这里 9.66元/年 原来免费注册的，现在改成收费的，感觉也不是很好看的域名。该网站同时还可以注册filegear-sg.me二级域名，完全看不上眼。有这钱买啥不香。输入优惠码newuser，可以免费1年。 不推荐 com.es 链接点这里 12.44元/年 同类型的还有.nom.es，价格为1.61欧元/年 \u0026ndash; 后面有时间会把那些没用过的但是也比较有名的免费或低价域名也统计一下，做个分类。有用过其他免费或低价域名的朋友，也可以留言写下心得，我汇总到一起方便大家查阅。\n","date":"2025-01-07T22:59:57+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/45726312_54063400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E4%B8%8E%E4%BD%8E%E4%BB%B7%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E7%BB%AD%E8%B4%B9%E7%BB%9F%E8%AE%A1/","title":"免费域名与低价域名注册续费统计"},{"content":"原帖地址 实践教学 - 用Fastly CDN加速静态网站\n文章地址 实践教学 - 用Fastly CDN加速静态网站 - Microcharon\n","date":"2025-01-07T19:40:40+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/95143892_27717200.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E7%94%A8fastly-cdn%E5%8A%A0%E9%80%9F%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/","title":"用Fastly CDN加速静态网站"},{"content":"直接复制执行 #!/bin/bash echo root:Passwd |sudo chpasswd root sudo sed -i \u0026#39;s/^#\\?PermitRootLogin.*/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config; sudo sed -i \u0026#39;s/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g\u0026#39; /etc/ssh/sshd_config; sudo reboot 更详细的步骤： 获取权限 sudo -i 然后编辑 nano /etc/ssh/sshd_config 查找 PermitRootLogin prohibit-password （可能在注释里面）改成 PermitRootLogin yes\n查找 PasswordAuthentication no 改成 PasswordAuthentication yes\nCTRL + O 然后 ENTER 保存\nnano /etc/ssh/sshd_config.d/* 修改或者添加 PasswordAuthentication no 改成 PasswordAuthentication yes\nservice sshd restart 添加密码 passwd 添加密码之后，删除key（注意备份），reboot之后使用root和密码登录\n","date":"2025-01-07T13:09:55+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/46380005_53725300.jpg","permalink":"https://note.zhongyangblog.eu.org/p/aws%E7%9A%84lightsail%E5%BC%80%E5%90%AFroot%E7%99%BB%E5%BD%95%E7%9A%84%E8%84%9A%E6%9C%AC/","title":"AWS的Lightsail开启Root登录的脚本"},{"content":"前言 ​\t修改位置themes/hugo-magic/layouts/partials/footer/components/script.html，这是网站加载脚本的主要位置\n效果：\n正文 新春灯笼 \u0026lt;script src=\u0026#34;https://api.vvhan.com/api/script/denglong\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 新春梅花 \u0026lt;script src=\u0026#34;https://api.vvhan.com/api/script/meihua\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 新春雪花 \u0026lt;script src=\u0026#34;https://api.vvhan.com/api/script/snow\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 新春樱花 \u0026lt;script src=\u0026#34;https://api.vvhan.com/api/script/yinghua\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2023-09-12 14:45\u0026nbsp;\u0026nbsp;\u0026nbsp;Alice 转载自 https://www.kejiland.com/post/f38297a8.html 大佬的免费API接口 https://api.vvhan.com/ 骤雨重山 - 不曾与你分享的时间,我在进步.\n上传到自己的仓库 访问\nhttps://api.vvhan.com/api/script/denglong 创建denglong.js\n写入访问得到的内容\n然后在其他地方使用raw或者jsd cdn访问\n例如\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/1143520/guajian@main/xinnian/denglong.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ","date":"2025-01-04T23:53:58+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/22654222_83605900.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E7%BB%99%E7%BD%91%E7%AB%99%E5%A2%9E%E5%8A%A0%E6%96%B0%E6%98%A5%E6%8C%82%E4%BB%B6/","title":"给网站增加新春挂件"},{"content":"前言 ​\t回到老家之后路上访问个人主页一直显示”获取天气失败“这也是大多数人使用无名大佬的主页，我的办法虽然不是完美，但是至少不会报错了。\n正文 ​\t经过我的测试，可能是地方宽带的问题\n测试 访问（替换成你自己的高德应用key）（是Web服务 Key不是Web端 (JS API)）\nhttps://restapi.amap.com/v3/ip?key=VITE_WEATHER_KEY 如果出现\n{ \u0026#34;status\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;info\u0026#34;: \u0026#34;OK\u0026#34;, \u0026#34;infocode\u0026#34;: \u0026#34;10000\u0026#34;, \u0026#34;province\u0026#34;: [], \u0026#34;city\u0026#34;: [], \u0026#34;adcode\u0026#34;: [], \u0026#34;rectangle\u0026#34;: [] } 说明key依然有效，但是无法定位，所以返回了空数组\n此时尝试使用个人手机卡流量访问，就会出现地址信息\n解决办法 ​\t既然是高德的问题（毕竟高德是手机app，也没web服务），那么为了防止报错，我直接使用北京的地址作为默认信息，当获取到空数组的时候，就直接使用api获取北京的天气作为退级方案，不至于报错\n​\t修改地址src\\components\\Weather.vue\n代码参考\n\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;weather\u0026#34; v-if=\u0026#34;weatherData.adCode.city \u0026amp;\u0026amp; weatherData.weather.weather\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ weatherData.adCode.city }}\u0026amp;nbsp;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{ weatherData.weather.weather }}\u0026amp;nbsp;\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{ weatherData.weather.temperature }}℃\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;sm-hidden\u0026#34;\u0026gt; \u0026amp;nbsp;{{ weatherData.weather.winddirection?.endsWith(\u0026#34;风\u0026#34;) ? weatherData.weather.winddirection : weatherData.weather.winddirection + \u0026#34;风\u0026#34; }}\u0026amp;nbsp; \u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;sm-hidden\u0026#34;\u0026gt;{{ weatherData.weather.windpower }}\u0026amp;nbsp;级\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;weather\u0026#34; v-else\u0026gt; \u0026lt;span\u0026gt;天气数据获取失败\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { getAdcode, getWeather, getOtherWeather } from \u0026#34;@/api\u0026#34;; import { Error } from \u0026#34;@icon-park/vue-next\u0026#34;; // 高德开发者 Key const mainKey = import.meta.env.VITE_WEATHER_KEY; // 天气数据 const weatherData = reactive({ adCode: { city: null, // 城市 adcode: null, // 城市编码 }, weather: { weather: null, // 天气现象 temperature: null, // 实时气温 winddirection: null, // 风向描述 windpower: null, // 风力级别 }, }); // 取出天气平均值 const getTemperature = (min, max) =\u0026gt; { try { // 计算平均值并四舍五入 const average = (Number(min) + Number(max)) / 2; return Math.round(average); } catch (error) { console.error(\u0026#34;计算温度出现错误：\u0026#34;, error); return \u0026#34;NaN\u0026#34;; } }; // 获取天气数据 const getWeatherData = async () =\u0026gt; { try { // 获取地理位置信息 if (!mainKey) { console.log(\u0026#34;未配置，使用备用天气接口\u0026#34;); const result = await getOtherWeather(); console.log(result); const data = result.result; weatherData.adCode = { city: data.city.City || \u0026#34;未知地区\u0026#34;, // adcode: data.city.cityId, }; weatherData.weather = { weather: data.condition.day_weather, temperature: getTemperature(data.condition.min_degree, data.condition.max_degree), winddirection: data.condition.day_wind_direction, windpower: data.condition.day_wind_power, }; } else { // 获取 Adcode const adCode = await getAdcode(mainKey); console.log(\u0026#34;地理位置响应:\u0026#34;, adCode); if (adCode.infocode !== \u0026#34;10000\u0026#34;) { throw new Error(`地区查询失败: ${adCode.info}`); } // 如果返回空数组，使用默认的北京海淀区 if (!adCode.city || adCode.city.length === 0) { weatherData.adCode = { city: \u0026#34;北京市\u0026#34;, adcode: \u0026#34;110108\u0026#34; // 北京市海淀区的 adcode }; } else { weatherData.adCode = { city: adCode.city, adcode: adCode.adcode, }; } // 获取天气信息 const result = await getWeather(mainKey, weatherData.adCode.adcode); console.log(\u0026#34;天气信息响应:\u0026#34;, result); if (result.infocode !== \u0026#34;10000\u0026#34;) { throw new Error(`天气查询失败: ${result.info}`); } if (!result.lives || result.lives.length === 0) { throw new Error(\u0026#34;未获取到天气数据\u0026#34;); } weatherData.weather = { weather: result.lives[0].weather, temperature: result.lives[0].temperature, winddirection: result.lives[0].winddirection, windpower: result.lives[0].windpower, }; } } catch (error) { console.error(\u0026#34;天气信息获取失败:\u0026#34;, error); onError(`天气信息获取失败: ${error.message}`); } }; // 报错信息 const onError = (message) =\u0026gt; { ElMessage({ message, icon: h(Error, { theme: \u0026#34;filled\u0026#34;, fill: \u0026#34;#efefef\u0026#34;, }), }); console.error(message); }; onMounted(() =\u0026gt; { // 调用获取天气 getWeatherData(); }); \u0026lt;/script\u0026gt; ","date":"2025-01-04T18:21:50+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/58309126_33606800.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E4%BF%AE%E5%A4%8D%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E8%8E%B7%E5%8F%96%E5%A4%A9%E6%B0%94%E5%A4%B1%E8%B4%A5/","title":"修复个人主页获取天气失败"},{"content":"前言 ​\t最近发现edge地址栏搜索结果变得很少，稍微复杂一点的关键词就啥也搜不到，一直以为是自己的设置太严格，结果今天关掉代理，一下子就恢复正常了，估计是代理的分流抽风了\n正文 ​\t解决办法也很简单，直接把cn.bing.com放直连列表里面，覆盖一下原来的规则就可以了\n可以恢复大部分结果，剩下一小撮还没排查出来\n","date":"2025-01-03T22:17:18+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/37929328_71382300.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E4%BB%A3%E7%90%86%E4%B9%8B%E5%90%8Ebing%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%8F%98%E5%B0%91/","title":"代理之后Bing搜索结果变少"},{"content":"到家了 群峰之间，烟雨如丝，虽没有天堂的赞誉，却是我的梦中江南。\n","date":"2025-01-02T22:11:19+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/63095946_12171000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E7%83%9F%E9%9B%A8%E6%9C%A6%E8%83%A7/","title":"烟雨朦胧"},{"content":"放寒假啦 ​\t这个寒假必定好好努力，直接逆袭减肥，等我变帅！\n[拍的不咋滴]\n","date":"2025-01-01T23:05:42+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/12697660_77376100.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%94%BE%E5%81%87%E5%9B%9E%E5%AE%B6/","title":"放假回家"},{"content":"前言 ​\t2024年已经悄然逝去了，无论过往满意与否，逝者不可追，原来年诸事顺遂，百邪退避\n正文 ​\t我的1ip博客也不知道有没有人看，虽然也就是一些没啥营养的小教程，但是也算自己在互联网的一片栖身之所，在自己的一亩三分地上，只是想记录一些日常折腾和发表一些个人看法，如果你有关注到这篇博客，可以在评论区留下你的痕迹吗？\n​\t2025新年快乐！\n​\t【借用一下去年的图】\n","date":"2025-01-01T09:10:13+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/20386891_49749200.jpg","permalink":"https://note.zhongyangblog.eu.org/p/2025%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/","title":"2025新年快乐"},{"content":"前言 ​\t在论坛经常看到一些心动的配置，但是卖家说的有时候没有商家清晰，直接找到官网不是更好？\n正文 ​\t下面的表格是论坛大佬整理好的，我这算是3次引用了，原帖\nIDC 别称 官网链接（无 AFF） 频道链接 群组链接 云上互联 （伪）家宽NAT，LXC，一般，不如7li 官网 - - AaITR 家宽NAT 30/月起步 官网 - - LegendVPS 新商家，伪家宽落地便宜（不如L站7li） 官网 - - Claw 爪云，小阿里(TCP优化导致v6丢失) 官网 - - 哪吒 哪吒转发iepl，家宽nat 官网 - - RFC 花卷云 官网 - - mikyhost 印尼猴，aws分销，选购需细心，只有工单，没有控制台 官网 - - halo 香港单家宽0.75 官网 国内站点 - 乔星欢 - 官网 - - Acck - 官网 频道 群组 Advin - 官网 - - AKILE AK 官网 频道 群组 Akkocloud Akko 官网 频道 群组 Alice Networks Alice 官网 频道 群组 Anyhk - 官网 频道 群组 Apper - 官网 频道 群组 ASVM - 官网 频道 群组 BanwagonHost 搬瓦工 官网 - 群组 BageVM 巴哥 官网 频道 群组 BatVM - 官网 - 群组 BestVM 富婆 官网 频道 群组 ByteVirt BV、老布 官网 频道 群组 Churros 鸽子云 官网 频道 - CloudCone CC 官网 - - Cloudnium - 官网 频道 群组 CoalCloud 碳云、炭云、煤老板 官网 频道 - CloudSilk 白丝云 官网 频道 群组 ColoCrossing CCS 官网 - 群组 Crunchbits - 官网 - - CubeCloud 魔方云 官网 频道 群组 DIGITALVIRT DV 官网 频道 群组 DMIT 大妈 官网 频道 频道 En - Dogyun 狗云 官网 频道 群组 Dotdotnetwork - 官网 频道 - Ducky Cloud DCI、鸭云 官网 频道 群组 DuoDuoCloud DuoCloud 官网 - 群组 Evoxt - 官网 频道 - EZNode - 官网 - - GigsGigsCloud - 官网 频道 群组 GlobalVM - 官网 频道 群组 GreenCloud 绿云 官网 - - HaloCloud - 官网 频道 群组 Haruka Network Haruka 官网 频道 群组 HETZNER HZ 官网 - - Hmbcloud 半月湾 官网 频道 - Homura Network - 官网 频道 群组 Hoyoverse Network MHYIDC 官网 频道 群组 HyperNAT - 官网 频道 群组 HYTRON NETWORK Hytron、海创 官网 频道 群组 IPRaft - 官网 频道 - Kagari Networks 灯火云 官网 频道 群组 KURUNCLOUD Kurun 官网 频道 - Lamhosting - 官网 频道 群组 LightCVM - 官网 频道 群组 Linveo - 官网 - - Lisahost 丽萨主机 官网 频道 群组 MerhabaInternet - 官网 - - MiaoMiao.Moe 喵云 官网 频道 群组 Miku Network Miku 官网 频道 群组 Mkcloud - 官网 频道 群组 Misaka - 官网 - - Nathost 酷雪云 官网 频道 群组 NATSeek - 官网 频道 群组 Netcup NC 官网 - - Nube Cloud 牛彼云 官网 频道 群组 Ocent 武汉很大科技、AK 国内站 官网 频道 群组（无链接） Pasyun 帕斯云 官网 频道 群组 PoloCloud 菠萝云 官网 频道 - PQS 彼得巧 官网 频道 群组 RackNerd RN 官网 - 频道 RadoNet - 官网 频道 - SakuraClouds - 官网 频道 群组 SaltyFishIO 咸鱼云 官网 频道 - SharonNetworks Sharon、傻龙、傻荣 官网 - 群组 SiliCloud - 官网 频道 群组 群组(En) SOSOSO - 官网 频道 群组 SpartanHost - 官网 - - Technovm - 官网 频道 群组 V.PS 小秘书 官网 频道 - VisionCloudCompute VisionCloud 官网 频道 群组 VKVM - 官网 频道 群组 VMISS - 官网 频道 群组 VMOcean - 官网 - 群组 VmShell - 官网 频道 群组 VoLLcloud Voll 官网 频道 群组 Wap 总奸 官网 频道 群组 Wawo 哇沃 官网 频道 群组 WePC 车库云 官网 频道 群组 Wikihost 微基主机、鸡总 官网 频道 群组 YxVM - 官网 频道 群组 ZgoCloud Zgo 官网 频道 - Zlidc - 官网 频道 - 艾云 - 官网 频道 群组 厨神 IDC - 官网 - 群组 快车道 - 官网 频道 群组 六六云 - 官网 频道 群组 喵云互联 - 官网 频道 群组 无忧云 - 官网 频道 群组 物语云 - 官网 - 群组 虚妄猫 小埋、埋家、大屌埋 官网 频道 群组 烟火云 - 官网 频道 - 野草云 - 官网 - - ","date":"2024-12-31T12:48:04+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/52848704_26993900.jpg","permalink":"https://note.zhongyangblog.eu.org/p/vps%E5%95%86%E5%AE%B6%E9%9B%86%E5%90%88/","title":"VPS商家集合"},{"content":"前言 ​\t很早以前就转到spotify了，简洁明了，没有乱七八糟的版权和各种小横幅，比QQ网易不知道好到那去了，本来支持了一年的家庭组，后面发现可以白嫖之后就没继续了，安装端有xmanger 最近使用电脑频率比较高，于是搜索了一下，发现PC端也有相似的白嫖方式，那就是Spicetify\n正文 ​\t直接复制找到的教程吧，懒得码字了，最好没有下载过spotify或者卸载，因为命令会自动下载和更新最新版本的spotify，都是官方版本修改的\nWindows - powershell iwr -useb https://raw.githubusercontent.com/spicetify/cli/main/install.ps1 | iex iwr -useb https://raw.githubusercontent.com/spicetify/marketplace/main/resources/install.ps1 | iex 执行上面的命令，后面的就慢慢琢磨喽，原文地址\n修改效果 使用的主题是Comfy，感觉比较轻量美观\n去广告 目前使用的是开源项目SpotX-Official\n项目下面有安装方法\n一键命令：\niex \u0026#34;\u0026amp; { $(iwr -useb \u0026#39;https://raw.githubusercontent.com/SpotX-Official/spotx-official.github.io/main/run.ps1\u0026#39;) } -new_theme\u0026#34; 一样是powershell执行\n除了这个也可以在上面安装的marketplace找一下ad相关的插件\n2024-12-30\u0026nbsp;\u0026nbsp;\u0026nbsp;Aliya 等以后赚钱了，一定要搞一个自己的音乐nas，不再受制于人【\u003e\u003c】 ","date":"2024-12-30T20:22:07+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/60861372_64646500.jpg","permalink":"https://note.zhongyangblog.eu.org/p/pc%E7%89%88spotify%E8%A7%A3%E9%94%81%E7%BE%8E%E5%8C%96/","title":"PC版Spotify解锁美化"},{"content":"前言 ​\t修改一些样式符合个人习惯，看着顺眼一点，记录一下\n正文 twikoo评论区管理密码位于vercel环境变量 目录滚动条宽度 修改位置\nthemes\\hugo-magic\\assets\\scss\\custom.scss 添加代码对滚动条样式生效（窄一些舒服点）\n// 自定义目录滚动条样式 #TableOfContents { scrollbar-width: none; scrollbar-color: var(--scrollbar-thumb) transparent; } // 自定义相关文章滚动条样式 .related-content { scrollbar-width: thin; scrollbar-color: var(--scrollbar-thumb) transparent; } // 全局滚动条样式 * { scrollbar-width: thin; // 设置滚动条为细样式 scrollbar-color: #888 transparent; // 设置滚动条颜色和轨道颜色 } 全局字体大小 修改位置\nthemes\\hugo-magic\\assets\\scss\\custom.scss 1.8rem最佳\n// 字体显示策略 @font-face { font-family: \u0026#39;LXGW WenKai\u0026#39;; font-display: swap; } @font-face { font-family: \u0026#39;HarmonyOS_Regular\u0026#39;; font-display: swap; } // 页面基本配色 :root { // 全局顶部边距 --main-top-padding: 30px; // 全局卡片圆角 --card-border-radius: 15px; // 标签云卡片圆角 --tag-border-radius: 8px; // 卡片间距 --section-separation: 33px; // 全局字体大小 --article-font-size: 1.8rem; // 行内代码背景色 --code-background-color: #f8f8f8; // 行内代码前景色 --code-text-color: #e96900; // 代码字体 --code-font-family: Menlo, Monaco, Consolas, \u0026#34;Courier New\u0026#34;, monospace; // 暗色模式下样式 \u0026amp;[data-scheme=\u0026#34;dark\u0026#34;] { // 行内代码背景色 --code-background-color: #ff6d1b17; // 行内代码前景色 --code-text-color: #e96900; } } 目录样式微调 ​\t原始的目录样式左右内边距不统一，子级目录的缩进导致看着怪怪的，所以需要调整一下\n代码位置themes\\hugo-magic\\assets\\scss\\partials\\layout\\article.scss\n主要修改.widget--toc的样式\n.widget--toc { background-color: var(--card-background); border-radius: var(--card-border-radius); box-shadow: var(--shadow-l1); display: flex; flex-direction: column; color: var(--card-text-color-main); overflow: hidden; ::-webkit-scrollbar-thumb { background-color: var(--card-separator-color); } #TableOfContents { overflow-x: auto; max-height: 75vh; ol, ul { margin: 0; padding: 0; } ol { list-style-type: none; counter-reset: item; li a:first-of-type::before { counter-increment: item; content: counters(item, \u0026#34;.\u0026#34;) \u0026#34;. \u0026#34;; font-weight: bold; margin-right: 5px; } } \u0026amp; \u0026gt; ul { padding: 0 2em; } li { margin: 13px 0.4em 13px 1em; padding: 5px; \u0026amp; \u0026gt; ol, \u0026amp; \u0026gt; ul { margin-top: 10px; padding-left: 0; padding-right: 0em; margin-bottom: -5px; \u0026amp; \u0026gt; li:last-child { margin-bottom: 0; } } } li.active-class \u0026gt; a { border-left: var(--heading-border-size) solid var(--accent-color); font-weight: bold; } ul li.active-class \u0026gt; a { display: block; } @function repeat($str, $n) { $result: \u0026#34;\u0026#34;; @for $_ from 0 to $n { $result: $result + $str; } @return $result; } // Support up to 6 levels of indentation for lists in ToCs @for $i from 0 to 5 { \u0026amp; \u0026gt; ul #{repeat(\u0026#34;\u0026gt; li \u0026gt; ul\u0026#34;, $i)} \u0026gt; li.active-class \u0026gt; a { $n: 25 + $i * 35; margin-left: calc(-#{$n}px - 1em); padding-left: calc(#{$n}px + 1em - var(--heading-border-size)); } \u0026amp; \u0026gt; ol #{repeat(\u0026#34;\u0026gt; li \u0026gt; ol\u0026#34;, $i)} \u0026gt; li.active-class \u0026gt; a { $n: 9 + $i * 35; margin-left: calc(-#{$n}px - 1em); padding-left: calc(#{$n}px + 1em - var(--heading-border-size)); display: block; } } } } 点这里展开详细说明！ 1、最外层容器的 padding：\n\u0026amp; \u0026gt; ul { padding: 0 2em; *// 整个目录的左右内边距，0是上下内边距，2em是左右内边距* } 2、每个目录项的间距：\nli { margin: 13px 0 13px 1em; *// 上右下左的外边距* *// 13px: 上边距* *// 0: 右边距* *// 13px: 下边距* *// 1em: 左边距（缩进）* padding: 5px; *// 目录项的内边距，所有方向都是5px* } 3、子目录的间距：\n\u0026amp; \u0026gt; ol, \u0026amp; \u0026gt; ul { margin-top: 10px; *// 子目录距离父目录的上边距* padding-left: 0; *// 子目录的左内边距* padding-right: 1em; *// 子目录的右内边距* margin-bottom: -5px; *// 负的下边距，用于微调最后一个子项的间距* } 简单来说：\n整体左右留白：2em（约32px） 每级缩进：1em（约16px） 目录项之间的间距：13px 目录项内部的padding：5px 子目录组的上边距：10px 对于没有子级目录的情况\n#TableOfContents { // ... existing code ... \u0026amp; \u0026gt; ul { padding: 0 2em; // 一级目录：左内边距0，右内边距2em } li { margin: 13px 0 13px 1em; // 上13px 右0 下13px 左1em padding: 5px; // 所有方向都是5px的内边距 // ... existing code ... } } 外边距：上下13px，左1em，右0 内边距：所有方向5px 容器的内边距：左0，右2em 各级目录内边距一览 1级目录： 上：13px 右：2em (来自\u0026amp; \u0026gt; ul { padding: 0 2em }) 下：13px 左：0 2级目录： 上：13px 右：0.4em (来自margin: 13px 0.4em 13px 1em) 下：13px 左：1em + 35px (基础1em + 第一级缩进35px) 3级目录： 上：13px\n右：0.4em\n下：13px\n左：1em + 70px (基础1em + 第二级缩进70px)\n4级目录： 上：13px\n右：0.4em\n下：13px\n左：1em + 105px (基础1em + 第三级缩进105px)\n5级目录： 上：13px 右：0.4em 下：13px 左：1em + 140px (基础1em + 第四级缩进140px) 激活目录的样式：\nli.active-class \u0026gt; a { border-left: var(--heading-border-size) solid var(--accent-color); text-decoration: underline; text-decoration-style: dashed; text-underline-offset: 7px; text-decoration-thickness: 1.5px; } text-decoration: underline; 添加下划线 text-decoration-style: dashed; 改为虚线 text-underline-offset: 7px; 下划线与文字底部的距离 text-decoration-thickness: 1.5px; 下划线的粗细 ","date":"2024-12-29T17:24:18+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/00645021_76420400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F/","title":"博客自定义样式"},{"content":"前言 ​\t之前配置过评论系统twikoo的SMTP发件，这次是想配置beszel，发帖记录一下\n正文 ​\t经过之前的twikoo配置，我觉得gmail是比outlook更好的选择（不想使用qq这些）\n需要的信息 端口通常是25、465、587这几个，可以尝试\nSMTP服务地址：\nsmtp.gmail.com 端口：\n465 安全协议（qq是tls，谷歌是ssl）：\nssl Gmail设置 打开谷歌邮箱\n点击右上角头像管理账号\n在安全性点击两步验证\n设置两步验证之后\n点击最下面应用专用密码\n填入名称，创建应用专用密码\n复制密码\n点击完成\n回到beszel后台填入16位密码，填入25端口，SMTP服务器是\nsmtp.gmail.com 保存测试\n发现发件邮箱需要验证\n回到gmail邮箱\n进入后点击查看活动，确认\n之后返回发送测试\n配置如下 选择25端口和登录认证（不是必须，可以不选）\n在前台配置需要被通知的邮件\n成功收到邮件\n大功告成！\n","date":"2024-12-29T10:44:48+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/11975316_09287400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/smtp%E9%82%AE%E4%BB%B6%E9%85%8D%E7%BD%AE/","title":"SMTP邮件配置"},{"content":"前言 ​\t由于jsdelivr被墙，国内的各种镜像也是层出不穷，但是好用的没几个，今天使用大佬的项目1143520/jsd 自建，搭配vercel和优化CDN实现秒加载，优化CDN\n正文 ​\t之前使用的镜像CDN地址s4.zstatic.net一直302重定向导致延迟颇高，现在的自建镜像就很香了，直接替换官方的链接头部\n我替换了两个地方：(目前的问题是外部资源加载速度慢一点，虽然文件很小，所以打算尽量都下载到目录)\n注意： 域名有效期只有一年，可以更换10年的xyz，或者eu.org啥的，避免到时候大面积瘫痪\n评论：(已经下载到本地) themes\\hugo-magic\\layouts\\partials\\comments\\provider\\twikoo.html\n\u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/twikoo@1.6.40/dist/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 图片缩放：(已经下载到本地) themes\\hugo-magic\\layouts\\_default\\baseof.html\n\u0026lt;!-- 添加 medium-zoom 支持 --\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/medium-zoom/dist/medium-zoom.min.js\u0026#34;\u0026gt;\u0026lt;/script 字体和CSS地址：（已经下载本地未引用） themes\\hugo-magic\\layouts\\partials\\head\\custom.html有四处，原本使用的是饿了么CDN也很快\nhttps://npm.elemecdn.com/lxgw-wenkai-screen-webfont@1.7.0/lxgwwenkaiscreen.css 谷歌字体 虽然本地有这个字体，但是为什么老是加载出错呢？themes\\hugo-magic\\layouts\\partials\\footer\\components\\custom-font.html尝试不使用vercel的CDN试一下，vercel的CDN太不稳了，可以试试直接使用github pages的资源\nalist的CDN 进入目录\ncd /opt/alist 更新（确认版本匹配）\ncurl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s update 修改/opt/alist/data/config.json\n\u0026#34;cdn\u0026#34;: \u0026#34;https://jsd.aliya.news/npm/alist-web@3.41.0/dist/\u0026#34;, 修改完成之后，进入alist目录重启\nsystemctl restart alist 自建drop的CDN 原本使用的镜像： \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;🚵🏽 BAOER の 中转信箱 📬\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/jpeg\u0026#34; href=\u0026#34;logo.jpg\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/themes/prism.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.cdn.zzko.cn/npm/prismjs@1.29.0/prism.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-core.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-clike.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-markup-templating.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-markup.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-css.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-javascript.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-python.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-java.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-c.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-cpp.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-csharp.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-php.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-sql.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-bash.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-json.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/prismjs@1.29.0/components/prism-markdown.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/style.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;js/theme.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.cdn.zzko.cn/npm/markdown-it/dist/markdown-it.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.cdn.zzko.cn/npm/markdown-it-emoji/dist/markdown-it-emoji.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.cdn.zzko.cn/npm/markdown-it-sub/dist/markdown-it-sub.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/markdown-it-sup/dist/markdown-it-sup.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/markdown-it-footnote/dist/markdown-it-footnote.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/markdown-it-task-lists/dist/markdown-it-task-lists.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/medium-zoom/dist/medium-zoom.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; 替换后： \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;🚵🏽 BAOER の 中转信箱 📬\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/jpeg\u0026#34; href=\u0026#34;logo.jpg\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/themes/prism.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/prism.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-core.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-clike.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-markup-templating.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-markup.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-css.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-javascript.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-python.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-java.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-c.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-cpp.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-csharp.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-php.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-sql.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-bash.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-json.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/prismjs@1.29.0/components/prism-markdown.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/style.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;js/theme.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/markdown-it/dist/markdown-it.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/markdown-it-emoji/dist/markdown-it-emoji.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/markdown-it-sub/dist/markdown-it-sub.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/markdown-it-sup/dist/markdown-it-sup.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/markdown-it-footnote/dist/markdown-it-footnote.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/markdown-it-task-lists/dist/markdown-it-task-lists.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://jsd.aliya.news/npm/medium-zoom/dist/medium-zoom.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; 自建typora上传接口picx的返回地址 替换头像 避免直接向服务器请求，导致加载缓慢，后期会将大多数资源使用picx图床和镜像jsd（这只是一种选择，更好的选择还是压缩图片大小）\n头像： 网站图标： ","date":"2024-12-28T00:56:15+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/71448145_76469200.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%BB%BAjsdelivr%E9%95%9C%E5%83%8F/","title":"使用自建jsdelivr镜像"},{"content":"前言 ​\t来自教程推一下Vercel加速节点 虽然节点优选之后也不快，但是后半段的设置有点意思，设置vercel的CDN缓存，也不知道是不是重复设置，不过多多益善，官方文档\n正文 配置 ​\t根据构建文件，会把static目录下的静态文件都复制到公共仓库，所以，在static创建一个vercel.json\n内容如下：设置缓存1年\n{ \u0026#34;headers\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;/(css|js|img|images|fonts|search|tags|tiaozhuan|ts|links|scss)/(.*)\u0026#34;, \u0026#34;headers\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=31536000, immutable\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;CDN-Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=31536000, immutable\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;Vercel-CDN-Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=31536000, immutable\u0026#34; } ] }, { \u0026#34;source\u0026#34;: \u0026#34;/(favicon.*\\\\.ico)\u0026#34;, \u0026#34;headers\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=31536000, immutable\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;CDN-Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=31536000, immutable\u0026#34; }, { \u0026#34;key\u0026#34;: \u0026#34;Vercel-CDN-Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=31536000, immutable\u0026#34; } ] } ] } 按需设置，不要把太多html缓存，否则无法实时响应修改\n在构建文件.github\\workflows\\main.yml中将\nrun:hugo --gc --minify 修改成(构建之前检查)\nrun: | if [ ! -d \u0026#34;static\u0026#34; ]; then mkdir static fi if [ ! -f \u0026#34;static/vercel.json\u0026#34; ]; then echo \u0026#39;创建vercel.json\u0026#39; touch static/vercel.json fi hugo --gc --minify 检查 打开浏览器开发者工具\n查看网络请求\n检查静态资源的响应头中是否包含设置的缓存控制头\n查看 x-vercel-cache 头的值是否为 HIT\nMISS: 表示资源第一次被请求，没有缓存，直接从源站获取 HIT: 表示请求直接命中了Vercel的边缘缓存，从最近的CDN节点返回 可以和 https://1143520.github.io/ 相互对照\n可以看到响应头设置成功\nCache-Control: public, max-age=31536000, immutable CDN-Cache-Control: public, max-age=31536000, immutable Vercel-CDN-Cache-Control: public, max-age=31536000, immutable 补充 区域设置保持默认就好，设置成香港卡卡的，估计用的人太多了，服务器少，错开时区也好\nSpeed Insights别开\n边缘CDN对于部分网络不如github.io，已经回退，而且优化CDN后是自带HIT命中的\n格式：\n- name: Build Hugo static files # 部署静态资源 run: hugo --gc --minify # 要有空格 如果使用前面的https://github.com/xingpingcn/enhanced-FaaS-in-China 建议修改json，不对CDN缓存，避免冲突（目前博客使用的模式）\n对整个静态目录缓存（不影响使用）vercel.json\n{ \u0026#34;headers\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;/(.*)\u0026#34;, \u0026#34;headers\u0026#34;: [ { \u0026#34;key\u0026#34;: \u0026#34;Cache-Control\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;public, max-age=3153600\u0026#34; } ] } ] } 另外需要减少测试网站速度。否则会触发vercel的安全检查。\ngithub pages 自定义域名 大佬的优化CDN对于部分网络会抽风，直接访问pages应该也是比较快的\n不使用vercel，直接在github pages自定义域名\nAliya の 笔记\n但是每一次构建都会覆盖public仓库，所以，还要创建文件static\\CNAME\n填入\nhugo-git.1143520.xyz 在构建文件.github\\workflows\\main.yml中\n最后这里加上\n- name: Deploy to Github Pages # 部署到Github Pages页面 uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: 1143520/1143520.github.io publish_dir: ./public # hugo 生成到 public 作为跟目录 publish_branch: main # Github Pages 所在分支 commit_message: ${{ github.event.head_commit.message }} cname: hugo-git.1143520.xyz # 添加自定义域名设置 force_orphan: true # 强制创建新的提交历史(可选) enable_jekyll: false # 禁用 Jekyll(加快构架，避免出错) enable_https: true # 启用强制 HTTPS(可选) ","date":"2024-12-27T11:42:40+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/26500854_34989600.png","permalink":"https://note.zhongyangblog.eu.org/p/%E8%AE%BE%E7%BD%AEverel%E7%BC%93%E5%AD%98/","title":"设置verel缓存"},{"content":"前言 ​\t教程都是抄的利用github搭建图床并使用vercel加速-忆光博客 十分详细，还可以结合前面使用优化的CDN\n限制如下\n个人使用完全足够\n正文 Github仓库代码 https://github.com/XPoet/picx\n搭建：使用vercel部署\n第一步：fork picx仓库 第二步：访问vercel.com并导入该fork项目 Framework Preset选择vite，其他命令选择默认\n点击进行deploy，部署完成后，为了加速访问，需要在Settings -\u0026gt; Functions 将Function Region改为Hong Kong (East) – hkg1(香港)，之后在cname到cname-china.vercel-dns.com即可正常使用。\n接下来，打开搭建好的picx图床，选择github或token登陆，登陆后授权创建图片托管仓库默认（picx-images-hosting），先配置一下基础的相关设置，此时图片链接规则配置，jsd的cdn加速可能会部分地区访问速度慢，Chinajsd又有限制，可能会暂停某些图片的访问，所以我们还需要使用vercel进行加速jsd，就需要用到另外一个项目：\nVercel反向代理 | 易用的jsDelivr镜像站 项目地址：https://github.com/rong6/jsd\n(如果你有国外服务器可以用nginx反代)\n搭建方法：同上，先fork，再打开vercel.com，导入并部署，设置并绑定域名，假如你的绑定的jsd加速域名是：jsd.domain.com，然后打开图床的 图片链接规则配置 ，修改Statically项(或其他)的前面的url为，https://jsd.domain.com/gh/后面的一堆不用动，然后点击最上面的保存即可应用。\n这样简易的图床就搭建好了，可以上传图片进行测试，复制图片地址即可应用到博客或者其他地方。\n最后：虽然这样搭建的图床是零成本，但是！不推荐大量的在github存储图片资源并使用jsd进行加速，该方法搭建的图床仅供学习和测试，以及小范围的使用，不要过度滥用jsd公共加速资源，维护好这些开源项目，才能给每位开发者带来便捷并提高开发效率。\n测试 ​\t速度很不错！\n","date":"2024-12-27T03:40:49+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/51895452_46835400.jpg","permalink":"https://note.zhongyangblog.eu.org/p/vercel%E9%83%A8%E7%BD%B2picx%E5%9B%BE%E5%BA%8A%E5%B9%B6%E4%B8%94%E5%8A%A0%E9%80%9F/","title":"Vercel部署picX图床并且加速"},{"content":"前言 ​\t前几天发现通过api接口上传到TG的图片无法访问，数据库没有储存这些链接，修改之后现在好了几天，现在图片又无法访问了，查过资料后发现file_path是会过期的，根据cursor的说法是file_id不会改变，留档测试一下2024.12.27\n正文 TG图片 ","date":"2024-12-27T02:22:38+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/23547394_80017700.jpg","permalink":"https://note.zhongyangblog.eu.org/p/tg-drop%E7%9A%84%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/","title":"Tg Drop的图片链接过期问题"},{"content":"前言 ​\t有时候python脚本运行时间比较长，只会使用cron有诸多不便，探索一下临时后台运行pyhton的办法，这样断开ssh也能运行。\n正文 ​\t在 Linux 服务器上后台运行 Python 脚本的方法\n本指南介绍了几种在 Linux 服务器上后台运行 Python 脚本的方法，特别适用于需要在 SSH 断开后继续运行的情况。\n目录 使用 nohup 命令（推荐） 使用 Screen 命令 使用 Tmux 命令 使用 Systemd 服务 1. 使用 nohup 命令（推荐） nohup是最简单的后台运行方法，适合临时运行脚本。\n基本用法 nohup python picX.py \u0026gt; picx.log 2\u0026gt;\u0026amp;1 \u0026amp; 命令解释 nohup: 让进程忽略 SIGHUP 信号（SSH 断开时的信号） \u0026gt; picx.log: 将标准输出重定向到日志文件 2\u0026gt;\u0026amp;1: 将错误输出也重定向到同一个文件 \u0026amp;: 在后台运行 相关命令 # 查看进程 ps aux | grep picX.py # 实时查看日志 tail -f picx.log # 如果需要停止脚本 kill $(ps aux | grep picX.py | grep -v grep | awk \u0026#39;{print $2}\u0026#39;) #或者 # 通过PID停止，写入你自己的进程id kill id 2. 使用 Screen 命令 Screen 是一个终端复用器，可以在多个终端会话之间切换。\n安装 Screen # Ubuntu/Debian sudo apt-get install screen # CentOS/RHEL sudo yum install screen 基本用法 # 创建新的screen会话 screen -S picx # 在screen中运行脚本 python picX.py # 分离会话：按 Ctrl+A，然后按 D 常用命令 # 列出所有会话 screen -ls # 重新连接到会话 screen -r picx # 终止会话 screen -X -S picx quit 常用快捷键 Ctrl+A, D: 分离当前会话 Ctrl+A, C: 创建新窗口 Ctrl+A, N: 切换到下一个窗口 Ctrl+A, P: 切换到上一个窗口 Ctrl+A, ?: 显示帮助信息 3. 使用 Tmux 命令 Tmux 是 Screen 的现代替代品，提供了更多功能。\n安装 Tmux # Ubuntu/Debian sudo apt-get install tmux # CentOS/RHEL sudo yum install tmux 基本用法 # 创建新的tmux会话 tmux new -s picx # 在tmux中运行脚本 python picX.py # 分离会话：按 Ctrl+B，然后按 D 常用命令 # 列出所有会话 tmux ls # 重新连接到会话 tmux attach -t picx # 终止会话 tmux kill-session -t picx 常用快捷键 Ctrl+B, D: 分离当前会话 Ctrl+B, C: 创建新窗口 Ctrl+B, N: 切换到下一个窗口 Ctrl+B, P: 切换到上一个窗口 Ctrl+B, ?: 显示帮助信息 4. 使用 Systemd 服务 Systemd 是 Linux 系统的服务管理器，适合长期运行的服务。\n创建服务文件 sudo nano /etc/systemd/system/picx.service 服务文件内容 [Unit] Description=PicX Upload Service After=network.target [Service] Type=simple User=你的用户名 WorkingDirectory=/脚本所在的完整路径 ExecStart=/usr/bin/python3 picX.py Restart=always [Install] WantedBy=multi-user.target 服务管理命令 # 重新加载systemd配置 sudo systemctl daemon-reload # 启动服务 sudo systemctl start picx # 停止服务 sudo systemctl stop picx # 重启服务 sudo systemctl restart picx # 查看服务状态 sudo systemctl status picx # 设置开机自启 sudo systemctl enable picx # 取消开机自启 sudo systemctl disable picx 查看日志 # 查看服务日志 journalctl -u picx.service # 实时查看日志 journalctl -u picx.service -f 选择建议 临时运行脚本：使用 nohup\n优点：简单，无需安装额外软件 缺点：功能简单，不易管理 开发调试阶段：使用 Screen 或 Tmux\n优点：可以随时查看和控制 缺点：需要学习命令和快捷键 生产环境长期运行：使用 Systemd\n优点：专业的服务管理，自动重启，开机自启 缺点：配置相对复杂 注意事项 确保脚本有适当的错误处理和日志记录 定期检查日志文件大小，避免占用过多磁盘空间 使用适当的权限运行脚本 考虑添加监控和告警机制 重要的生产环境脚本建议使用 Systemd 服务管理 ","date":"2024-12-27T00:41:30+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/45104518_15083000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Cpython%E8%84%9A%E6%9C%AC/","title":"后台运行python脚本"},{"content":"前言 ​\t单页应用刷新，速度很快，不刷新，比预加载还快\n正文 ​\t问题是原来的功能都没有考虑这一点，缝缝补补一下午了，也就把灯箱、锚点目录，跳转页加上去了，还有很多js功能都没有，回退了，不过还是把代码放这记录一下\nthemes\\hugo-magic\\layouts\\_default\\baseof.html ​\t下面的是完整代码\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ .Site.LanguageCode }}\u0026#34; dir=\u0026#34;{{ default `ltr` .Language.LanguageDirection }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- 立即执行主题初始化，必须放在最前面 --\u0026gt; \u0026lt;script\u0026gt; (function() { // 防止重复初始化和闪烁 if (document.documentElement.dataset.scheme) return; const colorSchemeKey = \u0026#39;StackColorScheme\u0026#39;; const colorScheme = localStorage.getItem(colorSchemeKey) || \u0026#39;dark\u0026#39;; const prefersDark = window.matchMedia(\u0026#39;(prefers-color-scheme: dark)\u0026#39;).matches; // 立即设置主题，防止闪烁 document.documentElement.dataset.scheme = colorScheme === \u0026#39;dark\u0026#39; || (colorScheme === \u0026#39;auto\u0026#39; \u0026amp;\u0026amp; prefersDark) ? \u0026#39;dark\u0026#39; : \u0026#39;light\u0026#39;; })(); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 预设主题样式，防止闪烁 */ :root[data-scheme=\u0026#34;light\u0026#34;] { --theme-bg: #ffffff; --theme-text: #000000; background-color: #ffffff; color: #000000; } :root[data-scheme=\u0026#34;dark\u0026#34;] { --theme-bg: #1a1a1a; --theme-text: #ffffff; background-color: #1a1a1a; color: #ffffff; } /* 添加渐变效果，但仅在初始加载后 */ .theme-loaded { transition: background-color 0.3s ease, color 0.3s ease; } /* 添加页面切换动画 */ .turbolinks-progress-bar { height: 3px; background-color: var(--theme-text); } \u0026lt;/style\u0026gt; \u0026lt;!-- 添加Turbolinks支持 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/turbolinks/5.2.0/turbolinks.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 配置Turbolinks window.Turbolinks = Turbolinks; // 定义外部链接处理函数 function handleExternalLinks() { function checkParent(element, classNames) { while (element) { if (element.classList \u0026amp;\u0026amp; classNames.some(cn =\u0026gt; element.classList.contains(cn))) { return true; } element = element.parentElement; } return false; } // 需要排除的类名 var excludedClasses = [\u0026#39;talks_comments\u0026#39;, \u0026#39;tiaozhuan-button\u0026#39;, \u0026#39;search-result\u0026#39;]; // 需要排除的页面路径 var excludedPaths = [\u0026#39;/search/\u0026#39;, \u0026#39;/search\u0026#39;]; document.body.addEventListener(\u0026#39;click\u0026#39;, function(e) { // 如果当前页面是搜索页面，不处理链接 if (excludedPaths.some(path =\u0026gt; window.location.pathname.startsWith(path))) { return; } let target = e.target; while (target \u0026amp;\u0026amp; target.nodeName !== \u0026#39;A\u0026#39;) { target = target.parentNode; } if (target \u0026amp;\u0026amp; target.nodeName === \u0026#39;A\u0026#39; \u0026amp;\u0026amp; !checkParent(target, excludedClasses) \u0026amp;\u0026amp; target.hostname !== window.location.hostname) { e.preventDefault(); let encodedUrl = btoa(target.href); let url = \u0026#39;/tiaozhuan?target=\u0026#39; + encodedUrl; window.open(url, \u0026#39;_blank\u0026#39;); } }); } // 在页面加载和Turbolinks加载时都初始化外部链接处理 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, handleExternalLinks); document.addEventListener(\u0026#39;turbolinks:load\u0026#39;, handleExternalLinks); // 处理目录锚点点击 function handleTocClick(e) { const link = e.target.closest(\u0026#39;a\u0026#39;); if (!link) return; const href = link.getAttribute(\u0026#39;href\u0026#39;); if (!href || !href.startsWith(\u0026#39;#\u0026#39;)) return; e.preventDefault(); const targetId = href.slice(1); const targetElement = document.getElementById(targetId); if (targetElement) { e.preventDefault(); // 平滑滚动到目标位置 targetElement.scrollIntoView({ behavior: \u0026#39;smooth\u0026#39;, block: \u0026#39;start\u0026#39; }); // 更新 URL，但不触发滚动 history.pushState(null, null, href); } } // 在页面加载和Turbolinks加载时绑定目录点击事件 function initTocClickHandler() { const toc = document.querySelector(\u0026#39;#TableOfContents\u0026#39;); if (toc) { toc.removeEventListener(\u0026#39;click\u0026#39;, handleTocClick); toc.addEventListener(\u0026#39;click\u0026#39;, handleTocClick); } } document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initTocClickHandler); document.addEventListener(\u0026#39;turbolinks:load\u0026#39;, initTocClickHandler); // 处理 Turbolinks 页面加载后的锚点跳转 document.addEventListener(\u0026#39;turbolinks:load\u0026#39;, function() { const hash = window.location.hash; if (hash) { const targetElement = document.querySelector(hash); if (targetElement) { setTimeout(() =\u0026gt; { targetElement.scrollIntoView({ behavior: \u0026#39;smooth\u0026#39;, block: \u0026#39;start\u0026#39; }); }, 100); } } }); // 处理Turbolinks的外部链接 document.addEventListener(\u0026#39;turbolinks:before-visit\u0026#39;, function(event) { const url = new URL(event.data.url); const isExternal = url.hostname !== window.location.hostname; if (isExternal) { event.preventDefault(); } }); // 加载目录滚动监听脚本 function loadScrollspy() { return new Promise((resolve, reject) =\u0026gt; { if (window.setupScrollspy) { resolve(window.setupScrollspy); return; } const script = document.createElement(\u0026#39;script\u0026#39;); script.src = \u0026#39;/ts/scrollspy.js\u0026#39;; script.onload = () =\u0026gt; resolve(window.setupScrollspy); script.onerror = reject; document.head.appendChild(script); }); } // 初始化目录滚动监听 async function initScrollspy() { try { const setupScrollspy = await loadScrollspy(); setupScrollspy(); } catch (error) { console.error(\u0026#39;Failed to initialize scrollspy:\u0026#39;, error); } } // 在页面加载和Turbolinks加载时初始化目录滚动监听 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, initScrollspy); document.addEventListener(\u0026#39;turbolinks:load\u0026#39;, initScrollspy); // 加载Twikoo脚本 function loadTwikoo() { return new Promise((resolve, reject) =\u0026gt; { if (window.twikoo) { resolve(window.twikoo); return; } const script = document.createElement(\u0026#39;script\u0026#39;); script.src = \u0026#39;//cdn.jsdelivr.net/npm/twikoo@1.6.40/dist/twikoo.all.min.js\u0026#39;; script.onload = () =\u0026gt; resolve(window.twikoo); script.onerror = reject; document.head.appendChild(script); }); } // 初始化Twikoo评论 async function initTwikoo() { const tcomment = document.getElementById(\u0026#39;tcomment\u0026#39;); if (!tcomment) return; try { const twikoo = await loadTwikoo(); // 清空评论区内容 tcomment.innerHTML = \u0026#39;\u0026#39;; // 重新初始化Twikoo await twikoo.init({ envId: \u0026#39;{{ .Site.Params.comments.twikoo.envId }}\u0026#39;, el: \u0026#39;#tcomment\u0026#39; }); } catch (error) { console.error(\u0026#39;Failed to initialize Twikoo:\u0026#39;, error); } } // 在Turbolinks加载完成后初始化Twikoo document.addEventListener(\u0026#39;turbolinks:load\u0026#39;, initTwikoo); \u0026lt;/script\u0026gt; {{- partial \u0026#34;head/colorScheme\u0026#34; . -}} {{- partial \u0026#34;head/head.html\u0026#34; . -}} {{- block \u0026#34;head\u0026#34; . -}}{{ end }} \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;{{ block `body-class` . }}{{ end }}\u0026#34;\u0026gt; \u0026lt;script\u0026gt; // 添加主题加载完成标记，启用过渡效果 document.documentElement.classList.add(\u0026#39;theme-loaded\u0026#39;); // 启动Turbolinks if (typeof Turbolinks !== \u0026#39;undefined\u0026#39;) { Turbolinks.start(); } \u0026lt;/script\u0026gt; {{/* The container is wider when there\u0026#39;s any activated widget */}} {{- $hasWidget := false -}} {{- range .Site.Params.widgets -}} {{- if gt (len .) 0 -}} {{- $hasWidget = true -}} {{- end -}} {{- end -}} \u0026lt;div class=\u0026#34;container main-container flex on-phone--column {{ if $hasWidget }}extended{{ else }}compact{{ end }}\u0026#34;\u0026gt; {{- block \u0026#34;left-sidebar\u0026#34; . -}} {{ partial \u0026#34;sidebar/left.html\u0026#34; . }} {{- end -}} {{- block \u0026#34;right-sidebar\u0026#34; . -}}{{ end }} \u0026lt;main class=\u0026#34;main full-width\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{- end }} \u0026lt;/main\u0026gt; \u0026lt;/div\u0026gt; {{ partial \u0026#34;footer/include.html\u0026#34; . }} \u0026lt;!-- 添加 medium-zoom 支持 --\u0026gt; \u0026lt;script src=\u0026#34;https://s4.zstatic.net/npm/medium-zoom/dist/medium-zoom.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 自定义 medium-zoom 样式 */ .medium-zoom-overlay { background-color: rgba(0, 0, 0, 0.95) !important; z-index: 999; } .medium-zoom-image--opened { z-index: 1000; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; // 全局变量存储zoom实例 let zoomInstance = null; // 初始化图片缩放 function initMediumZoom() { // 如果已经初始化过，先清理 if (zoomInstance) { zoomInstance.detach(); } if (typeof mediumZoom !== \u0026#39;undefined\u0026#39;) { // 创建新的实例 zoomInstance = mediumZoom(\u0026#39;article.main-article img:not(.nozoom):not(.site-logo):not(.link-card .article-image img):not(.article-list--compact.links .article-image img):not(.article-header .article-image img)\u0026#39;, { margin: 24, background: \u0026#39;rgba(0, 0, 0, 0.95)\u0026#39;, scrollOffset: 0, }); } } // 初始化 initMediumZoom(); // Turbolinks 页面切换后重新初始化 document.addEventListener(\u0026#39;turbolinks:load\u0026#39;, initMediumZoom); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-12-26T19:41:40+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/87100744_47665500.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%B7%BB%E5%8A%A0-turbolinks-%E6%94%AF%E6%8C%81/","title":"添加 Turbolinks 支持"},{"content":"前言 穷哥只玩得起便宜的冷门小鸡，发篇博客记录一下，免得以后找不到链接。\n正文 菠萝云（polo） https://polocloud.net 5.6（含手续费）￥的SG-lite\n简评：纯ip6，移动快乐，DNS解锁，ip还行，有性价比，貌似是很多厂家的上游（速度、解锁和BV的nat差不多，就是KVM架构，值这个价）\nWAWO首月0.56￥-JP-ipv6only-NAT出口 購物車 - 哇沃主機 延迟100多，没有快乐，深夜速度感人，自带的centos很难用，不过0.56还能说啥？优惠码：Jp-ipv6-0.3g-19\nHoyoverse Network的英国ipv6 优惠码：3Y5WH6QSV9\n官网\n传说ipv6很纯，可以注册talkatone，反正我没有成功\n解锁稀碎，不放图了\n","date":"2024-12-26T01:30:12+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/17487562_62521300.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E5%86%B7%E9%97%A8vps%E5%95%86%E5%AE%B6/","title":"冷门VPS商家"},{"content":"前言 ​\t想要推送一个自动构建的yml到picX的仓库，但是觉得换账号太麻烦，找cursor问了一下\n正文 ​\t使用新文件夹\n​\t先拉取，然后修改，最后上传\n​\t使用git命令\ngit remote add origin https://用户名:有repo和workflow的权限的token@github.com/用户名/picx-images-hosting.git ​\t使用完之后需要删除凭证使用原来的账户\n# Windows系统，打开凭证管理器 控制面板 -\u0026gt; 用户账户 -\u0026gt; 凭证管理器 -\u0026gt; Windows凭证 # 找到 刚刚的 github.com 的凭证并删除 测试接口上传的图片\n","date":"2024-12-25T23:49:23+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/68247213_57961100.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81%E6%96%87%E4%BB%B6%E5%88%B0%E5%85%B6%E4%BB%96git%E8%B4%A6%E6%88%B7%E7%9A%84%E4%BB%93%E5%BA%93/","title":"本地推送文件到其他git账户的仓库"},{"content":"前言 ​\t今天浏览学习大佬的博客 ，偶然间看到了github图床，想着要不要自己搞一个，于是上网搜了一下，结果发现已经有非常成熟的项目——PicX了，送上star，开始使用，由于借助的是别人的网站使用github，所以还是开个小号吧，在线网址：上传图片 | PicX\n正文 登录 ​\t登录非常简单，使用app或者token都可以，token需要repo权限\n使用 ​\t登录完之后会帮你建一个public仓库，下面可以自定义目录\n​\t​\t可以自定义命名和选择压缩格式，可谓十分nice，但是压缩使用的本地资源，我尝试的时候直接卡住了，还是别开了\n​\t链接选择pages，国内虽然做不到100%能够访问，但是延迟十分不错，每次上传完点击一下一键部署就行，挺方便，就是为什么不做成自动构建呢？\n​\t还有工具箱可以在线压缩，先压缩再上传，避免网站卡死\n总结 ​\t十分不错，完全可以替代自建和大厂接口，是一个非常好的备份选项，记住，使用小号！！\n直接使用jsCDN，自用也没有问题\n","date":"2024-12-25T21:52:58+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241225/12890203_40716600.jpg","permalink":"https://note.zhongyangblog.eu.org/p/picx%E5%9B%BE%E5%BA%8A-%E4%BD%BF%E7%94%A8github%E5%AD%98%E5%82%A8/","title":"PicX图床 使用github存储"},{"content":"正文 项目地址\npowershell运行\nirm https://massgrave.dev/ias | iex 之前的白嫖正版失效了，老实用旧版或者破解版吧\n下载链接1\n下载链接2——来自酷安\n下载地址3——大佬收集\n浏览器搜索IDM 6.4x Crack v19.7——来自酷安\n","date":"2024-12-24T19:21:39+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/26348784_29434800.jpg","permalink":"https://note.zhongyangblog.eu.org/p/idm%E6%B3%A8%E5%86%8C/","title":"IDM注册"},{"content":"前言 ​\t哪吒探针v1版本太难操作了，感觉还是v0好看，但是v0现在感觉就跟弃子一样，干脆转其他的服务了，beszel使用之后感觉确实部署简单，容易上手，项目地址\n正文 ​\t我用的docker-compose部署，因为有些环境变量需要配置，比如github认证回调之类的，主要我不会修改那个二进制文件\n​\t安装docker不必多说\n第一步 创建目录地址 mkdir ~/my_docker_project cd ~/my_docker_project 创建编辑文件 nano docker-compose.yml 写入以下内容 version: \u0026#39;3.8\u0026#39; services: beszel: image: henrygd/beszel container_name: beszel restart: unless-stopped ports: - 2258:8090 volumes: - ./beszel_data:/beszel_data environment: USER_CREATION: true ​\t需要修改自定义端口，编辑\nports: - 2258:8090 ​\t环境变量（后面可以github回调验证）更多自定义变量参考\nenvironment: USER_CREATION: true 第二步 启动 docker-compose up -d 之后访问域名:端口就可以了\n注意 创建用户的时候不要使用浏览器的自动填入\n因为虽然显示只有邮箱密码的输入框，但是自动填充有时候会加入用户名，导致提交表单失败\n添加新的服务器的时候要确保原来的beazel-ag删除干净\n检查端口\nlsof -i :45876 如果还有就卸载\nlinux安装命令 -u 然后使用安装命令\n不能使用localhost和127.0.0.1，有问题\n一般都是秒链接\n最后的agent更新选择n，避免和哪吒一样\n转发 主控机没有ipv6，所以向纯ipv6小鸡的45876端口请求数据会被拒绝，目前没有太好的办法，主要也不想在ipv6的小鸡上装warp，在主控机上装了warp没有用\n只好使用转发了\n反正也不是实时的监控\n使用socat转发\n在中间的转发鸡上\n安装socat sudo apt install socat -y 建立服务 sudo nano /etc/systemd/system/socat-ipv4-to-ipv6.service 编辑 44444是主控鸡和中间鸡的联系端口，转发到ipv6小鸡的45876\n[Unit] Description=Socat IPv4 to IPv6 Proxy After=network.target [Service] ExecStart=/usr/bin/socat TCP4-LISTEN:44444,fork TCP6:[需要转发的ipv6]:45876 Restart=always [Install] WantedBy=multi-user.target 需要多个转发的话，修改ExecStart（注意格式） [Unit] Description=Socat Service to Forward IPv4 to IPv6 After=network.target [Service] Type=simple ExecStart=/bin/bash -c \u0026#39;\\ /usr/bin/socat TCP4-LISTEN:45877,fork TCP6:[第一个ipv6]:45876 \u0026amp; \\ /usr/bin/socat TCP4-LISTEN:45870,fork TCP6:[第二个ipv]:45876\u0026#39; Restart=always User=root [Install] WantedBy=multi-user.target 或者\n根据上面的步骤创建新的单个转发的服务（不推荐）\n启动和保活 sudo systemctl daemon-reload sudo systemctl enable socat-ipv4-to-ipv6.service sudo systemctl start socat-ipv4-to-ipv6.service 验证 sudo systemctl status socat-ipv4-to-ipv6.service 最后在beszel这样设置，访问中间鸡的中间鸡ipv4:44444端口\n复制的linux命令需要修改端口44444成45876\ncurl -sL https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh -o install-agent.sh \u0026amp;\u0026amp; chmod +x install-agent.sh \u0026amp;\u0026amp; ./install-agent.sh -p 44444 -k \u0026#34;token\u0026#34; --china-mirrors 这个位置-p 44444改成\n-p 45876 通知 没有找到微信的通知渠道（毕竟是国外大佬写的）\nTG通知示例（在设置-通知里面设置）\ntelegram://bot_token@telegram?chats=群组id 更多通知写法（比如bark）\n","date":"2024-12-24T15:35:50+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/96565314_59681200.png","permalink":"https://note.zhongyangblog.eu.org/p/beszel%E6%8E%A2%E9%92%88docker%E9%83%A8%E7%BD%B2/","title":"Beszel探针——docker部署"},{"content":"前言 ​\tcloudrive2挂载的网盘经常卡半天，而且web界面也是时不时抽风，所以想着换成rclone\n​\t刚刚发现大佬的教程更加详细，还有官方安装脚本\ncurl https://rclone.org/install.sh | bash 正文 准备 ​\t安装 rclone： 使用以下命令安装：\nsudo apt install rclone -y ​\t验证\nrclone version ​\t创建挂载目录\nsudo mkdir -p /mnt/webdav ​\t配置权限\nsudo chmod -R 777 /mnt/webdav ​\t配置webdav\nrclone config 创建新的远程存储：\n输入 n 创建一个新配置。 输入一个名称（如 webdav），用于标识此远程存储。 选择存储类型：\n选择 webdav（通常是选项编号 31，视版本而定）。 输入 WebDAV 的详细信息：\nURL: 输入 WebDAV 服务器地址（如 https://example.com/webdav）。 Vendor: 选择供应商类型（例如 other 或 nextcloud，根据服务提供商选择）。 用户名和密码: 按提示输入 WebDAV 的用户名和密码。 测试配置： 完成后，rclone会提示测试配置，按 y 确认。\n最后q退出\n安装FUSE\nsudo apt install fuse -y 验证\nlsmod | grep fuse 挂载 rclone mount alistwendav:/ /mnt/webdav --daemon --log-file=/tmp/rclone.log --log-level=DEBUG 开机自动挂载 系统服务\nsudo nano /etc/systemd/system/rclone-alistwendav.service 填入\n[Unit] Description=Rclone Mount for WebDAV (alistwendav) Documentation=https://rclone.org/commands/rclone_mount/ After=network-online.target Wants=network-online.target [Service] Type=notify ExecStart=/usr/bin/rclone mount alistwendav:/ /mnt/webdav \\ --config=/root/.config/rclone/rclone.conf \\ --vfs-cache-mode writes \\ --allow-other \\ --log-file=/tmp/rclone-alistwendav.log \\ --log-level=DEBUG ExecStop=/bin/fusermount -u /mnt/webdav Restart=on-failure User=root Group=root [Install] WantedBy=multi-user.target 注意地址\n/mnt/webdav\n刷新系统服务\nsudo systemctl daemon-reload 启动服务\nsudo systemctl enable rclone-alistwendav.service 大功告成 修改配置和删除 修改 rclone config 测试修改\nrclone ls alistwendav:/ 删除 直接删除挂载目录\nrm 挂载目录 ","date":"2024-12-24T13:31:47+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/89899093_97901200.jpg","permalink":"https://note.zhongyangblog.eu.org/p/rclone%E6%8C%82%E8%BD%BDwebdav%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/","title":"Rclone挂载webdav到服务器上"},{"content":"前言 快速在各个音乐平台迁移歌单\n正文 之前转移到spotify的时候苦于qq音乐多年的收藏歌单，所以一直保留QQ音乐这个毒瘤，最近更是变本加厉，不开会员啥都听不了，于是有了迁移歌单的想法 首先 打开链接迁移网易云/QQ 音乐歌单至 Apple/Youtube/Spotify Music https://music.unmeta.cn/ 原作者的star可以点下，让更多人看到\n之后 就可以打开TuneMyMusic https://www.tunemymusic.com/zh-CN/transfer 按照使用指南来就行 注意 由于 TuneMyMusic 免费版本最多只能迁移 500 首，可以分成几次迁移到 spotify，迁移的时候编辑一下歌单名，再在 Spotify 里面合并到一个歌单，然后是由于我听的歌比较小众，所以迁移的时候 1000 首歌掉了差不多 100 首\n","date":"2024-12-22T23:26:24+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241222/24761730_29750000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%AD%8C%E5%8D%95%E8%BF%81%E7%A7%BB/","title":"歌单迁移"},{"content":"前言 ​\t有时候写了一些小服务，会上传一些不是很重要但是不想被别人看到的东西，这时候就想，如果能给网站加密就好了，但是前端加密太简陋，复杂的加密方式也不懂，干脆一了百了，防火墙限制ip访问，省心省力\n正文 服务器上的服务 ​\t对服务器上的服务限制ip访问主要使用nginx，我使用的是openresty，需要配置两个地方\n直接在1panel看更加直观\n# 在server块之前添加允许IP的配置 geo $allowed_ip { your_ip 1; default 0; } ​\t然后\n# 在server块内最开始处添加IP限制 if ($allowed_ip = 0) { return 403; # 对未授权的IP返回403禁止访问 } 部署在cloudflare上的服务或者使用CF的CDN的服务 ​\t这个比较直接，配置WAF完事，免费用户有5条规则，完全够用，要注意，是域名里面的WAF，不是全局WAF，所以cloudflare分配给你的域名绝对不要泄露，因为，直接访问那个域名是不会走我们的WAF的！！\n​\t规则的写法如下\n(not ip.src in {your_ip} and http.host in {\u0026#34;domain\u0026#34;}) ​\t后面的字段的限制优先级要高于前面的字段\n​\t最后采取的措施是阻止\n​\t意思是对于特定域名（主机名），不在ip允许范围内，全部阻止\n只有开启小云朵，流量经过cloudflare才能生效，否则是没有用的，当然，部署在cloudflare上的服务都是默认开启的\n记得清除缓存\n使用github page构建 ​\t这种方式搭建的服务必须使用public仓库，就算使用自定义域名也有一些小问题，不推荐\n使用vercel ​\t貌似限制ip访问的功能是企业用户才有，可以设置面板密码，不过个人还是不推荐\n补充——使用access ​\tcloudflare除了防火墙还有access应用，需要邮箱验证码验证才能登录，再加上ip限制，可谓十分严格，最重要的是，在这个应用里面可以任意添加域名，包括cloudflare分配的域名，这样就完全避免了陌生访客，除非cloudflare的安全不到位\n步骤 首页打开\n添加应用程序\n设置基本信息（域名，过期时间）个人使用，可以把过期时间设置长一些\n其他全部默认，设置策略\n设置策略规则\n意思是只有包括在内的邮箱和ip才能收到验证码，然后才能登录，否则全部失败\n个人使用不严格的话，可以不用ip规则，使用国家规则\n其他全部默认保存即可\n测试 填入邮箱，可以看到匹配了一个邮箱规则和一个ip规则\n我的代理没有代理ipv6，所以没有错误测试\n之后每次访问就可以看到验证界面了\n如果ip和邮箱都正确，就会收到验证码，否则是收不到的\n缺点是依然需要打开小云朵（CDN代理）\n","date":"2024-12-22T15:44:46+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/26348784_29434800.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2%E7%A7%81%E6%9C%89%E5%8C%96/","title":"网站博客私有化"},{"content":"前言 ​\t之前博客打开总是卡半天，虽然使用了第三方的vercel CDN， 还将文章封面压缩过，但是静态资源加载依然缓慢，没办法，为了兼容美观和速度，只能上CDN了，了解过后，发现虽然国内有一些不错的性价比亚太CDN，但是未备案的域名也用不了怪不得（xingpingcn/enhanced-FaaS-in-China CDN资源都是台湾啥的），退而求其次，选择一种比较冒险的方法——白嫖大厂图床\n正文 寻找稳定的不删图或者少删图的大厂图床 ​\t在论坛经过搜索之后，对大佬Linuors 收集的国内的大厂图床很感兴趣，老哥也很爽快，直接就给了上传接口，摸索了一下，发现都是一些不设置人机验证，访问比较快的接口，感谢大佬！由于不想滥用导致被封，还是不暴露接口信息了\n抓取POST请求 ​\t除了大佬给的接口，自己也在网上找到一些套壳的大厂公益图床，这些图床大多隐藏了原始接口，但是图片实实在在的上传到了大厂的图床上，也返回了一样的链接，像这一种就比较直接，可以直接复制原始上传信息，利用AI工具筛选，找到有用的认证信息，接入自己的图床\n​\t还有一种，比如微博和阿里经常使用不直接对post请求返回url，而是先返回特殊（可能base64）编码过的图片数据，如果可以预览的话，再刷新一次，复制图片链接可以看到直链，这种要么上传的原始数据大多都是返回的编码数据不好分析，要么弯弯绕绕，有好几次请求，而且认证信息实名或者过期时间很短，干脆放弃。\n上传图片 ​\t最后在大佬的带领下找到了好些不错的接口，jd，美团，4399等等……再将他们整合起来形成了一个python脚本，使用request发送POST请求对指定的图片集体上传，返回json格式的链接列表，以后如果一个图片挂了，也能迅速更换其他备用源，由于防止滥用，也不便公开。\n​\tpy脚本已经上传到了RN服务器，以后少量图片可以通过alist上传，之后一键运行python脚本获取链接，大量图片建议先在本地加个前缀，批量重命名。\n图片展示 ​\t图片只要上传了，有效期就只能看厂家心情了，58图床当天上传的就马上全删了，不过还是有一批备用，方便以后寻找资源和快速更换链接，随意建了一个静态图片资源站，显示一些经常使用的图片和大厂图床的链接，最不济全挂了，也还有服务器根目录返回的图片背锅，图片展示\n​\t也可以转webp格式或者avif新兴压缩少损格式使用，比png小得多。\n实际使用 ​\t这一篇文章的封面是24，那就找24的链接进行替换，包括双引号\n现在初次加载就快的多了\n修复后的文章初始模板 先生成随机数作为图片id，再直接从对应json文件读取相应字段的链接填入\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: description: keywords: date: {{ .Date }} lastmod: {{ .Date }} draft: false toc: true weight: false imgid: {{ $id := string (add 1 (mod (now.UnixNano) 26)) }}{{ if lt (len $id) 2 }}0{{ end }}{{ $id }} image: {{ $jsonFile := printf \u0026#34;static/images/random/%02s.json\u0026#34; $id }}{{ with os.ReadFile $jsonFile }}{{ $json := . | unmarshal }}{{ index $json \u0026#34;4399\u0026#34; }}{{ end }} license: comments: false summary: 小tips……😋 categories: [suibi] tags: [日常] ai: false --- # 前言 1 # 正文 1 补充 图片格式处理工具 ​\t目前主要使用3种方式，第一种最直接，直接改后缀名（能用就行），第二种使用特殊工具\n​\tFileConverter.exe，转格式，压缩成webp都很方便，第三种使用开源工具，转换成新兴的avif格式，来自论坛的AvifGo （有时间可以自己下载下来改一下）\n图片名批处理 ​\t使用自己写的name.bat，支持前缀，序号，后缀重命名(如果有重复命名就先加一个前缀，让文件夹没有和需要的一样的命名)\n@echo off chcp 65001 \u0026gt;nul setlocal enabledelayedexpansion :: 提示用户输入前缀 set /p \u0026#34;prefix=请输入文件名前缀（直接回车则只用数字命名）: \u0026#34; :: 提示用户输入起始数字 set /p \u0026#34;start_num=请输入起始数字（直接回车默认从01开始）: \u0026#34; :: 提示用户是否需要统一后缀 set /p \u0026#34;change_ext=是否需要统一修改后缀？(Y/N，直接回车默认N): \u0026#34; if /i \u0026#34;!change_ext!\u0026#34;==\u0026#34;Y\u0026#34; ( set /p \u0026#34;new_ext=请输入新的后缀名（例如：jpg）: \u0026#34; :: 确保后缀名前有点 if not \u0026#34;!new_ext:~0,1!\u0026#34;==\u0026#34;.\u0026#34; set \u0026#34;new_ext=.!new_ext!\u0026#34; ) :: 如果用户没有输入起始数字，设置默认值为1 if \u0026#34;!start_num!\u0026#34;==\u0026#34;\u0026#34; ( set \u0026#34;start_num=1\u0026#34; set \u0026#34;num_length=2\u0026#34; ) else ( :: 移除开头的0以获取实际数值 set \u0026#34;actual_num=!start_num!\u0026#34; for /f \u0026#34;tokens=* delims=0\u0026#34; %%a in (\u0026#34;!start_num!\u0026#34;) do set \u0026#34;actual_num=%%a\u0026#34; if \u0026#34;!actual_num!\u0026#34;==\u0026#34;\u0026#34; set \u0026#34;actual_num=0\u0026#34; :: 计算原始输入的长度作为格式长度 set \u0026#34;num_length=0\u0026#34; set \u0026#34;temp_str=!start_num!\u0026#34; :strlen_loop if not \u0026#34;!temp_str!\u0026#34;==\u0026#34;\u0026#34; ( set /a num_length+=1 set \u0026#34;temp_str=!temp_str:~1!\u0026#34; goto strlen_loop ) :: 设置实际的起始数字 set \u0026#34;start_num=!actual_num!\u0026#34; ) :: 设置图片所在文件夹路径（默认为当前文件夹） set \u0026#34;folder=.\u0026#34; :: 设置计数器为用户输入的起始数字 set /a count=!start_num! :: 添加一个文件计数器 set /a files_processed=0 :: 先创建临时文件列表 dir /b /a-d \u0026#34;%folder%\\*.jpg\u0026#34; \u0026#34;%folder%\\*.png\u0026#34; \u0026#34;%folder%\\*.gif\u0026#34; \u0026#34;%folder%\\*.jpeg\u0026#34; \u0026gt; temp_files.txt 2\u0026gt;nul :: 从临时文件列表读取并重命名 for /f \u0026#34;usebackq delims=\u0026#34; %%f in (\u0026#34;temp_files.txt\u0026#34;) do ( :: 构建新文件名 set \u0026#34;newname=\u0026#34; :: 如果前缀不为空，添加前缀和连字符 if not \u0026#34;!prefix!\u0026#34;==\u0026#34;\u0026#34; ( set \u0026#34;newname=!prefix!-\u0026#34; ) :: 构建数字部分，根据指定长度补零 set \u0026#34;padded_num=000000!count!\u0026#34; set \u0026#34;formatted_num=!padded_num:~-%num_length%!\u0026#34; set \u0026#34;newname=!newname!!formatted_num!\u0026#34; :: 获取文件扩展名或使用新的后缀 if /i \u0026#34;!change_ext!\u0026#34;==\u0026#34;Y\u0026#34; ( set \u0026#34;ext=!new_ext!\u0026#34; ) else ( set \u0026#34;ext=%%~xf\u0026#34; ) :: 重命名文件 ren \u0026#34;%%f\u0026#34; \u0026#34;!newname!!ext!\u0026#34; :: 计数器加1 set /a count+=1 :: 已处理文件数加1 set /a files_processed+=1 ) :: 删除临时文件 del temp_files.txt echo 重命名完成！ echo 共处理了 %files_processed% 个文件 pause ","date":"2024-12-21T21:22:36+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/15486861_39066400.png","permalink":"https://note.zhongyangblog.eu.org/p/%E6%95%B4%E5%90%88%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/","title":"整合图片资源，优化网站访问速度"},{"content":"之前使用的vercel的ip是76.223.126.88算是vercel的优选ip ，\n76.223.126.88 原本的官方的解析CNAME记录：\ncname.vercel-dns.com 现在有大佬的项目可以提速（全部深绿，效果明显）\nhttps://github.com/xingpingcn/enhanced-FaaS-in-China\n使用示例：\n例子 1： 我部署在 vercel 的blog.domain.com博客需要加速访问速度，首先要把blog.domain.com的 cname 记录改为官方提供的域名，回到 vercel 的控制台查看 ssl 证书是否生成。生成之后再把 cname 记录改为vercel-cname.xingpingcn.top\nvercel-cname.xingpingcn.top 例子 2： 我需要加速搭建在我的 vps 的网站，我需要使用 cf 作为 cdn 并保护源 ip 。如何使用 saas 功能（需要绑定支付方式）\n如果你的网站部署在vercel则把 cname 记录改为：\nvercel-cname.xingpingcn.top 如果你的网站部署在netlify则把 cname 记录改为：\nnetlify-cname.xingpingcn.top 如果你的网站部署在netlify和vercel上，则把 cname 记录改为：\nverlify-cname.xingpingcn.top 我主要使用的是vercel\nvercel-cname.xingpingcn.top 我的域名都托管在cloudflare上，所以还是无法对workers和pages的网页加速，但是对于vercel简直就是奇效！！\n以下优选域名都是类似的服务\nvercel.cdn.cyfan.top vercel.cdn.yt-blog.top ","date":"2024-12-20T23:23:29+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/03735455_60251600.png","permalink":"https://note.zhongyangblog.eu.org/p/vercel%E5%8A%A0%E9%80%9F/","title":"Vercel加速"},{"content":"阿里云快照回滚出现openresty异常说明80被占用 没有IP6就不要监听IP6 1. 查看80端口的占用情况 首先，需要检查当前 80 端口是否被某个进程占用，可以通过以下命令来查看：\nbash 复制代码 sudo lsof -i :80 这个命令的作用是列出使用 80 端口的所有进程，参数解释如下：\nlsof：列出打开的文件。 -i :80：筛选出使用 80 端口的文件或网络服务。 2、停止 Apache 服务 可以使用以下命令停止 Apache：\nbash 复制代码 sudo systemctl stop apache2 这个命令将立即停止 Apache 服务，释放 80 端口。\n3. 禁止 Apache 开机自启动（可选） 如果不需要在系统重启后重新启动 Apache，可以禁用其开机自启动：\nbash 复制代码 sudo systemctl disable apache2 4. 确认80端口是否已释放 停止 Apache 后，可以再次检查 80 端口的状态：\nbash 复制代码 sudo lsof -i :80 如果命令没有返回任何结果，说明 80 端口已经成功释放。\n配置更加丰富的应用商店 项目地址 xxxily/local-appstore-for-1Panel: local appstore for 1Panel\n创建计划任务 脚本内容 #!/bin/bash # 1panel本地app的目录（如果不是默认安装，需修改该目录） app_local_dir=\u0026#34;/opt/1panel/resource/apps/local\u0026#34; # AppStore的git仓库地址（必选） # git_repo_url=\u0026#34;https://github.com/xxxily/local-appstore-for-1Panel\u0026#34; # git_repo_url=\u0026#34;https://github.com/1Panel-dev/appstore\u0026#34; git_repo_url=\u0026#34;https://github.com/okxlin/appstore\u0026#34; # 访问git仓库的access token，访问私有仓库时用，优先级高于账密（可选） # 建议使用access token，降低账密泄露的风险 git_access_token=\u0026#34;\u0026#34; # 访问git仓库的用户名，访问私有仓库时用（可选） git_username=\u0026#34;\u0026#34; # 访问git仓库的密码，访问私有仓库时用（可选） git_password=\u0026#34;\u0026#34; # 指定克隆的分支（可选） git_branch=\u0026#34;\u0026#34; # 指定克隆的深度（可选） git_depth=1 # 拉取远程仓库前是否清空本地app目录（可选） clean_local_app=false # 拉取远程仓库前是否清空远程app缓存（可选） clean_remote_app_cache=false # 设置克隆或拉取远程仓库时使用的代理（可选） proxyUrl=\u0026#34;\u0026#34; # 设置示例： # proxyUrl=\u0026#34;http://127.0.0.1:7890\u0026#34; # proxyUrl=\u0026#34;socks5://127.0.0.1:7890\u0026#34; # proxyUrl=\u0026#34;socks5://user:password@host:port\u0026#34; # 将远程app store工程克隆到本地的工作目录 work_dir=\u0026#34;/opt/1panel/appstore\u0026#34; set -e mkdir -p \u0026#34;$work_dir/logs\u0026#34; log_file=\u0026#34;$work_dir/logs/local_appstore_sync_helper_$(date +\u0026#34;%Y-%m-%d\u0026#34;).log\u0026#34; logs() { local message=\u0026#34;$1\u0026#34; if [ -n \u0026#34;$log_file\u0026#34; ]; then mkdir -p \u0026#34;$(dirname \u0026#34;$log_file\u0026#34;)\u0026#34; if [ $? -eq 0 ]; then echo -e \u0026#34;[$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;)] $message\u0026#34; echo \u0026#34;[$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;)] $message\u0026#34; \u0026gt;\u0026gt;\u0026#34;$log_file\u0026#34; return fi fi echo -e \u0026#34;$message\u0026#34; } # 函数: url_encode # 参数: # - url: 需要进行编码的字符串 # 返回值: # 经过URL编码后的字符串 function url_encode() { local string=$1 local length=\u0026#34;${#string}\u0026#34; local url_encoded_string=\u0026#34;\u0026#34; local c for ((i = 0; i \u0026lt; length; i++)); do c=${string:i:1} case \u0026#34;$c\u0026#34; in [a-zA-Z0-9.~_-]) url_encoded_string+=$c ;; *) url_encoded_string+=$(printf \u0026#39;%%%02X\u0026#39; \u0026#34;\u0026#39;$c\u0026#34;) ;; esac done echo \u0026#34;$url_encoded_string\u0026#34; } # 定义函数，接收一个URL参数和可选的替换字符串参数 replace_protocol() { local url=$1 local replacement=$2 # 如果没有提供替换字符串，则删除\u0026#34;http://\u0026#34;或\u0026#34;https://\u0026#34; if [[ -z $replacement ]]; then local new_url=$(echo $url | sed \u0026#34;s/http:\\/\\///\u0026#34; | sed \u0026#34;s/https:\\/\\///\u0026#34;) else local new_url=$(echo $url | sed \u0026#34;s/http:\\/\\//${replacement}/\u0026#34; | sed \u0026#34;s/https:\\/\\//${replacement}/\u0026#34;) fi # 输出替换后的URL echo $new_url } # 函数: clone_git_repo # 参数: # - url: Git仓库URL # - username: 账号（可选） # - password: 密码（可选） # - access_token: 访问令牌（可选） # - branch: 克隆分支（可选） # - depth: 克隆深度（可选，默认为0，即克隆整个仓库） function clone_git_repo() { local url=$1 local username=$2 local password=$3 local access_token=$4 local branch=$5 local depth=$6 branch=${branch:+--branch $branch} depth=${depth:+--depth $depth} echo \u0026#34;branch: $branch, depth: $depth\u0026#34; if [[ -n $access_token ]]; then echo \u0026#34;use access_token to clone\u0026#34; local fix_url=$(replace_protocol \u0026#34;$url\u0026#34;) git clone \u0026#34;https://oauth2:$access_token@$fix_url\u0026#34; $branch $depth elif [[ -n $username \u0026amp;\u0026amp; -n $password ]]; then local encoded_username=$(url_encode \u0026#34;$username\u0026#34;) local encoded_password=$(url_encode \u0026#34;$password\u0026#34;) local fix_url=$(replace_protocol \u0026#34;$url\u0026#34;) # echo \u0026#34;use username and password to clone, encoded_username: $encoded_username, encoded_password: $encoded_password, fix_url: $fix_url\u0026#34; echo \u0026#34;use username and password to clone\u0026#34; git clone \u0026#34;https://$encoded_username:$encoded_password@$fix_url\u0026#34; $branch $depth else echo \u0026#34;use default clone\u0026#34; git clone \u0026#34;$url\u0026#34; $branch $depth fi } # 取消代理 function proxy_off() { unset http_proxy unset https_proxy unset ALL_PROXY unset no_proxy logs \u0026#34;Proxy Off\u0026#34; } # 开启代理 function proxy_on() { proxy_url=\u0026#34;http://127.0.0.1:7890\u0026#34; match_str=\u0026#34;://\u0026#34; if [ -n \u0026#34;$1\u0026#34; ]; then if [[ $1 =~ $match_str ]]; then proxy_url=$1 else logs \u0026#34;Incorrect proxy_url, use defualt proxy_url\u0026#34; return fi fi export http_proxy=$proxy_url export https_proxy=$proxy_url export ALL_PROXY=$proxy_url export no_proxy=\u0026#34;localhost,127.0.0.1,localaddress,.localdomain.com\u0026#34; logs \u0026#34;Proxy On $proxy_url\u0026#34; } function scriptInfo() { echo \u0026#34;\u0026#34; logs \u0026#34;##################################################################\u0026#34; logs \u0026#34;# Name: local appstore sync helper for 1Panel #\u0026#34; logs \u0026#34;# Version: v1.0.0 #\u0026#34; logs \u0026#34;# Author: xxxily #\u0026#34; logs \u0026#34;# Github: https://github.com/xxxily/local-appstore-for-1Panel #\u0026#34; logs \u0026#34;##################################################################\u0026#34; echo \u0026#34;\u0026#34; } function main() { scriptInfo if [ ! -d \u0026#34;$app_local_dir\u0026#34; ]; then logs \u0026#34;未检测到1panel的app目录，请检查1panel是否安装正确，或修改脚本中的app_local_dir变量\u0026#34; exit 1 fi # 检查地址结尾是否包含.git，如果不包含则自动补全 if [[ \u0026#34;$git_repo_url\u0026#34; != *\u0026#34;.git\u0026#34; ]]; then git_repo_url=\u0026#34;${git_repo_url}.git\u0026#34; fi local repo_username=\u0026#34;\u0026#34; local repo_projectname=\u0026#34;\u0026#34; # 使用正则表达式匹配仓库地址中的用户名和项目名 if [[ $git_repo_url =~ .*\\/(.*)\\/(.*)\\.git ]]; then repo_username=${BASH_REMATCH[1]} repo_projectname=${BASH_REMATCH[2]} # logs \u0026#34;用户名: $repo_username\u0026#34; # logs \u0026#34;项目名: $repo_projectname\u0026#34; fi if [ -z \u0026#34;$repo_username\u0026#34; ] || [ -z \u0026#34;$repo_projectname\u0026#34; ]; then logs \u0026#34;无法提取用户名和项目名，请检查git_repo_url变量提供的地址是否正确\u0026#34; exit 1 fi mkdir -p \u0026#34;$work_dir/temp\u0026#34; local repo_user_dir=\u0026#34;$work_dir/temp/$repo_username\u0026#34; local repo_dir=\u0026#34;$repo_user_dir/$repo_projectname\u0026#34; # 根据clean_remote_app_cache变量的值决定是否清空远程app的缓存数据 if [ \u0026#34;$clean_remote_app_cache\u0026#34; = true ] \u0026amp;\u0026amp; [ -d \u0026#34;$repo_dir\u0026#34; ]; then rm -rf \u0026#34;$repo_dir\u0026#34; logs \u0026#34;已清空远程app的缓存数据\u0026#34; fi # 根据proxyUrl变量的值决定是否开启代理 if [ -n \u0026#34;$proxyUrl\u0026#34; ]; then proxy_on \u0026#34;$proxyUrl\u0026#34; fi # clone或拉取远程仓库最新代码 logs \u0026#34;准备获取远程仓库最新代码：$git_repo_url\u0026#34; if [ -d \u0026#34;$repo_dir\u0026#34; ]; then logs \u0026#34;执行git pull操作\u0026#34; cd \u0026#34;$repo_dir\u0026#34; # 强行拉取最新代码 git pull --force 2\u0026gt;\u0026gt;\u0026#34;$log_file\u0026#34; else logs \u0026#34;执行git clone操作\u0026#34; mkdir -p \u0026#34;$repo_user_dir\u0026#34; cd \u0026#34;$repo_user_dir\u0026#34; clone_git_repo \u0026#34;$git_repo_url\u0026#34; \u0026#34;$git_username\u0026#34; \u0026#34;$git_password\u0026#34; \u0026#34;$git_access_token\u0026#34; \u0026#34;$git_branch\u0026#34; \u0026#34;$git_depth\u0026#34; 2\u0026gt;\u0026gt;\u0026#34;$log_file\u0026#34; fi logs \u0026#34;远程仓库最新代码获取完成\u0026#34; if [ ! -d \u0026#34;$repo_dir/apps\u0026#34; ]; then logs \u0026#34;未检测到apps目录，请检查远程仓库是否正确\u0026#34; exit 1 fi # 根据clean_local_app变量的值决定是否清空本地app目录 if [ \u0026#34;$clean_local_app\u0026#34; = true ]; then rm -rf \u0026#34;$app_local_dir\u0026#34;/* logs \u0026#34;已清空本地原有的app\u0026#34; fi # 将远程仓库的apps目录下的所有app复制到本地app_local_dir目录下 cd \u0026#34;$repo_dir\u0026#34; cp -rf apps/* \u0026#34;$app_local_dir\u0026#34; pwd ls -lah du -sh # 根据clean_remote_app_cache变量的值决定是否清空远程app的缓存数据 if [ \u0026#34;$clean_remote_app_cache\u0026#34; = true ]; then rm -rf \u0026#34;$repo_dir\u0026#34; fi if [ -n \u0026#34;$proxyUrl\u0026#34; ]; then proxy_off fi logs \u0026#34;1panel本地app同步成功，enjoy it!\u0026#34; } main \u0026#34;$@\u0026#34; 立即执行更新数据\n更新数据 选择本地即可看到大量应用\n","date":"2024-12-20T23:21:28+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/62710053_37591700.png","permalink":"https://note.zhongyangblog.eu.org/p/1panel%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","title":"1panel使用注意事项"},{"content":"前言 灵感来自K 神的krahets/hello-algo: 《Hello 算法》：动画图解、一键运行的数据结构与算法教程。支持 Python, Java, C++, C, C#, JS, Go, Swift, Rust, Ruby, Kotlin, TS, Dart 代码。简体版和繁体版同步更新，English version ongoing\n于是想着能不能把 github 仓库存储的文件作为博客文章阅读\n演示站点 🕮 BAOER の BLOG 🕮\n效果展示 部署准备 1、本地下载 typora 或者其他 markdown 编辑器 Typora for windows — 测试版发布 \u0026mdash; Typora for windows — beta version release\n2、一个 github 账户 3、本地安装 git，用于管理仓库 3、一个 cloudflare 免费账号 4、一个 B 站账号 保姆教程 1、新建 github 仓库 访问 https://github.com/你的github用户名?tab=repositories\n填写仓库名字\npublic 还是 Private 看个人喜好，自己看就使用 Private，后面加密码验证，分享给别人就 public\n点击创建\n停留在这个界面\n2、本地创建文件夹 随便找个全英文路径文件夹作为上传文件夹，不要使用你的 typora 的笔记文件夹\n把你要上传的.md 文件放到这个文件夹\n从1143520/git-blog-share下载 git_upload.bat 和 git_delete.bat\n用于管理仓库文件\n双击运行 git_upload.bat\n因为 github 国内访问不畅，你知道的呀，需要开启代理\n开启代理确保能够正常访问后,在设置中找到自己的代理端口，比如我的是 5229\n在 git_upload.bat 填入 5229 之后回车\n复制仓库的 git 地址填入之后回车\n选择需要上传的文件编号，0 为全部上传，和 git 是一样的，只是增量上传\n比如 1 3 5 就是上传 1、3、5 这几个文件\n回车上传，自动 main 分支，确保本地安装了 git，而且登陆了 github 账户，\n详细请参考手把手教你用 git 上传项目到 GitHub（图文并茂，这一篇就够了），相信你一定能成功！！ - 知乎\nSUCCESS 即为成功\n回到仓库1143520/git-blog-share刷新\n可以看到已经有了文件\n本地生成了 git 的默认配置和 bat 的配置文件夹，注意不要误删\ngit_delete.bat 是用于删除仓库某个文件，本地不变，使用方法同理，大伙可以用 GPT 把二者合成一个 bat\n3、配置 cloudflare 的 workers 进入 CF 点击 workers and pages 进行创建\n自定义名称然后部署\n继续处理项目\n编辑添加以下变量\n变量名 必填 说明 GITHUB_TOKEN 是 GitHub Personal Access Token，用于访问仓库内容 GITHUB_OWNER 是 GitHub 用户名或组织名 GITHUB_REPO 是 博客内容所在的仓库名称 ADMIN_PASSWORD 否 博客管理员密码，仅在 enablePasswordProtection 为 true 时需要 GITHUB_TOKEN 在登录 github 后访问\nPersonal Access Tokens (Classic) 手动生成，需要 repo 也就是仓库查看的权限（公开仓库限额太少，使用 token 可以增加限额，也可以访问私库）\n点击\n选择 Generate new token (classic)\n完成验证（如果有）\n名称随意，过期时间自己把握，repo 一定要打勾\n点击底下的\n复制 token （只显示一次）填入密钥类型的变量，变量名为 GITHUB_TOKEN\n相对应的填入其他变量\n然后点击编辑代码\n将git-blog-share/worker.js at main · 1143520/git-blog-share的内容复制后粘贴到 workers 全选替换之后部署\n选择是否启用密码验证，和设置站点标题和 logo\n之后点击访问大功告成\n补充 1、自定义域名 2、填入变量注意前后不要有空格 3、推荐搭配 typora+bili 图床使用（已经失效，还是使用自己的图床接口吧） xlzy520/typora-plugin-bilibili: Typora 粘贴图片自动上传到 Bilibili 图床，也可以自定义修改成任意其他图床接口。使用教程：https://b23.tv/urxCc3\n4、更多内容请阅读仓库文档或者阅读代码后自行修改 ","date":"2024-12-20T23:19:41+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/65430156_75759800.png","permalink":"https://note.zhongyangblog.eu.org/p/workers%E8%BD%BB%E9%87%8F%E5%8D%9A%E5%AE%A2/","title":"Workers轻量博客"},{"content":"cloudflare 搭建文件中转和图床 项目地址：1143520/dropbox 前言 cloudflare 真是大善人啊，但是不是很清楚 pages 的免费额度 准备工作 1、一个 cloudflare 账户\n2、一个域名托管到 cloudfalre\n3、一个 github 账户\n4、一双手\n操作步骤 1、打开1143520/dropbox并且 fork 到自己的仓库，\n或者下载源代码修改后上传到自己的仓库\n2、登录 cloudflare 打开 workers and pages，创建 page\n连接到 git\n选择仓库\n按照下面的填，构建命令\nnpm install 输出一个.\n保存并部署\n继续处理项目\n添加变量\n选择密码，变量名为 CLOUDFLARE_API_TOKEN，值需要自己到个人资料创建 api\n选择编辑 workers 模板\n可以不修改，起码要有 KV 存储和 pages\n选择自己的账户和域名\n一直继续直到创建令牌并且复制\n填入复制的值\n创建 D1 数据库和两个 KV 存储\n名称随意\n点击创建\n创建 KV 存储\n一个存图片，名称随意\n一个存文件，貌似最大 25M\n回到刚才创建的 pages 进行绑定\n数据库的变量名叫做 DB\nKV 的变量名分别是 IMAGES 和 FILES，要对应\n之后重试部署\n出现请在 Cloudflare Pages 设置中绑定 D1 数据库，则重新绑定数据库，重新部署\n最后自定义域名就可以愉快玩耍了\n支持全局复制图片，文件，代码，文字消息\n就是很消耗额度，每天 10W 免费额度，我才一天消耗了 1W 多，我在想要是不实时同步，请求次数应该少得多\n演示地址：https://drop-share.1143520.xyz/\n博客：无服务器–Cloudflare 搭建文件中转和图床 – BAOER.BLOG\n","date":"2024-12-20T23:17:57+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/94249769_66035700.png","permalink":"https://note.zhongyangblog.eu.org/p/cloudflare-%E6%90%AD%E5%BB%BA%E6%96%87%E4%BB%B6%E4%B8%AD%E8%BD%AC%E5%92%8C%E5%9B%BE%E5%BA%8A/","title":"Cloudflare 搭建文件中转和图床"},{"content":"前言 石头奶没有灵魂啊😒\n正文 折戟把酒诗煌游，琴曲舞剑枕下柳 打开游戏根目录 找到这个文件（我打开根目录是 NARAKA BLADEPOINT\\ ） \u0026ldquo;F:\\steam\\steamapps\\common\\NARAKA BLADEPOINT\\NarakaBladepoint_Data`QualitySettingsData.txt`\u0026rdquo;\n打开它 找到\u0026quot;characterAdditionalPhysics1\u0026quot;:false 改成true 保存重启游戏 啊这😘 ","date":"2024-12-20T21:54:50+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/82768294_58041000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%B0%B8%E5%8A%AB%E6%97%A0%E9%97%B4%E6%94%B9%E7%9F%B3%E5%A4%B4%E5%A5%B6/","title":"永劫无间改石头奶"},{"content":"前言 记录一些使用vscode和cursor的小问题，省的以后翻浏览记录\n正文 开启代码右侧预览 首选项设置搜索editor.minimap.enabled\n卸载cursor 连之前通过终端安装设置的hugo程序和go都受到了影响，挺抽象的，不知道是geek卸载的锅还是cursor的，只好重新设置环境变量了\n补充一下git的环境变量\nC:\\Program Files\\Git\\cmd\\ 检查是否配置成功\ngit --version 修改hosts 修改位置\nC:\\Windows\\System32\\drivers\\etc\\hosts QD自动签到模板制作\n教程：搭建自动签到服务_51CTO博客_自动签到\n常用小工具 html加密\njs压缩\ncss压缩\n","date":"2024-12-20T12:03:07+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/53249802_01879700.png","permalink":"https://note.zhongyangblog.eu.org/p/vscode%E4%BD%BF%E7%94%A8tips/","title":"Vscode使用tips"},{"content":"前言 想着写一个可以每次访问都能返回不同的图片的网址，用来做渐变背景\n项目地址1143520/picture-api\n正文 部署教程 十分easy，直接fork部署在workers上就行，没有任何其他设置。然后自定义域就行\n注意 图片存储位置在github仓库\nhttps://github.com/1143520/picture-api/blob/main/public 在picture-api有bat可以一键重命名成数字，但是图片后缀类型没有改\n你也可以换成自己的图片url，设置在\nhttps://github.com/1143520/picture-api/blob/main/src/index.js 构建完之后直接到cloudflare编辑代码，修改图片列表（本身图比较多，可能很卡）\n模式1顺序循环，模式2随机循环\nREADME有简单使用教程，你也可以问问万能的GPT，一般都是CSS搭配java作为背景轮播\n效果 设置了缓存，保持随机性的同时，当加载一样的图片减少请求\n// 返回图片，并设置缓存控制 return new Response(response.body, { headers: { ...headers, \u0026#39;Content-Type\u0026#39;: contentType || \u0026#39;image/jpeg\u0026#39;, \u0026#39;Cache-Control\u0026#39;: \u0026#39;public, max-age=8640000\u0026#39;, // 缓存24小时 \u0026#39;ETag\u0026#39;: `\u0026#34;${index}\u0026#34;`, // 添加 ETag 用于缓存验证 \u0026#39;Vary\u0026#39;: \u0026#39;Origin, Accept\u0026#39;, // 添加 Vary 头部 \u0026#39;Content-Disposition\u0026#39;: \u0026#39;inline\u0026#39;, }, }); ctrl+F5强制刷新\n","date":"2024-12-19T18:46:30+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/89863621_85440500.png","permalink":"https://note.zhongyangblog.eu.org/p/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87apiworkers%E9%83%A8%E7%BD%B2/","title":"随机图片api——workers部署"},{"content":"前言 相信很多MJJ和我一样，因为平时没时间关注鸡圈，导致经常错过一些关键的时间节点，比如传家宝的续费，黑五抢购，一些限时的优惠，因此，我开发了这一款MJJ提醒工具，无需服务器，还是薅我们的赛博活佛——cloudflare的羊毛，为了避免网站沉寂不工作，我们使用监控工具 cron-job.org Console 进行定时触发。网站demo\n灵感来自 woniu336大佬 的已有项目 MJJ订阅追踪，但是大佬的项目提醒和部署在服务器上不适合我，所以自建了一个\n正文 下面就开始搭建吧\n项目地址\n准备工具 Cloudflare 账号 Cloudflare Pages Cloudflare D1 数据库 Telegram Bot Token 和 Chat ID 企业微信 Webhook 地址 数据库 在 Cloudflare Workers 中创建 D1 数据库\n然后在控制台执行查询命令\nCREATE TABLE reminders ( id TEXT PRIMARY KEY, title TEXT NOT NULL, content TEXT NOT NULL, remind_time TEXT NOT NULL, cycle_type TEXT NOT NULL, status INTEGER DEFAULT 0, link TEXT, cron_job_id INTEGER, created_at TEXT ); 部署步骤 注册并且获取cron-job.org Console的api key只能创建一个，但是可以随时修改\nfork项目，1143520/deadline 或者下载源码，git上传 在 Cloudflare Pages 中创建新项目 连接您的 Git 仓库（GitHub、GitLab 等），选择刚刚fork的项目 点击部署 在 Pages 项目设置中： 绑定 D1 数据库，设置变量为DB 配置环境变量（见环境变量配置部分） CRON_SECRET: 定时任务的访问密钥（按照个人喜好设置）\nCRONJOB_API_KEY: cron-job.org 的 API KEY\nTG_BOT_TOKEN: Telegram Bot Token（推送到tg机器人）（这个应该都会吧）（必须至少设置一个通知，否则网站无法访问）\nTG_CHAT_ID: Telegram Chat ID\nWECOM_KEY: 企业微信 Webhook 地址（完整的url，推送到微信企业机器人，可选）（这个也可以网上找教程）\nBARK_KEY:bark提醒（可选）\n其他通知渠道可以在deadline/functions/api/notify.js at main · 1143520/deadline自行设置 类似 if (env.BARK_KEY) {} 结构清晰\n重试部署 使用 网站界面 添加任务 注意，提醒时间不能在3min之内，否则会跳过第一次提醒\n可选：\n- 单次提醒：只提醒一次\n- 每周循环：在指定的每周某一天重复提醒\n- 每月循环：在每月的指定日期重复提醒\n- 每年循环：在每年的指定日期重复提醒\n【如果你还不满意，可以到cron-job.org Console自行编辑，除了单次任务会自动删除，其他的可以循环触发】\n注意单次任务执行完成之后会自动删除任务，下面以周循环为例\n点击任务的编辑可以看到下一次执行时间，实际上是循环的，只显示最近5个\n提醒消息样式 总结 使用pages构建，js后端处理，引入外部定时任务cron-job.org Console 定时触发任务，避免轮询造成免费额度的浪费，和保持提醒的可靠性，请勿泄露API KEY！\n使用 cron-job.org 的免费计划有以下限制： - 最多创建 50 个定时任务 - 最短执行间隔为 1 分钟 - 每个任务的超时时间为 30 秒 - 每月可执行 10,000 次 - 每个任务最多可以设置 100 个不同的执行时间点 欢迎点赞给鸡腿哦😚\n","date":"2024-12-17T16:31:04+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/95731313_19188700.png","permalink":"https://note.zhongyangblog.eu.org/p/mjj%E6%8F%90%E9%86%92%E5%B7%A5%E5%85%B7%E4%B8%8D%E5%86%8D%E9%94%99%E8%BF%87%E5%85%B3%E9%94%AE%E6%8A%A2%E8%B4%AD/","title":"MJJ提醒工具——不再错过关键抢购"},{"content":"\n","date":"2024-12-16T21:48:27+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/94249769_66035700.png","permalink":"https://note.zhongyangblog.eu.org/p/%E8%B5%84%E6%BA%90%E5%9B%BE%E7%89%87/","title":"资源图片"},{"content":"在原作者的基础上略加修改，使用随机图片封面和默认分类标签 随机图片位于/static/images/random/目录下，可以使用 bat 自动重命名为“01”等，需要手动添加 建议压缩到 2M 以下，网上找了许多压缩图片工具大多只支持最大5M的图片，找了半天半天发现本地的file convert反而最好用，虽然压缩超过 3 次后质量压缩严重，但是目前还是可以接受\n源码（\\archetypes\\default.md）奉上\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; slug: description: keywords: date: {{ .Date }} lastmod: {{ .Date }} draft: false toc: true weight: false {{ $id := (add 1 (index (shuffle (seq 1 182)) 0)) -}} imgid: {{ printf \u0026#34;%03d\u0026#34; $id }} image: {{ $jsonFile := printf \u0026#34;static/images/random/%03d.json\u0026#34; $id }}{{ with os.ReadFile $jsonFile }}{{ $json := . | unmarshal }}{{ index $json \u0026#34;4399\u0026#34; }}{{ end }} license: comments: false summary: 小tips……😋 categories: [suibi] tags: [日常] ai: false --- # 前言 1 # 正文 1 解读 --- # 这是YAML前置参数的开始标记 title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; # 标题生成逻辑： # 1. .Name 获取文件名 # 2. replace 将文件名中的\u0026#34;-\u0026#34;替换为空格 # 3. title 将每个单词首字母大写 slug: # 文章的URL别名，留空则使用文件名 description: # 文章描述 keywords: # 文章关键词 date: {{ .Date }} # 自动插入文章创建时间 lastmod: {{ .Date }} # 自动插入文章最后修改时间 draft: false # 是否是草稿，false表示直接发布 toc: true # 是否显示目录 weight: false # 文章权重，用于排序 # 下面是随机图片ID生成的核心代码 {{ $id := (add 1 (index (shuffle (seq 1 182)) 0)) -}} # 1. seq 1 182 生成1到182的序列 # 2. shuffle 随机打乱这个序列 # 3. index ... 0 获取打乱后的第一个数字 # 4. add 1 确保结果在1-182之间 # 5. := 将结果存储在变量$id中 imgid: {{ printf \u0026#34;%03d\u0026#34; $id }} # 将随机数格式化为三位数，如001、002等 image: {{ $jsonFile := printf \u0026#34;static/images/random/%03d.json\u0026#34; $id }}{{ with os.ReadFile $jsonFile }}{{ $json := . | unmarshal }}{{ index $json \u0026#34;4399\u0026#34; }}{{ end }} # 1. 构建JSON文件路径：static/images/random/001.json # 2. 读取对应的JSON文件 # 3. 解析JSON内容 # 4. 获取键名为\u0026#34;4399\u0026#34;的图片URL license: # 文章版权声明 comments: false # 是否开启评论 summary: 小tips……😋 # 文章摘要 categories: [suibi] # 文章分类 tags: [日常] # 文章标签 ai: false # 是否是AI生成的内容 --- # YAML前置参数的结束标记 # 前言 # Markdown格式的文章内容开始 1 # 正文 1 ","date":"2024-12-16T09:53:39+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/17803376_86810000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E9%BB%98%E8%AE%A4%E6%96%87%E7%AB%A0yaml-front-matter/","title":"默认文章YAML Front Matter"},{"content":" 在构建之前重新恢复文件在本地系统的修改时间，避免被commit时间覆盖导致显示错误\nGitHub Actions 自动部署 Hugo 博客说明文档 本文档详细说明了 .github/workflows/main.yml 文件的配置和工作原理。这个工作流程用于自动构建和部署 Hugo 博客到 GitHub Pages。\n触发条件 on: push: branches: - main # 更新触发的分支 工作流会在 main 分支收到推送时自动触发。\n运行环境 jobs: build-deploy: runs-on: ubuntu-20.04 使用 Ubuntu 20.04 作为构建环境，这是为了确保构建环境的稳定性。\n构建步骤 1. 设置时区 - name: Set timezone run: | sudo timedatectl set-timezone Asia/Shanghai 将系统时区设置为中国时区（UTC+8），确保生成的时间戳正确。\n2. 检出代码 - name: Check out repository code uses: actions/checkout@v4 with: submodules: recursive # 获取 Hugo 主题 fetch-depth: 0 # 获取完整的 Git 历史 submodules: recursive: 递归克隆所有子模块，确保主题文件完整 fetch-depth: 0: 获取完整的 Git 历史，这对于获取文件的修改时间很重要 3. 恢复文件时间戳 - name: Restore file timestamps run: | git ls-files -z | while read -d \u0026#39;\u0026#39; file; do timestamp=$(git log -1 --format=\u0026#34;%at\u0026#34; -- \u0026#34;$file\u0026#34;) touch -d @$timestamp \u0026#34;$file\u0026#34; done 这个步骤很关键，它解决了 Hugo 获取文件修改时间的问题：\ngit ls-files -z: 列出所有被 Git 追踪的文件（使用 null 字符分隔） git log -1 --format=\u0026quot;%at\u0026quot;: 获取每个文件最后一次提交的 Unix 时间戳 touch -d @timestamp: 将文件的修改时间设置为该时间戳 4. 设置 Hugo 环境 - name: Setup hugo uses: peaceiris/actions-hugo@v3.0.0 with: hugo-version: \u0026#34;0.127.0\u0026#34; extended: true 安装指定版本的 Hugo Extended 版本。Extended 版本支持 SCSS/SASS 处理。\n5. 缓存资源 - name: Cache resources uses: actions/cache@v3 with: path: resources key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- 缓存 Hugo 的资源文件以加快构建速度：\n缓存路径为 resources 目录 缓存键基于操作系统和内容文件的哈希值 当内容变化时会自动创建新的缓存 6. 构建站点 - name: Build Hugo static files run: hugo --gc --minify 使用 Hugo 构建静态文件：\n--gc: 构建后运行垃圾收集 --minify: 最小化 HTML、CSS、JS 等文件 7. 部署到 GitHub Pages - name: Deploy to Github Pages uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: 1143520/1143520.github.io publish_dir: ./public publish_branch: main commit_message: ${{ github.event.head_commit.message }} 将构建好的文件部署到 GitHub Pages：\npersonal_token: 使用个人访问令牌进行认证 external_repository: 指定部署的目标仓库 publish_dir: 指定要发布的目录（Hugo 的输出目录） publish_branch: 指定发布到哪个分支 commit_message: 使用触发构建的提交信息作为部署提交信息 注意事项 需要在 GitHub 仓库的 Secrets 中设置 PERSONAL_TOKEN 确保目标仓库存在且有正确的访问权限 时区设置确保了生成的时间戳正确 文件时间戳的恢复确保了 Hugo 可以获取正确的文件修改时间 故障排除 如果部署失败，请检查：\nPersonal Token 是否有效且具有正确的权限 外部仓库是否存在且配置正确 Hugo 版本是否兼容 主题子模块是否正确克隆 源码 name: Auto Deploy hugo on: push: branches: - main # 更新触发的分支 jobs: build-deploy: # runs-on: ubuntu-latest runs-on: ubuntu-20.04 steps: - name: Set timezone run: | sudo timedatectl set-timezone Asia/Shanghai - name: Check out repository code uses: actions/checkout@v4 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Restore file timestamps run: | git ls-files -z | while read -d \u0026#39;\u0026#39; file; do timestamp=$(git log -1 --format=\u0026#34;%at\u0026#34; -- \u0026#34;$file\u0026#34;) touch -d @$timestamp \u0026#34;$file\u0026#34; done - name: Setup hugo uses: peaceiris/actions-hugo@v3.0.0 with: # hugo-version: \u0026#34;latest\u0026#34; # 可以修改为你使用的 Hugo 版本 hugo-version: \u0026#34;0.127.0\u0026#34; extended: true # 设置是否需要 extended 版本 - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v3 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build Hugo static files # 部署静态资源 run: hugo --gc --minify - name: Deploy to Github Pages # 部署到Github Pages页面 uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: 1143520/1143520.github.io publish_dir: ./public # hugo 生成到 public 作为跟目录 publish_branch: main # Github Pages 所在分支 commit_message: ${{ github.event.head_commit.message }} ","date":"2024-12-15T23:38:14+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/19005694_28971800.jpg","permalink":"https://note.zhongyangblog.eu.org/p/%E6%A0%A1%E6%AD%A3%E6%9E%84%E5%BB%BA%E6%97%B6%E8%A6%86%E7%9B%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E5%90%8E%E7%9A%84%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/","title":"校正构建时覆盖文件的最后的修改时间"},{"content":"1、源代码仓库hugo，静态资源仓库public 2、public不能上传到hugo仓库，否则构建出错 3、token一定要有workflow和repo权限 4、垃圾edge，使用ctrl+F5刷新网页 5、新建文章或者在文章之前插入 yaml front matter\ntitle: \u0026#34;TG同步消息的留言板\u0026#34; slug: description: keywords: date: 2024-12-14T15:40:19+08:00 lastmod: 2024-12-14T15:40:19+08:00 draft: false toc: true weight: false image: license: comments: summary: categories: [share] tags: [测试] ai: true 6、置顶文章 在 Hugo 中，可以通过在文章的 Front Matter 中添加 weight 参数来实现文章置顶。\nweight 的值越小，文章就会排在越前面。比如说：\n对于想要置顶的文章，在文章开头的 Front Matter 中添加：\ntitle: \u0026#34;你的文章标题\u0026#34; date: 2024-01-01 weight: 1 *# 添加这一行，数字越小越靠前* 普通文章不需要设置 weight，它们会按照日期自动排序。\n如果有多个置顶文章，可以通过设置不同的 weight 值来控制它们之间的顺序：\nweight: 1 最靠前\nweight: 2 次之\nweight: 3 再次之\n以此类推\u0026hellip;\n这样设置后，具有 weight 参数的文章会优先显示在博客列表的最上方，而其他文章则会按照发布日期排序显示在下方。\n7、hugo短码语法 感谢woniu336大佬的主题和hugo教程\nhttps://blog.taoshuge.eu.org/p/code/ 8、图片路径 1. 路径中使用正斜杠 / 而不是反斜杠 \\ 2. 如果图片放在 static 目录下，引用时不需要包含 static 这个词 9、新的目录和tag 注意修改content\\categories文件夹的时候里面是_index.md文件，而不是index.md文件！！\n10、上传只需要使用脚本里面的选项5，不再需要3和8，自动构建会把静态资源推送的，8会覆盖掉！！！ 11、指定代码类型 比如```yaml会出错，奇怪的是只有改教程1、2、3会出错，在自己写的文章定义代码类型就有高亮，真是奇怪，没有代码高亮，后面再改吧，或者用prismjs\n12、twikoo图床 使用smms服务，token一旦更改就会失效\n13、图床失效建议（所有截图尽量先在typora粘贴缓存再上传） typora有缓存，在后台重新设置接口之后，\n右键选择拷贝图片，然后ctrl+v粘贴就行（可以看到本地图片地址C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images根据截图的时间命名快速锁定），只有本身在本地的截图有效，而且二次拷贝不到本地图片，虽然很麻烦，等哪天有时间搓个python或者bat\n14、代码高亮问题（谜一样的bug） 有时候指定语言js的代码块渲染会变成这样（只有深色模式有这个bug）貌似是对比度还是啥的（字体变粗变圆）验证过了\n确实是深色模式的代码块配色，但是个人不喜欢\n之后指定代码类型javascript之后，又重新构建了一篇一模一样的文章\n显示就正常了（奇葩的是markdown渲染是一个整体，一个代码块有问题其他代码块也要遭殃）\n找到原因了，应该是样式覆盖了，使用了prism的高亮，强行注入了字体阴影，text-shadow，而不是使用 Hugo 的内置 Chroma 语法高亮\n然而更加神奇的是这个prism完全是外部引用https://cdn.jsdelivr.net/npm/prismjs@1.28.0/themes/prism.min.css ，一般不抽风是不会使用的，所以是哪里引用了这个css呢？我们找一下这个构建的html也没有，那这？就是本地行为？？？？？\n解决办法：通过themes\\hugo-magic\\assets\\scss\\custom.scss覆盖样式\n在代码最后添加：(尽量使用第一种，少修改，避免覆盖样式)\n//--------------------------------------------------- // 覆盖Prism.js的样式 .article-content { pre, code { text-shadow: none !important; // 移除文字阴影 } .language-yaml, .language-yml, [class*=\u0026#34;language-\u0026#34;] { code { text-shadow: none !important; } } } 或者完全禁用\n//--------------------------------------------------- // 覆盖Prism.js的样式 .article-content { pre, code { text-shadow: none !important; font-family: var(--code-font-family) !important; text-align: initial !important; white-space: pre !important; word-spacing: normal !important; word-break: normal !important; word-wrap: normal !important; line-height: normal !important; tab-size: initial !important; hyphens: none !important; background: none !important; font-size: initial !important; padding: 0 !important; margin: 0 !important; border: none !important; box-shadow: none !important; border-radius: 0 !important; -webkit-hyphens: none !important; -moz-hyphens: none !important; -ms-hyphens: none !important; } .language-yaml, .language-yml, [class*=\u0026#34;language-\u0026#34;] { code { text-shadow: none !important; font-family: var(--code-font-family) !important; text-align: initial !important; white-space: pre !important; word-spacing: normal !important; word-break: normal !important; word-wrap: normal !important; line-height: normal !important; tab-size: initial !important; hyphens: none !important; background: none !important; font-size: initial !important; padding: 0 !important; margin: 0 !important; border: none !important; box-shadow: none !important; border-radius: 0 !important; -webkit-hyphens: none !important; -moz-hyphens: none !important; -ms-hyphens: none !important; } } } 缺陷是选中代码背景颜色不统一，暂未解决\n15、github自定义域名 由于初始是浅色主题（主题的bug），自定义域名会导致这个过程的延迟巨高，无比明显，造成视觉上的严重损害，所以只能暂且放弃\n16、主题切换时指示器文字不变 themes\\hugo-magic\\assets\\ts\\colorScheme.ts 的问题，已经修复\n17、尽量使用目录，否则代码块会抽风，可以在文头关闭TOC 18、单页应用一般的流畅 有时候从主页进入文章很快，是引入了预加载机制，预加载数是每页文章数的4倍最佳，位置：themes\\hugo-magic\\layouts\\partials\\head\\custom.html\n\u0026lt;!-- 引入 Flying Pages --\u0026gt; \u0026lt;script\u0026gt; window.FPConfig = { delay: 0, // 浏览器空闲多少秒后开始预加载 ignoreKeywords: [], // 不进行预加载的链接 例 [\u0026#34;#\u0026#34;, \u0026#34;/about\u0026#34;] maxRPS: 25, // 每秒最大加载数 hoverDelay: 50 // 鼠标悬浮后预加的延迟，毫秒单位 }; \u0026lt;/script\u0026gt; 达到的效果如下\n19、更改网站图标和头像（小坑） ​\t网站图标直接在static里面修改就行，hugo.yaml显示的是正确的\n​\t但是修改头像需要小心，虽然一样是再static里面，但是首先必须确保hugo.yaml里面的这个地方使用的是false\navatar: enabled: true # 是否启用头像 local: false # 是否使用本地头像,false,直接用static文件夹，true,使用public文件夹（但是线上访问public就是复制的static，不修改成false的话，不会刷新时间戳，也不会将新的头像复制到public） src: /img/me22.png # 头像路径(必须改名，否则会有缓存，无法更新头像) ​\t修改public文件夹是没有用的，每一次推送根据构建文件都会把图片覆盖掉\n​\t如果还不行，修改文件名再上传构建，触发刷新缓存，避免使用上一个时间戳的缓存头像\n我们可以复制头像链接，发现是 https://note.aliya.news/img/me22.png 就是OK的，检查public仓库，可以看到，原来的头像已经不见了，只有新的图片\n20、添加 Turbolinks 支持 详细可看 添加 Turbolinks 支持\nthemes\\hugo-magic\\layouts\\_default\\baseof.html 21、奇葩的bug，ai（摘要）切换一次true和false，不然有的文章typora显示错误 22、博客字数统计问题 最近访问博客的时候发现统计的字数和文章的实际字数怎么差这么多，一番查找，问题在于主要的配置文件hugo.yaml\n# 主题的国际化支持 # 可用的值: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: zh-cn # 默认内容语言 # 如果 DefaultContentLanguage 是 [zh-cn ja ko]，将 hasCJKLanguage 设置为 true # 这将使 .Summary 和 .WordCount 正确处理 CJK 语言。 hasCJKLanguage: true # 设置是否包含中日韩语言 languages: zh-cn: languageName: 中文 # 语言名称 title: # 语言对应的标题 weight: 1 # 语言的权重 params: description: docker教程，python教程，AI教程，云服务器技术。 # 描述 在语言设置相关项中，hasCJKLanguage需要设置成true才能统计中文（中英文的统计逻辑不同）统计结果为标题加上所有的文章内容，英文单词没有空格算一个，和typora统计一致\n23、文章中的链接文本悬停时深色模式显示 悬停效果是通过下划线的高度和透明度变化实现的动画效果，透明度太高，文字根本看不清\n修改位置themes\\hugo-magic\\assets\\scss\\variables.scss\n代码（最后一个悬停时的透明度修改成0.3）\n/* * Article content style */ :root { --blockquote-border-size: 4px; --blockquote-background-color: rgb(248 248 248); --heading-border-size: 4px; --link-background-color: 189, 195, 199; --link-background-opacity: 0.5; --link-background-opacity-hover: 0.3; ","date":"2024-12-15T03:56:11+08:00","image":"https://img.meituan.net/video/1254de0c71736e5846e8239eeb395bb11420405.jpg","permalink":"https://note.zhongyangblog.eu.org/p/hugo%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/","title":"HUGO搭建使用注意"},{"content":"TG同步消息的留言板 前言 脱胎于项目1143520/dropbox，也可以看教程🍹 BAOER の BLOG 🍍，还是使用cloudflare的pages搭建，现在称呼一句TG图床也不为过。\n演示地址：Drop中转站\n项目地址：1143520/tg-box 因为是改的，本来想可以在CF-KV和TG之间随意切换的，太乱了，不丢人显眼了\n可以联系我，上面的演示地址。\n配置截图 @BotFather创建机器人，记下 token，把机器人拉到你的群组。再把@raw_data_bot拉进你的群组查看群组的chat id 使用方法 上传图片或者视频，点击复制，获取一个可以在浏览器直接预览的链接，叫图床还是视频床呢？存储在TG群聊，也不知道期限是多久，多大储存空间，反正最大20M。\n有啥好事直接留言板联系！Drop中转站\n","date":"2024-12-14T15:40:19+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/26348784_29434800.jpg","permalink":"https://note.zhongyangblog.eu.org/p/tg%E5%90%8C%E6%AD%A5%E6%B6%88%E6%81%AF%E7%9A%84%E7%95%99%E8%A8%80%E6%9D%BF/","title":"TG同步消息的留言板"},{"content":"wordpress博客搭建 1、在1panel创建php环境，选择wordpress模板，创建网站，进入网站根目录 2、远程拉取，下载解压（用于创建新的网站） 查看最新版本\nhttps://cn.wordpress.org/download/ 远程下载链接（替换版本号）\nhttps://cn.wordpress.org/wordpress-6.7.1-zh_CN.zip 解压后全选移动到根目录\n现在就可以访问网址了，配置数据库也可以在本地编辑wp-config.php（新建，将WordPress安装目录下的wp-config-sample.php文件复制到wp-config.php文件中，并将wp-config-sample.php文件作为备份）\n给与index目录包括子文件夹0777权限（省事），否则后面很多操作需要配置FTP\n3、备份以及迁移 使用duplicator插件\n先在原来的后台工具-导出-wordpress 会得到一个xml文件\n然后使用duplicator插件，提示路径问题就给0777权限\n保持一样的域名，只修改DNS解析ip，和上面一样，搞好运行环境和数据库和SSL\n使用duplicator，确保网站根目录为空！！\n上传Installer和备份文件，\n访问\nhttps://您的域名/installer.php 教程\nhttps://www.wpdaxue.com/wordpress-migration-plugin-duplicator.html 如果有redis缓存还要修改wp-config.php，之后才能点击进行登录\n如果提示文件不存在，则使用之前导出的xml导入覆盖\n切记，不要批量启用插件！安装之后是自动启用的，把不需要的禁用就行，一个个来，出问题了直接删除网站重来\n","date":"2024-12-14T15:40:19+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/17803376_86810000.jpg","permalink":"https://note.zhongyangblog.eu.org/p/wordpress%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","title":"Wordpress博客搭建"},{"content":"hugo.yaml 几乎所有自定义都在根目录 hugo.yaml 文件中去修改\nAI 摘要 AI 摘要脚本 sm.py 在根目录下,不要移动到其他地方,需要安装 python,然后运行\npython sm.py 输入slug: slug 就是文章的 slug 字段,在标题的下方,可自定义,不能是中文,前面不要加数字 0\n输入summary: 输入摘要,可以在浏览器安装 kimi 阅读助手插件\n下载 python\nhttps://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe 底部图标 页面底部的图标在 footer_links.json 文件中修改,\nhugo 短代码 直接抄的大佬的，以后也会自己补充\n本文为了防止在代码块中的短代码被 Hugo 转译，在代码块中添加了 \\，请在使用时去除\nnotice {\\{\u0026lt; notice notice-warning \u0026gt;}} 你好。 {\\{\u0026lt; /notice \u0026gt;}} {\\{\u0026lt; notice notice-info \u0026gt;}} 你好。 {\\{\u0026lt; /notice \u0026gt;}} {\\{\u0026lt; notice notice-note \u0026gt;}} 你好。 {\\{\u0026lt; /notice \u0026gt;}} {\\{\u0026lt; notice notice-tip \u0026gt;}} 你好。 {\\{\u0026lt; /notice \u0026gt;}} 预览\n你好。\n隐藏内容 {\\{\u0026lt; detail \u0026#34;点这里看隐藏内容！\u0026#34; \u0026gt;}} 这里是隐藏内容！🥰 {\\{\u0026lt; /detail \u0026gt;}} 预览\n点这里看隐藏内容！ 这里是隐藏内容！🥰 聊天气泡 {\\{\u0026lt; chat position=\u0026#34;left\u0026#34; name=\u0026#34;John Doe\u0026#34; timestamp=\u0026#34;2023-09-12 14:30\u0026#34;\u0026gt;}} 这是左边的消息内容。 {\\{\u0026lt; /chat \u0026gt;}} {\\{\u0026lt; chat position=\u0026#34;right\u0026#34; name=\u0026#34;Alice\u0026#34; timestamp=\u0026#34;2023-09-12 14:45\u0026#34; \u0026gt;}} 这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。 {\\{\u0026lt; /chat \u0026gt;}} 预览\nJohn Doe\u0026nbsp;\u0026nbsp;\u0026nbsp;2023-09-12 14:30 这是左边的消息内容。 2023-09-12 14:45\u0026nbsp;\u0026nbsp;\u0026nbsp;Alice 这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。 时间轴 {\\{\u0026lt; timeline date=\u0026#34;2023-10-01\u0026#34; title=\u0026#34;国庆节\u0026#34; description=\u0026#34;祖国生日快乐\u0026#34; tags=\u0026#34;节日\u0026#34; url=\u0026#34;\u0026#34; \u0026gt;}} 预览\n2023-10-01 节日 国庆节 祖国生日快乐 播放视频 哔哩哔哩 Video_ID: AV 或 BV PART_NUMBER（可选）：指定要播放的视频序号\n{\\{\u0026lt; bilibili VIDEO_ID PART_NUMBER \u0026gt;}} 预览\n油管 {\\{\u0026lt; youtube VIDEO_ID \u0026gt;}} 预览\n腾讯（狗都不用） {\\{\u0026lt; tencent g0014r3khdw \u0026gt;}} 通用视频 VIDEO_URL 可以是 URL 或相对于 static 目录的路径。例如， src=\u0026quot;/video/my-video.mp4\u0026quot; 将嵌入站点文件夹的视频文件 static/video/my-video.mp4 。\nautoplay 属性是可选的。它可用于指定是否应自动播放视频。 poster 属性是可选的。它可用于指定视频的海报图像。 最好用本地视频，引入直链不是很行。\n{\\{\u0026lt; video VIDEO_URL \u0026gt;}} {\\{\u0026lt; video src=\u0026#34;VIDEO_URL\u0026#34; autoplay=\u0026#34;true\u0026#34; poster=\u0026#34;./video-poster.png\u0026#34; \u0026gt;}} ","date":"2024-06-16T04:43:15+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/51311478_92923900.png","permalink":"https://note.zhongyangblog.eu.org/p/3/","title":"hugo-magic 写作短代码(三) —— 改"},{"content":"写作工具 推荐两款软件,本人都使用过: typora 和 obsidian\ntypora 破解版:\nhttps://github.com/woniu336/typora-007\n新建文章 在博客目录找到shell/quickstart.sh双击打开即可\n先设置全局代理端口，再验证 ssh\n发布到 Github 前提:\n魔法上网 在 Github 新建一个仓库 可以取名为 username.github.io\n找到shell/quickstart.sh双击打开,选择7.SSH 管理工具 按照 1 到 4 走一遍流程，之前搞过 github 仓库可以跳过\n科普一下: hugo 是静态博客,需要把public目录下的所有文件发布到 github 你可能找不到public目录,工具箱选择第 3 项:生成静态文件即可 需要把public单独作为一个仓库发布到 github,选择菜单8:推送 public 到Github 远程仓库格式,例如:git@github.com:1143520/1143520.github.io.git（这一步可以多试几次，直到可以显示已连接的仓库名，最后都会上传） 上面的 1143520.github.io 是放置静态文件资源的仓库，还需要一个博客源码仓库，例如:1143520/hugo，可以是 private 仓库，保护源码，这个仓库需要 token，必须有 repo 和 workflow 权限（classic,打勾） Github Actions 工作流 Github Actions 通俗解释: 按照剧本去执行任务,什么时候干什么事情\n打开 git bash 在博客目录运行\nmkdir -p .github/workflows 在 workflows 目录新建 main.yml 文件,粘贴以下内容:\nname: Auto Deploy hugo on: push: branches: - main # 更新触发的分支 jobs: build-deploy: # runs-on: ubuntu-latest runs-on: ubuntu-20.04 steps: - name: Check out repository code uses: actions/checkout@v4 with: submodules: recursive # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup hugo uses: peaceiris/actions-hugo@v3.0.0 with: # hugo-version: \u0026#34;latest\u0026#34; # 可以修改为你使用的 Hugo 版本 hugo-version: \u0026#34;0.127.0\u0026#34; extended: true # 设置是否需要 extended 版本 - name: Cache resources # 缓存 resource 文件加快生成速度 uses: actions/cache@v3 with: path: resources # 检查照片文件变化 key: ${{ runner.os }}-hugocache-${{ hashFiles(\u0026#39;content/**/*\u0026#39;) }} restore-keys: ${{ runner.os }}-hugocache- - name: Build Hugo static files # 部署静态资源 run: hugo --gc --minify - name: Deploy to Github Pages # 部署到Github Pages页面 uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: 1143520/1143520.github.io publish_dir: ./public # hugo 生成到 public 作为跟目录 publish_branch: main # Github Pages 所在分支 commit_message: ${{ github.event.head_commit.message }} 这个文件的作用是将 Hugo 生成的静态网站文件从 ./public 目录发布到 woniu336/woniu336.github.io 仓库的 main 分支，并且使用指定的个人访问令牌来进行身份验证和授权。 把 1143520/1143520.github.io 改成你自己的 public 仓库,前面是用户名,后面是仓库名\n你需要做两件事:\n打开https://github.com/settings/tokens/new 新建令牌（repo 和 workflow 权限）\n发布项目到 github,注意:这里不是指 public 仓库,是博客根目录发布到 github,\n然后在 settings/secrets/actions 添加变量(这一步自己查找 git 命令，或者使用自己的 git_uploud.bat,需要先上传仓库生成.git 文件夹,点击 5.一键推送才有用)\n推送这个仓库一定要检查是否有.gitignore 文件，排除 public 文件夹，或者先剪切出去，后面再粘贴回来（前提是 public 你不想修改了），建议.gitignore\n# Hugo 默认的生成目录 /public/ # 其他一些常见的 Hugo 相关忽略项 /resources/_gen/ .hugo_build.lock # 操作系统生成的文件 .DS_Store Thumbs.db # IDE 相关文件 .idea/ .vscode/ name: PERSONAL_TOKEN\nValue: 新建的令牌\n然后你就可以使用工具箱脚本中的菜单5:一键推送了,你会看到推送了两个仓库. 发布到 vercel 绑定 github,选择或者 cloudflare 同理，绑定的是 1143520.github.io 这个公开的仓库 在 vercel 绑定 github,选择推送 public 目录的远程仓库,一键部署,cloudflare 同理， 设置 vercel 自定义的域名，先 DNS 解析默认 cname：cname.vercel-dns.com 或者优选 ip,A 记录：76.223.126.88，等待 vercel 生成证书，确认自定义域名可以“安全”访问，回到 cloudflare，把 DNS 记录改成 cname：vercel-cname.xingpingcn.top 这个是国内大佬的 CDN 优化，但是只适用于顶级域名，二级有些地方会阻断\nhttps://github.com/xingpingcn/enhanced-FaaS-in-China 修改没有立即生效，建议 ctrl+f5 刷新浏览器\n在.gitmodules 中 加载一些子模块资源貌似是从原作者仓库加载的，虽然测试过好像没啥用，以防万一，我还是转到了自己的仓库（包括所有文件），当个备份吧\nhttps://github.com/1143520/hugo-magic 部署 twikoo 评论的时候，注意替换:是包括括号也要替换的\n类似\nmongodb+srv://twikoo-dbsfbs:lidfgnjsdYG52bD5r33@cluster0.4gn5a.mongodb.net/?retryWrites=true\u0026amp;w=majority\u0026amp;appName=Cluster0 完成之后 8、静态资源，头像等等就不要改动了，只需要 5 就行\n","date":"2024-06-15T23:09:57+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/51311478_92923900.png","permalink":"https://note.zhongyangblog.eu.org/p/2/","title":"hugo博客写作流程(二) —— 改"},{"content":"前提条件 以下教程以 windows10 为例 操作终端使用 git bash 魔法上网的前提下 下载 hugo https://github.com/gohugoio/hugo/releases/download/v0.127.0/hugo_extended_0.127.0_windows-amd64.zip 解压到任意目录,然后将目录添加到系统环境变量 如图 (windows) 打开 cmd 输入 hugo version 验证是否设置正确 下载安装 Git https://github.com/git-for-windows/git/releases/download/v2.45.2.windows.1/Git-2.45.2-64-bit.exe 新建博客 使用 Git bash 终端,打开方式: 桌面右键 找到 Git Bash Here 如果没有魔法上网,git submodule add这一步会拉取失败 后面要使用 shell 脚本,所以需要在系统应用默认处把.sh 文件设置默认 gitbash 打开\n在桌面右键打开 Git bash 运行以下命令\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/woniu336/hugo-magic.git themes/hugo-magic 拷贝文件 拷贝 hugo-magic 主题核心文件到根目录 quickstart\ncp -rf themes/hugo-magic/exampleSite/* . rm hugo.toml mkdir -p data/summary mkdir -p assets/img cp themes/hugo-magic/data/footer_links.json data/ cp themes/hugo-magic/data/summary/summary.json data/summary/ cp -r themes/hugo-magic/archetypes . cp -r themes/hugo-magic/shell . cp -r themes/hugo-magic/static . cp themes/hugo-magic/.gitignore . 启动预览 hugo server -D 打开浏览器,输入地址: http://localhost:1313/\n默认的.git 和其他 git 配置文件不要删除，主题 theme 可以把.git 文件夹删除，防止跳转到原作者仓库\n","date":"2024-06-15T21:22:11+08:00","image":"https://cdn.h5wan.4399sj.com/public/images/report/20241221/51311478_92923900.png","permalink":"https://note.zhongyangblog.eu.org/p/1/","title":"hugo-magic主题使用教程(一) —— 改"}]